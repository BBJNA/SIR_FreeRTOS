
Example006.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000713c  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008713c  0008713c  0001713c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000afc  20070000  00087144  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000bacc  20070b00  00087c48  00020b00  2**3
                  ALLOC
  4 .stack        00002004  2007c5cc  00093714  00020b00  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020afc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b25  2**0
                  CONTENTS, READONLY
  7 .debug_info   00023d3c  00000000  00000000  00020b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004b43  00000000  00000000  000448ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000a349  00000000  00000000  000493fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ee0  00000000  00000000  00053746  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000f68  00000000  00000000  00054626  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000a6a4  00000000  00000000  0005558e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00015f9c  00000000  00000000  0005fc32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00073867  00000000  00000000  00075bce  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003014  00000000  00000000  000e9438  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	d0 e5 07 20 ed 21 08 00 e9 21 08 00 e9 21 08 00     ... .!...!...!..
   80010:	e9 21 08 00 e9 21 08 00 e9 21 08 00 00 00 00 00     .!...!...!......
	...
   8002c:	91 02 08 00 e9 21 08 00 00 00 00 00 11 03 08 00     .....!..........
   8003c:	4d 03 08 00 e9 21 08 00 e9 21 08 00 e9 21 08 00     M....!...!...!..
   8004c:	e9 21 08 00 e9 21 08 00 e9 21 08 00 e9 21 08 00     .!...!...!...!..
   8005c:	e9 21 08 00 e9 21 08 00 e9 21 08 00 00 00 00 00     .!...!...!......
   8006c:	5d 20 08 00 71 20 08 00 85 20 08 00 99 20 08 00     ] ..q ... ... ..
	...
   80084:	e9 21 08 00 e9 21 08 00 e9 21 08 00 e9 21 08 00     .!...!...!...!..
   80094:	e9 21 08 00 e9 21 08 00 e9 21 08 00 e9 21 08 00     .!...!...!...!..
   800a4:	00 00 00 00 e9 21 08 00 e9 21 08 00 e9 21 08 00     .....!...!...!..
   800b4:	e9 21 08 00 e9 21 08 00 e9 21 08 00 e9 21 08 00     .!...!...!...!..
   800c4:	e9 21 08 00 e9 21 08 00 e9 21 08 00 e9 21 08 00     .!...!...!...!..
   800d4:	e9 21 08 00 e9 21 08 00 e9 21 08 00 e9 21 08 00     .!...!...!...!..
   800e4:	e9 21 08 00 e9 21 08 00 e9 21 08 00 e9 21 08 00     .!...!...!...!..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070b00 	.word	0x20070b00
   80110:	00000000 	.word	0x00000000
   80114:	00087144 	.word	0x00087144

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00087144 	.word	0x00087144
   80154:	20070b04 	.word	0x20070b04
   80158:	00087144 	.word	0x00087144
   8015c:	00000000 	.word	0x00000000

00080160 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   80164:	b980      	cbnz	r0, 80188 <_read+0x28>
   80166:	460c      	mov	r4, r1
   80168:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   8016a:	2a00      	cmp	r2, #0
   8016c:	dd0f      	ble.n	8018e <_read+0x2e>
   8016e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80170:	4e08      	ldr	r6, [pc, #32]	; (80194 <_read+0x34>)
   80172:	4d09      	ldr	r5, [pc, #36]	; (80198 <_read+0x38>)
   80174:	6830      	ldr	r0, [r6, #0]
   80176:	4621      	mov	r1, r4
   80178:	682b      	ldr	r3, [r5, #0]
   8017a:	4798      	blx	r3
		ptr++;
   8017c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   8017e:	42bc      	cmp	r4, r7
   80180:	d1f8      	bne.n	80174 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   80182:	4640      	mov	r0, r8
   80184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80188:	f04f 38ff 	mov.w	r8, #4294967295
   8018c:	e7f9      	b.n	80182 <_read+0x22>
	for (; len > 0; --len) {
   8018e:	4680      	mov	r8, r0
   80190:	e7f7      	b.n	80182 <_read+0x22>
   80192:	bf00      	nop
   80194:	2007ade0 	.word	0x2007ade0
   80198:	2007add8 	.word	0x2007add8

0008019c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8019c:	6943      	ldr	r3, [r0, #20]
   8019e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   801a2:	bf1d      	ittte	ne
   801a4:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   801a8:	61c1      	strne	r1, [r0, #28]
	return 0;
   801aa:	2000      	movne	r0, #0
		return 1;
   801ac:	2001      	moveq	r0, #1
}
   801ae:	4770      	bx	lr

000801b0 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   801b0:	6943      	ldr	r3, [r0, #20]
   801b2:	f013 0f01 	tst.w	r3, #1
   801b6:	d005      	beq.n	801c4 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   801b8:	6983      	ldr	r3, [r0, #24]
   801ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
   801be:	600b      	str	r3, [r1, #0]

	return 0;
   801c0:	2000      	movs	r0, #0
   801c2:	4770      	bx	lr
		return 1;
   801c4:	2001      	movs	r0, #1
}
   801c6:	4770      	bx	lr

000801c8 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   801c8:	f100 0308 	add.w	r3, r0, #8
   801cc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   801ce:	f04f 32ff 	mov.w	r2, #4294967295
   801d2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   801d4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   801d6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   801d8:	2300      	movs	r3, #0
   801da:	6003      	str	r3, [r0, #0]
   801dc:	4770      	bx	lr

000801de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   801de:	2300      	movs	r3, #0
   801e0:	6103      	str	r3, [r0, #16]
   801e2:	4770      	bx	lr

000801e4 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   801e4:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   801e6:	685a      	ldr	r2, [r3, #4]
   801e8:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   801ea:	6842      	ldr	r2, [r0, #4]
   801ec:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   801ee:	685a      	ldr	r2, [r3, #4]
   801f0:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   801f2:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   801f4:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   801f6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   801f8:	6803      	ldr	r3, [r0, #0]
   801fa:	3301      	adds	r3, #1
   801fc:	6003      	str	r3, [r0, #0]
   801fe:	4770      	bx	lr

00080200 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   80200:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   80202:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   80204:	f1b4 3fff 	cmp.w	r4, #4294967295
   80208:	d015      	beq.n	80236 <vListInsert+0x36>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   8020a:	f100 0308 	add.w	r3, r0, #8
   8020e:	68c2      	ldr	r2, [r0, #12]
   80210:	6812      	ldr	r2, [r2, #0]
   80212:	4294      	cmp	r4, r2
   80214:	d304      	bcc.n	80220 <vListInsert+0x20>
   80216:	685b      	ldr	r3, [r3, #4]
   80218:	685a      	ldr	r2, [r3, #4]
   8021a:	6812      	ldr	r2, [r2, #0]
   8021c:	4294      	cmp	r4, r2
   8021e:	d2fa      	bcs.n	80216 <vListInsert+0x16>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   80220:	685a      	ldr	r2, [r3, #4]
   80222:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80224:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   80226:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   80228:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8022a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   8022c:	6803      	ldr	r3, [r0, #0]
   8022e:	3301      	adds	r3, #1
   80230:	6003      	str	r3, [r0, #0]
}
   80232:	bc10      	pop	{r4}
   80234:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
   80236:	6903      	ldr	r3, [r0, #16]
   80238:	e7f2      	b.n	80220 <vListInsert+0x20>

0008023a <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   8023a:	6843      	ldr	r3, [r0, #4]
   8023c:	6882      	ldr	r2, [r0, #8]
   8023e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80240:	6883      	ldr	r3, [r0, #8]
   80242:	6842      	ldr	r2, [r0, #4]
   80244:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80246:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   80248:	685a      	ldr	r2, [r3, #4]
   8024a:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   8024c:	bf04      	itt	eq
   8024e:	6882      	ldreq	r2, [r0, #8]
   80250:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80252:	2200      	movs	r2, #0
   80254:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80256:	681a      	ldr	r2, [r3, #0]
   80258:	3a01      	subs	r2, #1
   8025a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   8025c:	6818      	ldr	r0, [r3, #0]
}
   8025e:	4770      	bx	lr

00080260 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80260:	4803      	ldr	r0, [pc, #12]	; (80270 <prvPortStartFirstTask+0x10>)
   80262:	6800      	ldr	r0, [r0, #0]
   80264:	6800      	ldr	r0, [r0, #0]
   80266:	f380 8808 	msr	MSP, r0
   8026a:	b662      	cpsie	i
   8026c:	df00      	svc	0
   8026e:	bf00      	nop
   80270:	e000ed08 	.word	0xe000ed08

00080274 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   80274:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80278:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   8027c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = 0;	/* LR */
   80280:	2300      	movs	r3, #0
   80282:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   80286:	f840 2c20 	str.w	r2, [r0, #-32]
}
   8028a:	3840      	subs	r0, #64	; 0x40
   8028c:	4770      	bx	lr
	...

00080290 <SVC_Handler>:
	__asm volatile (
   80290:	4b06      	ldr	r3, [pc, #24]	; (802ac <pxCurrentTCBConst2>)
   80292:	6819      	ldr	r1, [r3, #0]
   80294:	6808      	ldr	r0, [r1, #0]
   80296:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8029a:	f380 8809 	msr	PSP, r0
   8029e:	f04f 0000 	mov.w	r0, #0
   802a2:	f380 8811 	msr	BASEPRI, r0
   802a6:	f04e 0e0d 	orr.w	lr, lr, #13
   802aa:	4770      	bx	lr

000802ac <pxCurrentTCBConst2>:
   802ac:	2007ab28 	.word	0x2007ab28

000802b0 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   802b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   802b4:	4b01      	ldr	r3, [pc, #4]	; (802bc <vPortYieldFromISR+0xc>)
   802b6:	601a      	str	r2, [r3, #0]
   802b8:	4770      	bx	lr
   802ba:	bf00      	nop
   802bc:	e000ed04 	.word	0xe000ed04

000802c0 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   802c0:	f3ef 8011 	mrs	r0, BASEPRI
   802c4:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   802c8:	f381 8811 	msr	BASEPRI, r1
   802cc:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   802ce:	2000      	movs	r0, #0

000802d0 <vPortEnterCritical>:
{
   802d0:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   802d2:	4b03      	ldr	r3, [pc, #12]	; (802e0 <vPortEnterCritical+0x10>)
   802d4:	4798      	blx	r3
	uxCriticalNesting++;
   802d6:	4a03      	ldr	r2, [pc, #12]	; (802e4 <vPortEnterCritical+0x14>)
   802d8:	6813      	ldr	r3, [r2, #0]
   802da:	3301      	adds	r3, #1
   802dc:	6013      	str	r3, [r2, #0]
   802de:	bd08      	pop	{r3, pc}
   802e0:	000802c1 	.word	0x000802c1
   802e4:	2007012c 	.word	0x2007012c

000802e8 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   802e8:	f380 8811 	msr	BASEPRI, r0
   802ec:	4770      	bx	lr
	...

000802f0 <vPortExitCritical>:
{
   802f0:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   802f2:	4a05      	ldr	r2, [pc, #20]	; (80308 <vPortExitCritical+0x18>)
   802f4:	6813      	ldr	r3, [r2, #0]
   802f6:	3b01      	subs	r3, #1
   802f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   802fa:	b103      	cbz	r3, 802fe <vPortExitCritical+0xe>
   802fc:	bd08      	pop	{r3, pc}
		portENABLE_INTERRUPTS();
   802fe:	2000      	movs	r0, #0
   80300:	4b02      	ldr	r3, [pc, #8]	; (8030c <vPortExitCritical+0x1c>)
   80302:	4798      	blx	r3
}
   80304:	e7fa      	b.n	802fc <vPortExitCritical+0xc>
   80306:	bf00      	nop
   80308:	2007012c 	.word	0x2007012c
   8030c:	000802e9 	.word	0x000802e9

00080310 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80310:	f3ef 8009 	mrs	r0, PSP
   80314:	4b0c      	ldr	r3, [pc, #48]	; (80348 <pxCurrentTCBConst>)
   80316:	681a      	ldr	r2, [r3, #0]
   80318:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8031c:	6010      	str	r0, [r2, #0]
   8031e:	e92d 4008 	stmdb	sp!, {r3, lr}
   80322:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80326:	f380 8811 	msr	BASEPRI, r0
   8032a:	f001 f8a7 	bl	8147c <vTaskSwitchContext>
   8032e:	f04f 0000 	mov.w	r0, #0
   80332:	f380 8811 	msr	BASEPRI, r0
   80336:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8033a:	6819      	ldr	r1, [r3, #0]
   8033c:	6808      	ldr	r0, [r1, #0]
   8033e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80342:	f380 8809 	msr	PSP, r0
   80346:	4770      	bx	lr

00080348 <pxCurrentTCBConst>:
   80348:	2007ab28 	.word	0x2007ab28

0008034c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   8034c:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8034e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80352:	4b05      	ldr	r3, [pc, #20]	; (80368 <SysTick_Handler+0x1c>)
   80354:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80356:	4b05      	ldr	r3, [pc, #20]	; (8036c <SysTick_Handler+0x20>)
   80358:	4798      	blx	r3
	{
		vTaskIncrementTick();
   8035a:	4b05      	ldr	r3, [pc, #20]	; (80370 <SysTick_Handler+0x24>)
   8035c:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   8035e:	2000      	movs	r0, #0
   80360:	4b04      	ldr	r3, [pc, #16]	; (80374 <SysTick_Handler+0x28>)
   80362:	4798      	blx	r3
   80364:	bd08      	pop	{r3, pc}
   80366:	bf00      	nop
   80368:	e000ed04 	.word	0xe000ed04
   8036c:	000802c1 	.word	0x000802c1
   80370:	0008110d 	.word	0x0008110d
   80374:	000802e9 	.word	0x000802e9

00080378 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   80378:	4a03      	ldr	r2, [pc, #12]	; (80388 <vPortSetupTimerInterrupt+0x10>)
   8037a:	4b04      	ldr	r3, [pc, #16]	; (8038c <vPortSetupTimerInterrupt+0x14>)
   8037c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   8037e:	2207      	movs	r2, #7
   80380:	3b04      	subs	r3, #4
   80382:	601a      	str	r2, [r3, #0]
   80384:	4770      	bx	lr
   80386:	bf00      	nop
   80388:	0001481f 	.word	0x0001481f
   8038c:	e000e014 	.word	0xe000e014

00080390 <xPortStartScheduler>:
{
   80390:	b510      	push	{r4, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   80392:	4b09      	ldr	r3, [pc, #36]	; (803b8 <xPortStartScheduler+0x28>)
   80394:	681a      	ldr	r2, [r3, #0]
   80396:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   8039a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   8039c:	681a      	ldr	r2, [r3, #0]
   8039e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   803a2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
   803a4:	4b05      	ldr	r3, [pc, #20]	; (803bc <xPortStartScheduler+0x2c>)
   803a6:	4798      	blx	r3
	uxCriticalNesting = 0;
   803a8:	2400      	movs	r4, #0
   803aa:	4b05      	ldr	r3, [pc, #20]	; (803c0 <xPortStartScheduler+0x30>)
   803ac:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
   803ae:	4b05      	ldr	r3, [pc, #20]	; (803c4 <xPortStartScheduler+0x34>)
   803b0:	4798      	blx	r3
}
   803b2:	4620      	mov	r0, r4
   803b4:	bd10      	pop	{r4, pc}
   803b6:	bf00      	nop
   803b8:	e000ed20 	.word	0xe000ed20
   803bc:	00080379 	.word	0x00080379
   803c0:	2007012c 	.word	0x2007012c
   803c4:	00080261 	.word	0x00080261

000803c8 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   803c8:	b410      	push	{r4}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   803ca:	4a13      	ldr	r2, [pc, #76]	; (80418 <prvInsertBlockIntoFreeList+0x50>)
   803cc:	e000      	b.n	803d0 <prvInsertBlockIntoFreeList+0x8>
   803ce:	461a      	mov	r2, r3
   803d0:	6813      	ldr	r3, [r2, #0]
   803d2:	4283      	cmp	r3, r0
   803d4:	d3fb      	bcc.n	803ce <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   803d6:	6851      	ldr	r1, [r2, #4]
   803d8:	1854      	adds	r4, r2, r1
   803da:	42a0      	cmp	r0, r4
   803dc:	d009      	beq.n	803f2 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   803de:	6841      	ldr	r1, [r0, #4]
   803e0:	1844      	adds	r4, r0, r1
   803e2:	42a3      	cmp	r3, r4
   803e4:	d00a      	beq.n	803fc <prvInsertBlockIntoFreeList+0x34>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   803e6:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   803e8:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   803ea:	bf18      	it	ne
   803ec:	6010      	strne	r0, [r2, #0]
	}
}
   803ee:	bc10      	pop	{r4}
   803f0:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   803f2:	6840      	ldr	r0, [r0, #4]
   803f4:	4401      	add	r1, r0
   803f6:	6051      	str	r1, [r2, #4]
   803f8:	4610      	mov	r0, r2
   803fa:	e7f0      	b.n	803de <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
   803fc:	4c07      	ldr	r4, [pc, #28]	; (8041c <prvInsertBlockIntoFreeList+0x54>)
   803fe:	6824      	ldr	r4, [r4, #0]
   80400:	42a3      	cmp	r3, r4
   80402:	d006      	beq.n	80412 <prvInsertBlockIntoFreeList+0x4a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   80404:	685b      	ldr	r3, [r3, #4]
   80406:	4419      	add	r1, r3
   80408:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   8040a:	6813      	ldr	r3, [r2, #0]
   8040c:	681b      	ldr	r3, [r3, #0]
   8040e:	6003      	str	r3, [r0, #0]
   80410:	e7ea      	b.n	803e8 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   80412:	6003      	str	r3, [r0, #0]
   80414:	e7e8      	b.n	803e8 <prvInsertBlockIntoFreeList+0x20>
   80416:	bf00      	nop
   80418:	2007ab20 	.word	0x2007ab20
   8041c:	20070b1c 	.word	0x20070b1c

00080420 <pvPortMalloc>:
{
   80420:	b538      	push	{r3, r4, r5, lr}
   80422:	4604      	mov	r4, r0
	vTaskSuspendAll();
   80424:	4b2c      	ldr	r3, [pc, #176]	; (804d8 <pvPortMalloc+0xb8>)
   80426:	4798      	blx	r3
		if( pxEnd == NULL )
   80428:	4b2c      	ldr	r3, [pc, #176]	; (804dc <pvPortMalloc+0xbc>)
   8042a:	681b      	ldr	r3, [r3, #0]
   8042c:	b18b      	cbz	r3, 80452 <pvPortMalloc+0x32>
		if( xWantedSize > 0 )
   8042e:	2c00      	cmp	r4, #0
   80430:	d04b      	beq.n	804ca <pvPortMalloc+0xaa>
			xWantedSize += heapSTRUCT_SIZE;
   80432:	f104 0210 	add.w	r2, r4, #16
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   80436:	f012 0f07 	tst.w	r2, #7
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   8043a:	bf1c      	itt	ne
   8043c:	f022 0207 	bicne.w	r2, r2, #7
   80440:	3208      	addne	r2, #8
		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   80442:	1e51      	subs	r1, r2, #1
   80444:	f649 73fe 	movw	r3, #40958	; 0x9ffe
   80448:	4299      	cmp	r1, r3
   8044a:	d83b      	bhi.n	804c4 <pvPortMalloc+0xa4>
			pxBlock = xStart.pxNextFreeBlock;
   8044c:	4924      	ldr	r1, [pc, #144]	; (804e0 <pvPortMalloc+0xc0>)
   8044e:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80450:	e016      	b.n	80480 <pvPortMalloc+0x60>
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   80452:	4a23      	ldr	r2, [pc, #140]	; (804e0 <pvPortMalloc+0xc0>)
   80454:	4b23      	ldr	r3, [pc, #140]	; (804e4 <pvPortMalloc+0xc4>)
   80456:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   80458:	2100      	movs	r1, #0
   8045a:	6051      	str	r1, [r2, #4]
	pxEnd = ( void * ) pucHeapEnd;
   8045c:	f649 72f0 	movw	r2, #40944	; 0x9ff0
   80460:	1898      	adds	r0, r3, r2
   80462:	4d1e      	ldr	r5, [pc, #120]	; (804dc <pvPortMalloc+0xbc>)
   80464:	6028      	str	r0, [r5, #0]
	pxEnd->xBlockSize = 0;
   80466:	f649 75f4 	movw	r5, #40948	; 0x9ff4
   8046a:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   8046c:	5099      	str	r1, [r3, r2]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   8046e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   80470:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   80472:	4a1d      	ldr	r2, [pc, #116]	; (804e8 <pvPortMalloc+0xc8>)
   80474:	6813      	ldr	r3, [r2, #0]
   80476:	3b10      	subs	r3, #16
   80478:	6013      	str	r3, [r2, #0]
   8047a:	e7d8      	b.n	8042e <pvPortMalloc+0xe>
   8047c:	4621      	mov	r1, r4
				pxBlock = pxBlock->pxNextFreeBlock;
   8047e:	461c      	mov	r4, r3
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80480:	6863      	ldr	r3, [r4, #4]
   80482:	429a      	cmp	r2, r3
   80484:	d902      	bls.n	8048c <pvPortMalloc+0x6c>
   80486:	6823      	ldr	r3, [r4, #0]
   80488:	2b00      	cmp	r3, #0
   8048a:	d1f7      	bne.n	8047c <pvPortMalloc+0x5c>
			if( pxBlock != pxEnd )
   8048c:	4b13      	ldr	r3, [pc, #76]	; (804dc <pvPortMalloc+0xbc>)
   8048e:	681b      	ldr	r3, [r3, #0]
   80490:	429c      	cmp	r4, r3
   80492:	d017      	beq.n	804c4 <pvPortMalloc+0xa4>
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   80494:	680d      	ldr	r5, [r1, #0]
   80496:	3510      	adds	r5, #16
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   80498:	6823      	ldr	r3, [r4, #0]
   8049a:	600b      	str	r3, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   8049c:	6863      	ldr	r3, [r4, #4]
   8049e:	1a9b      	subs	r3, r3, r2
   804a0:	2b20      	cmp	r3, #32
   804a2:	d809      	bhi.n	804b8 <pvPortMalloc+0x98>
				xFreeBytesRemaining -= pxBlock->xBlockSize;
   804a4:	4a10      	ldr	r2, [pc, #64]	; (804e8 <pvPortMalloc+0xc8>)
   804a6:	6813      	ldr	r3, [r2, #0]
   804a8:	6861      	ldr	r1, [r4, #4]
   804aa:	1a5b      	subs	r3, r3, r1
   804ac:	6013      	str	r3, [r2, #0]
	xTaskResumeAll();
   804ae:	4b0f      	ldr	r3, [pc, #60]	; (804ec <pvPortMalloc+0xcc>)
   804b0:	4798      	blx	r3
		if( pvReturn == NULL )
   804b2:	b165      	cbz	r5, 804ce <pvPortMalloc+0xae>
}
   804b4:	4628      	mov	r0, r5
   804b6:	bd38      	pop	{r3, r4, r5, pc}
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   804b8:	18a0      	adds	r0, r4, r2
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   804ba:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   804bc:	6062      	str	r2, [r4, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   804be:	4b0c      	ldr	r3, [pc, #48]	; (804f0 <pvPortMalloc+0xd0>)
   804c0:	4798      	blx	r3
   804c2:	e7ef      	b.n	804a4 <pvPortMalloc+0x84>
	xTaskResumeAll();
   804c4:	4b09      	ldr	r3, [pc, #36]	; (804ec <pvPortMalloc+0xcc>)
   804c6:	4798      	blx	r3
   804c8:	e001      	b.n	804ce <pvPortMalloc+0xae>
   804ca:	4b08      	ldr	r3, [pc, #32]	; (804ec <pvPortMalloc+0xcc>)
   804cc:	4798      	blx	r3
			vApplicationMallocFailedHook();
   804ce:	4b09      	ldr	r3, [pc, #36]	; (804f4 <pvPortMalloc+0xd4>)
   804d0:	4798      	blx	r3
   804d2:	2500      	movs	r5, #0
	return pvReturn;
   804d4:	e7ee      	b.n	804b4 <pvPortMalloc+0x94>
   804d6:	bf00      	nop
   804d8:	000810dd 	.word	0x000810dd
   804dc:	20070b1c 	.word	0x20070b1c
   804e0:	2007ab20 	.word	0x2007ab20
   804e4:	20070b20 	.word	0x20070b20
   804e8:	20070130 	.word	0x20070130
   804ec:	0008126d 	.word	0x0008126d
   804f0:	000803c9 	.word	0x000803c9
   804f4:	00083649 	.word	0x00083649

000804f8 <vPortFree>:
	if( pv != NULL )
   804f8:	b180      	cbz	r0, 8051c <vPortFree+0x24>
{
   804fa:	b510      	push	{r4, lr}
   804fc:	4604      	mov	r4, r0
		vTaskSuspendAll();
   804fe:	4b08      	ldr	r3, [pc, #32]	; (80520 <vPortFree+0x28>)
   80500:	4798      	blx	r3
			xFreeBytesRemaining += pxLink->xBlockSize;
   80502:	4a08      	ldr	r2, [pc, #32]	; (80524 <vPortFree+0x2c>)
   80504:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80508:	6811      	ldr	r1, [r2, #0]
   8050a:	440b      	add	r3, r1
   8050c:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   8050e:	f1a4 0010 	sub.w	r0, r4, #16
   80512:	4b05      	ldr	r3, [pc, #20]	; (80528 <vPortFree+0x30>)
   80514:	4798      	blx	r3
		xTaskResumeAll();
   80516:	4b05      	ldr	r3, [pc, #20]	; (8052c <vPortFree+0x34>)
   80518:	4798      	blx	r3
   8051a:	bd10      	pop	{r4, pc}
   8051c:	4770      	bx	lr
   8051e:	bf00      	nop
   80520:	000810dd 	.word	0x000810dd
   80524:	20070130 	.word	0x20070130
   80528:	000803c9 	.word	0x000803c9
   8052c:	0008126d 	.word	0x0008126d

00080530 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   80530:	b510      	push	{r4, lr}
   80532:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   80534:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80536:	b95b      	cbnz	r3, 80550 <prvCopyDataToQueue+0x20>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80538:	6803      	ldr	r3, [r0, #0]
   8053a:	b11b      	cbz	r3, 80544 <prvCopyDataToQueue+0x14>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
		}
	}

	++( pxQueue->uxMessagesWaiting );
   8053c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   8053e:	3301      	adds	r3, #1
   80540:	63a3      	str	r3, [r4, #56]	; 0x38
   80542:	bd10      	pop	{r4, pc}
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80544:	6840      	ldr	r0, [r0, #4]
   80546:	4b12      	ldr	r3, [pc, #72]	; (80590 <prvCopyDataToQueue+0x60>)
   80548:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   8054a:	2300      	movs	r3, #0
   8054c:	6063      	str	r3, [r4, #4]
   8054e:	e7f5      	b.n	8053c <prvCopyDataToQueue+0xc>
	else if( xPosition == queueSEND_TO_BACK )
   80550:	b96a      	cbnz	r2, 8056e <prvCopyDataToQueue+0x3e>
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80552:	461a      	mov	r2, r3
   80554:	6880      	ldr	r0, [r0, #8]
   80556:	4b0f      	ldr	r3, [pc, #60]	; (80594 <prvCopyDataToQueue+0x64>)
   80558:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   8055a:	68a3      	ldr	r3, [r4, #8]
   8055c:	6c22      	ldr	r2, [r4, #64]	; 0x40
   8055e:	4413      	add	r3, r2
   80560:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   80562:	6862      	ldr	r2, [r4, #4]
   80564:	4293      	cmp	r3, r2
   80566:	d3e9      	bcc.n	8053c <prvCopyDataToQueue+0xc>
			pxQueue->pcWriteTo = pxQueue->pcHead;
   80568:	6823      	ldr	r3, [r4, #0]
   8056a:	60a3      	str	r3, [r4, #8]
   8056c:	e7e6      	b.n	8053c <prvCopyDataToQueue+0xc>
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   8056e:	461a      	mov	r2, r3
   80570:	68c0      	ldr	r0, [r0, #12]
   80572:	4b08      	ldr	r3, [pc, #32]	; (80594 <prvCopyDataToQueue+0x64>)
   80574:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   80576:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80578:	4252      	negs	r2, r2
   8057a:	68e3      	ldr	r3, [r4, #12]
   8057c:	4413      	add	r3, r2
   8057e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   80580:	6821      	ldr	r1, [r4, #0]
   80582:	428b      	cmp	r3, r1
   80584:	d2da      	bcs.n	8053c <prvCopyDataToQueue+0xc>
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   80586:	6863      	ldr	r3, [r4, #4]
   80588:	441a      	add	r2, r3
   8058a:	60e2      	str	r2, [r4, #12]
   8058c:	e7d6      	b.n	8053c <prvCopyDataToQueue+0xc>
   8058e:	bf00      	nop
   80590:	00081861 	.word	0x00081861
   80594:	000836c5 	.word	0x000836c5

00080598 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   80598:	b538      	push	{r3, r4, r5, lr}
   8059a:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   8059c:	6800      	ldr	r0, [r0, #0]
   8059e:	b158      	cbz	r0, 805b8 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   805a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   805a2:	68dc      	ldr	r4, [r3, #12]
   805a4:	4414      	add	r4, r2
   805a6:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   805a8:	685d      	ldr	r5, [r3, #4]
   805aa:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   805ac:	bf28      	it	cs
   805ae:	60d8      	strcs	r0, [r3, #12]
   805b0:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   805b2:	68d9      	ldr	r1, [r3, #12]
   805b4:	4b01      	ldr	r3, [pc, #4]	; (805bc <prvCopyDataFromQueue+0x24>)
   805b6:	4798      	blx	r3
   805b8:	bd38      	pop	{r3, r4, r5, pc}
   805ba:	bf00      	nop
   805bc:	000836c5 	.word	0x000836c5

000805c0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   805c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   805c2:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   805c4:	4b1f      	ldr	r3, [pc, #124]	; (80644 <prvUnlockQueue+0x84>)
   805c6:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   805c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   805ca:	2b00      	cmp	r3, #0
   805cc:	dd14      	ble.n	805f8 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   805ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
   805d0:	b193      	cbz	r3, 805f8 <prvUnlockQueue+0x38>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   805d2:	f104 0624 	add.w	r6, r4, #36	; 0x24
   805d6:	4d1c      	ldr	r5, [pc, #112]	; (80648 <prvUnlockQueue+0x88>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   805d8:	4f1c      	ldr	r7, [pc, #112]	; (8064c <prvUnlockQueue+0x8c>)
   805da:	e007      	b.n	805ec <prvUnlockQueue+0x2c>
				}

				--( pxQueue->xTxLock );
   805dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   805de:	3b01      	subs	r3, #1
   805e0:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   805e2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   805e4:	2b00      	cmp	r3, #0
   805e6:	dd07      	ble.n	805f8 <prvUnlockQueue+0x38>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   805e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   805ea:	b12b      	cbz	r3, 805f8 <prvUnlockQueue+0x38>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   805ec:	4630      	mov	r0, r6
   805ee:	47a8      	blx	r5
   805f0:	2800      	cmp	r0, #0
   805f2:	d0f3      	beq.n	805dc <prvUnlockQueue+0x1c>
					vTaskMissedYield();
   805f4:	47b8      	blx	r7
   805f6:	e7f1      	b.n	805dc <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   805f8:	f04f 33ff 	mov.w	r3, #4294967295
   805fc:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   805fe:	4b14      	ldr	r3, [pc, #80]	; (80650 <prvUnlockQueue+0x90>)
   80600:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   80602:	4b10      	ldr	r3, [pc, #64]	; (80644 <prvUnlockQueue+0x84>)
   80604:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80606:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80608:	2b00      	cmp	r3, #0
   8060a:	dd14      	ble.n	80636 <prvUnlockQueue+0x76>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8060c:	6923      	ldr	r3, [r4, #16]
   8060e:	b193      	cbz	r3, 80636 <prvUnlockQueue+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80610:	f104 0610 	add.w	r6, r4, #16
   80614:	4d0c      	ldr	r5, [pc, #48]	; (80648 <prvUnlockQueue+0x88>)
				{
					vTaskMissedYield();
   80616:	4f0d      	ldr	r7, [pc, #52]	; (8064c <prvUnlockQueue+0x8c>)
   80618:	e007      	b.n	8062a <prvUnlockQueue+0x6a>
				}

				--( pxQueue->xRxLock );
   8061a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8061c:	3b01      	subs	r3, #1
   8061e:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80620:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80622:	2b00      	cmp	r3, #0
   80624:	dd07      	ble.n	80636 <prvUnlockQueue+0x76>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80626:	6923      	ldr	r3, [r4, #16]
   80628:	b12b      	cbz	r3, 80636 <prvUnlockQueue+0x76>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   8062a:	4630      	mov	r0, r6
   8062c:	47a8      	blx	r5
   8062e:	2800      	cmp	r0, #0
   80630:	d0f3      	beq.n	8061a <prvUnlockQueue+0x5a>
					vTaskMissedYield();
   80632:	47b8      	blx	r7
   80634:	e7f1      	b.n	8061a <prvUnlockQueue+0x5a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   80636:	f04f 33ff 	mov.w	r3, #4294967295
   8063a:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   8063c:	4b04      	ldr	r3, [pc, #16]	; (80650 <prvUnlockQueue+0x90>)
   8063e:	4798      	blx	r3
   80640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80642:	bf00      	nop
   80644:	000802d1 	.word	0x000802d1
   80648:	00081605 	.word	0x00081605
   8064c:	00081749 	.word	0x00081749
   80650:	000802f1 	.word	0x000802f1

00080654 <xQueueGenericReset>:
{
   80654:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   80656:	b308      	cbz	r0, 8069c <xQueueGenericReset+0x48>
   80658:	460d      	mov	r5, r1
   8065a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
   8065c:	4b17      	ldr	r3, [pc, #92]	; (806bc <xQueueGenericReset+0x68>)
   8065e:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   80660:	6822      	ldr	r2, [r4, #0]
   80662:	6c21      	ldr	r1, [r4, #64]	; 0x40
   80664:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80666:	fb03 f301 	mul.w	r3, r3, r1
   8066a:	18d0      	adds	r0, r2, r3
   8066c:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   8066e:	2000      	movs	r0, #0
   80670:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   80672:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   80674:	1a5b      	subs	r3, r3, r1
   80676:	4413      	add	r3, r2
   80678:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   8067a:	f04f 33ff 	mov.w	r3, #4294967295
   8067e:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   80680:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
   80682:	b995      	cbnz	r5, 806aa <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80684:	6923      	ldr	r3, [r4, #16]
   80686:	b12b      	cbz	r3, 80694 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80688:	f104 0010 	add.w	r0, r4, #16
   8068c:	4b0c      	ldr	r3, [pc, #48]	; (806c0 <xQueueGenericReset+0x6c>)
   8068e:	4798      	blx	r3
   80690:	2801      	cmp	r0, #1
   80692:	d007      	beq.n	806a4 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
   80694:	4b0b      	ldr	r3, [pc, #44]	; (806c4 <xQueueGenericReset+0x70>)
   80696:	4798      	blx	r3
}
   80698:	2001      	movs	r0, #1
   8069a:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxQueue );
   8069c:	4b0a      	ldr	r3, [pc, #40]	; (806c8 <xQueueGenericReset+0x74>)
   8069e:	4798      	blx	r3
   806a0:	bf00      	nop
   806a2:	e7fd      	b.n	806a0 <xQueueGenericReset+0x4c>
					portYIELD_WITHIN_API();
   806a4:	4b09      	ldr	r3, [pc, #36]	; (806cc <xQueueGenericReset+0x78>)
   806a6:	4798      	blx	r3
   806a8:	e7f4      	b.n	80694 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   806aa:	f104 0010 	add.w	r0, r4, #16
   806ae:	4d08      	ldr	r5, [pc, #32]	; (806d0 <xQueueGenericReset+0x7c>)
   806b0:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   806b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   806b6:	47a8      	blx	r5
   806b8:	e7ec      	b.n	80694 <xQueueGenericReset+0x40>
   806ba:	bf00      	nop
   806bc:	000802d1 	.word	0x000802d1
   806c0:	00081605 	.word	0x00081605
   806c4:	000802f1 	.word	0x000802f1
   806c8:	000802c1 	.word	0x000802c1
   806cc:	000802b1 	.word	0x000802b1
   806d0:	000801c9 	.word	0x000801c9

000806d4 <xQueueGenericCreate>:
{
   806d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   806d8:	2800      	cmp	r0, #0
   806da:	d04b      	beq.n	80774 <xQueueGenericCreate+0xa0>
   806dc:	460e      	mov	r6, r1
   806de:	4615      	mov	r5, r2
   806e0:	4607      	mov	r7, r0
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   806e2:	2050      	movs	r0, #80	; 0x50
   806e4:	4b25      	ldr	r3, [pc, #148]	; (8077c <xQueueGenericCreate+0xa8>)
   806e6:	4798      	blx	r3
		if( pxNewQueue != NULL )
   806e8:	4604      	mov	r4, r0
   806ea:	2800      	cmp	r0, #0
   806ec:	d042      	beq.n	80774 <xQueueGenericCreate+0xa0>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   806ee:	fb06 f007 	mul.w	r0, r6, r7
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   806f2:	3001      	adds	r0, #1
   806f4:	4b21      	ldr	r3, [pc, #132]	; (8077c <xQueueGenericCreate+0xa8>)
   806f6:	4798      	blx	r3
   806f8:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   806fa:	2800      	cmp	r0, #0
   806fc:	d02f      	beq.n	8075e <xQueueGenericCreate+0x8a>
				pxNewQueue->uxLength = uxQueueLength;
   806fe:	63e7      	str	r7, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   80700:	6426      	str	r6, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   80702:	2101      	movs	r1, #1
   80704:	4620      	mov	r0, r4
   80706:	4b1e      	ldr	r3, [pc, #120]	; (80780 <xQueueGenericCreate+0xac>)
   80708:	4798      	blx	r3
					pxNewQueue->ucQueueType = ucQueueType;
   8070a:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
				traceQUEUE_CREATE( pxNewQueue );
   8070e:	4620      	mov	r0, r4
   80710:	4f1c      	ldr	r7, [pc, #112]	; (80784 <xQueueGenericCreate+0xb0>)
   80712:	47b8      	blx	r7
   80714:	4e1c      	ldr	r6, [pc, #112]	; (80788 <xQueueGenericCreate+0xb4>)
   80716:	5c30      	ldrb	r0, [r6, r0]
   80718:	4b1c      	ldr	r3, [pc, #112]	; (8078c <xQueueGenericCreate+0xb8>)
   8071a:	4798      	blx	r3
   8071c:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
   80720:	4620      	mov	r0, r4
   80722:	47b8      	blx	r7
   80724:	5c35      	ldrb	r5, [r6, r0]
   80726:	3518      	adds	r5, #24
   80728:	b2ed      	uxtb	r5, r5
   8072a:	4620      	mov	r0, r4
   8072c:	47b8      	blx	r7
   8072e:	f816 9000 	ldrb.w	r9, [r6, r0]
   80732:	4620      	mov	r0, r4
   80734:	f8df 8068 	ldr.w	r8, [pc, #104]	; 807a0 <xQueueGenericCreate+0xcc>
   80738:	47c0      	blx	r8
   8073a:	4602      	mov	r2, r0
   8073c:	4649      	mov	r1, r9
   8073e:	4628      	mov	r0, r5
   80740:	4b13      	ldr	r3, [pc, #76]	; (80790 <xQueueGenericCreate+0xbc>)
   80742:	4798      	blx	r3
   80744:	4620      	mov	r0, r4
   80746:	47b8      	blx	r7
   80748:	5c35      	ldrb	r5, [r6, r0]
   8074a:	4620      	mov	r0, r4
   8074c:	47c0      	blx	r8
   8074e:	2200      	movs	r2, #0
   80750:	4601      	mov	r1, r0
   80752:	4628      	mov	r0, r5
   80754:	4b0f      	ldr	r3, [pc, #60]	; (80794 <xQueueGenericCreate+0xc0>)
   80756:	4798      	blx	r3
}
   80758:	4620      	mov	r0, r4
   8075a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				traceQUEUE_CREATE_FAILED( ucQueueType );
   8075e:	4b0a      	ldr	r3, [pc, #40]	; (80788 <xQueueGenericCreate+0xb4>)
   80760:	5d59      	ldrb	r1, [r3, r5]
   80762:	f101 0040 	add.w	r0, r1, #64	; 0x40
   80766:	2200      	movs	r2, #0
   80768:	b2c0      	uxtb	r0, r0
   8076a:	4b09      	ldr	r3, [pc, #36]	; (80790 <xQueueGenericCreate+0xbc>)
   8076c:	4798      	blx	r3
				vPortFree( pxNewQueue );
   8076e:	4620      	mov	r0, r4
   80770:	4b09      	ldr	r3, [pc, #36]	; (80798 <xQueueGenericCreate+0xc4>)
   80772:	4798      	blx	r3
	configASSERT( xReturn );
   80774:	4b09      	ldr	r3, [pc, #36]	; (8079c <xQueueGenericCreate+0xc8>)
   80776:	4798      	blx	r3
   80778:	bf00      	nop
   8077a:	e7fd      	b.n	80778 <xQueueGenericCreate+0xa4>
   8077c:	00080421 	.word	0x00080421
   80780:	00080655 	.word	0x00080655
   80784:	000830f9 	.word	0x000830f9
   80788:	20070140 	.word	0x20070140
   8078c:	0008263d 	.word	0x0008263d
   80790:	00082b91 	.word	0x00082b91
   80794:	00082f1d 	.word	0x00082f1d
   80798:	000804f9 	.word	0x000804f9
   8079c:	000802c1 	.word	0x000802c1
   807a0:	000830ed 	.word	0x000830ed

000807a4 <xQueueGenericSend>:
{
   807a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   807a8:	b085      	sub	sp, #20
   807aa:	9201      	str	r2, [sp, #4]
   807ac:	9300      	str	r3, [sp, #0]
	configASSERT( pxQueue );
   807ae:	b140      	cbz	r0, 807c2 <xQueueGenericSend+0x1e>
   807b0:	4688      	mov	r8, r1
   807b2:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   807b4:	b149      	cbz	r1, 807ca <xQueueGenericSend+0x26>
   807b6:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   807b8:	4e69      	ldr	r6, [pc, #420]	; (80960 <xQueueGenericSend+0x1bc>)
					vTaskSetTimeOutState( &xTimeOut );
   807ba:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 809a0 <xQueueGenericSend+0x1fc>
		taskEXIT_CRITICAL();
   807be:	4d69      	ldr	r5, [pc, #420]	; (80964 <xQueueGenericSend+0x1c0>)
   807c0:	e067      	b.n	80892 <xQueueGenericSend+0xee>
	configASSERT( pxQueue );
   807c2:	4b69      	ldr	r3, [pc, #420]	; (80968 <xQueueGenericSend+0x1c4>)
   807c4:	4798      	blx	r3
   807c6:	bf00      	nop
   807c8:	e7fd      	b.n	807c6 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   807ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
   807cc:	b11b      	cbz	r3, 807d6 <xQueueGenericSend+0x32>
   807ce:	4b66      	ldr	r3, [pc, #408]	; (80968 <xQueueGenericSend+0x1c4>)
   807d0:	4798      	blx	r3
   807d2:	bf00      	nop
   807d4:	e7fd      	b.n	807d2 <xQueueGenericSend+0x2e>
   807d6:	2700      	movs	r7, #0
   807d8:	e7ee      	b.n	807b8 <xQueueGenericSend+0x14>
				traceQUEUE_SEND( pxQueue );
   807da:	4620      	mov	r0, r4
   807dc:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 80988 <xQueueGenericSend+0x1e4>
   807e0:	47c8      	blx	r9
   807e2:	4f62      	ldr	r7, [pc, #392]	; (8096c <xQueueGenericSend+0x1c8>)
   807e4:	5c3d      	ldrb	r5, [r7, r0]
   807e6:	3520      	adds	r5, #32
   807e8:	b2ed      	uxtb	r5, r5
   807ea:	4620      	mov	r0, r4
   807ec:	47c8      	blx	r9
   807ee:	f817 a000 	ldrb.w	sl, [r7, r0]
   807f2:	4620      	mov	r0, r4
   807f4:	4e5e      	ldr	r6, [pc, #376]	; (80970 <xQueueGenericSend+0x1cc>)
   807f6:	47b0      	blx	r6
   807f8:	4602      	mov	r2, r0
   807fa:	4651      	mov	r1, sl
   807fc:	4628      	mov	r0, r5
   807fe:	4b5d      	ldr	r3, [pc, #372]	; (80974 <xQueueGenericSend+0x1d0>)
   80800:	4798      	blx	r3
   80802:	4620      	mov	r0, r4
   80804:	47c8      	blx	r9
   80806:	5c3d      	ldrb	r5, [r7, r0]
   80808:	4620      	mov	r0, r4
   8080a:	47b0      	blx	r6
   8080c:	4606      	mov	r6, r0
   8080e:	4620      	mov	r0, r4
   80810:	47c8      	blx	r9
   80812:	5c3b      	ldrb	r3, [r7, r0]
   80814:	2b02      	cmp	r3, #2
   80816:	bf1d      	ittte	ne
   80818:	6ba2      	ldrne	r2, [r4, #56]	; 0x38
   8081a:	3201      	addne	r2, #1
   8081c:	b2d2      	uxtbne	r2, r2
   8081e:	2200      	moveq	r2, #0
   80820:	4631      	mov	r1, r6
   80822:	4628      	mov	r0, r5
   80824:	4b54      	ldr	r3, [pc, #336]	; (80978 <xQueueGenericSend+0x1d4>)
   80826:	4798      	blx	r3
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80828:	9a00      	ldr	r2, [sp, #0]
   8082a:	4641      	mov	r1, r8
   8082c:	4620      	mov	r0, r4
   8082e:	4b53      	ldr	r3, [pc, #332]	; (8097c <xQueueGenericSend+0x1d8>)
   80830:	4798      	blx	r3
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80832:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80834:	b92b      	cbnz	r3, 80842 <xQueueGenericSend+0x9e>
				taskEXIT_CRITICAL();
   80836:	4b4b      	ldr	r3, [pc, #300]	; (80964 <xQueueGenericSend+0x1c0>)
   80838:	4798      	blx	r3
				return pdPASS;
   8083a:	2001      	movs	r0, #1
}
   8083c:	b005      	add	sp, #20
   8083e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   80842:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80846:	4b4e      	ldr	r3, [pc, #312]	; (80980 <xQueueGenericSend+0x1dc>)
   80848:	4798      	blx	r3
   8084a:	2801      	cmp	r0, #1
   8084c:	d1f3      	bne.n	80836 <xQueueGenericSend+0x92>
						portYIELD_WITHIN_API();
   8084e:	4b4d      	ldr	r3, [pc, #308]	; (80984 <xQueueGenericSend+0x1e0>)
   80850:	4798      	blx	r3
   80852:	e7f0      	b.n	80836 <xQueueGenericSend+0x92>
					taskEXIT_CRITICAL();
   80854:	4b43      	ldr	r3, [pc, #268]	; (80964 <xQueueGenericSend+0x1c0>)
   80856:	4798      	blx	r3
					traceQUEUE_SEND_FAILED( pxQueue );
   80858:	4620      	mov	r0, r4
   8085a:	4f4b      	ldr	r7, [pc, #300]	; (80988 <xQueueGenericSend+0x1e4>)
   8085c:	47b8      	blx	r7
   8085e:	4e43      	ldr	r6, [pc, #268]	; (8096c <xQueueGenericSend+0x1c8>)
   80860:	5c35      	ldrb	r5, [r6, r0]
   80862:	3548      	adds	r5, #72	; 0x48
   80864:	b2ed      	uxtb	r5, r5
   80866:	4620      	mov	r0, r4
   80868:	47b8      	blx	r7
   8086a:	5c36      	ldrb	r6, [r6, r0]
   8086c:	4620      	mov	r0, r4
   8086e:	4b40      	ldr	r3, [pc, #256]	; (80970 <xQueueGenericSend+0x1cc>)
   80870:	4798      	blx	r3
   80872:	4602      	mov	r2, r0
   80874:	4631      	mov	r1, r6
   80876:	4628      	mov	r0, r5
   80878:	4b3e      	ldr	r3, [pc, #248]	; (80974 <xQueueGenericSend+0x1d0>)
   8087a:	4798      	blx	r3
					return errQUEUE_FULL;
   8087c:	2000      	movs	r0, #0
   8087e:	e7dd      	b.n	8083c <xQueueGenericSend+0x98>
					vTaskSetTimeOutState( &xTimeOut );
   80880:	a802      	add	r0, sp, #8
   80882:	47d8      	blx	fp
   80884:	e00f      	b.n	808a6 <xQueueGenericSend+0x102>
				prvUnlockQueue( pxQueue );
   80886:	4620      	mov	r0, r4
   80888:	4b40      	ldr	r3, [pc, #256]	; (8098c <xQueueGenericSend+0x1e8>)
   8088a:	4798      	blx	r3
				( void ) xTaskResumeAll();
   8088c:	4b40      	ldr	r3, [pc, #256]	; (80990 <xQueueGenericSend+0x1ec>)
   8088e:	4798      	blx	r3
   80890:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   80892:	47b0      	blx	r6
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80894:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80896:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80898:	429a      	cmp	r2, r3
   8089a:	d39e      	bcc.n	807da <xQueueGenericSend+0x36>
				if( xTicksToWait == ( portTickType ) 0 )
   8089c:	9b01      	ldr	r3, [sp, #4]
   8089e:	2b00      	cmp	r3, #0
   808a0:	d0d8      	beq.n	80854 <xQueueGenericSend+0xb0>
				else if( xEntryTimeSet == pdFALSE )
   808a2:	2f00      	cmp	r7, #0
   808a4:	d0ec      	beq.n	80880 <xQueueGenericSend+0xdc>
		taskEXIT_CRITICAL();
   808a6:	47a8      	blx	r5
		vTaskSuspendAll();
   808a8:	4b3a      	ldr	r3, [pc, #232]	; (80994 <xQueueGenericSend+0x1f0>)
   808aa:	4798      	blx	r3
		prvLockQueue( pxQueue );
   808ac:	47b0      	blx	r6
   808ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
   808b0:	f1b3 3fff 	cmp.w	r3, #4294967295
   808b4:	bf04      	itt	eq
   808b6:	2300      	moveq	r3, #0
   808b8:	6463      	streq	r3, [r4, #68]	; 0x44
   808ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   808bc:	f1b3 3fff 	cmp.w	r3, #4294967295
   808c0:	bf04      	itt	eq
   808c2:	2300      	moveq	r3, #0
   808c4:	64a3      	streq	r3, [r4, #72]	; 0x48
   808c6:	47a8      	blx	r5
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   808c8:	a901      	add	r1, sp, #4
   808ca:	a802      	add	r0, sp, #8
   808cc:	4b32      	ldr	r3, [pc, #200]	; (80998 <xQueueGenericSend+0x1f4>)
   808ce:	4798      	blx	r3
   808d0:	2800      	cmp	r0, #0
   808d2:	d12b      	bne.n	8092c <xQueueGenericSend+0x188>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   808d4:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   808d6:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   808da:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   808dc:	47a8      	blx	r5
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   808de:	45b9      	cmp	r9, r7
   808e0:	d1d1      	bne.n	80886 <xQueueGenericSend+0xe2>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   808e2:	4620      	mov	r0, r4
   808e4:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 80988 <xQueueGenericSend+0x1e4>
   808e8:	47d0      	blx	sl
   808ea:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8096c <xQueueGenericSend+0x1c8>
   808ee:	f819 7000 	ldrb.w	r7, [r9, r0]
   808f2:	3770      	adds	r7, #112	; 0x70
   808f4:	b2ff      	uxtb	r7, r7
   808f6:	4620      	mov	r0, r4
   808f8:	47d0      	blx	sl
   808fa:	f819 9000 	ldrb.w	r9, [r9, r0]
   808fe:	4620      	mov	r0, r4
   80900:	4b1b      	ldr	r3, [pc, #108]	; (80970 <xQueueGenericSend+0x1cc>)
   80902:	4798      	blx	r3
   80904:	4602      	mov	r2, r0
   80906:	4649      	mov	r1, r9
   80908:	4638      	mov	r0, r7
   8090a:	4b1a      	ldr	r3, [pc, #104]	; (80974 <xQueueGenericSend+0x1d0>)
   8090c:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   8090e:	9901      	ldr	r1, [sp, #4]
   80910:	f104 0010 	add.w	r0, r4, #16
   80914:	4b21      	ldr	r3, [pc, #132]	; (8099c <xQueueGenericSend+0x1f8>)
   80916:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80918:	4620      	mov	r0, r4
   8091a:	4b1c      	ldr	r3, [pc, #112]	; (8098c <xQueueGenericSend+0x1e8>)
   8091c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   8091e:	4b1c      	ldr	r3, [pc, #112]	; (80990 <xQueueGenericSend+0x1ec>)
   80920:	4798      	blx	r3
   80922:	2800      	cmp	r0, #0
   80924:	d1b4      	bne.n	80890 <xQueueGenericSend+0xec>
					portYIELD_WITHIN_API();
   80926:	4b17      	ldr	r3, [pc, #92]	; (80984 <xQueueGenericSend+0x1e0>)
   80928:	4798      	blx	r3
   8092a:	e7b1      	b.n	80890 <xQueueGenericSend+0xec>
			prvUnlockQueue( pxQueue );
   8092c:	4620      	mov	r0, r4
   8092e:	4b17      	ldr	r3, [pc, #92]	; (8098c <xQueueGenericSend+0x1e8>)
   80930:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80932:	4b17      	ldr	r3, [pc, #92]	; (80990 <xQueueGenericSend+0x1ec>)
   80934:	4798      	blx	r3
			traceQUEUE_SEND_FAILED( pxQueue );
   80936:	4620      	mov	r0, r4
   80938:	4f13      	ldr	r7, [pc, #76]	; (80988 <xQueueGenericSend+0x1e4>)
   8093a:	47b8      	blx	r7
   8093c:	4e0b      	ldr	r6, [pc, #44]	; (8096c <xQueueGenericSend+0x1c8>)
   8093e:	5c35      	ldrb	r5, [r6, r0]
   80940:	3548      	adds	r5, #72	; 0x48
   80942:	b2ed      	uxtb	r5, r5
   80944:	4620      	mov	r0, r4
   80946:	47b8      	blx	r7
   80948:	5c36      	ldrb	r6, [r6, r0]
   8094a:	4620      	mov	r0, r4
   8094c:	4b08      	ldr	r3, [pc, #32]	; (80970 <xQueueGenericSend+0x1cc>)
   8094e:	4798      	blx	r3
   80950:	4602      	mov	r2, r0
   80952:	4631      	mov	r1, r6
   80954:	4628      	mov	r0, r5
   80956:	4b07      	ldr	r3, [pc, #28]	; (80974 <xQueueGenericSend+0x1d0>)
   80958:	4798      	blx	r3
			return errQUEUE_FULL;
   8095a:	2000      	movs	r0, #0
   8095c:	e76e      	b.n	8083c <xQueueGenericSend+0x98>
   8095e:	bf00      	nop
   80960:	000802d1 	.word	0x000802d1
   80964:	000802f1 	.word	0x000802f1
   80968:	000802c1 	.word	0x000802c1
   8096c:	20070140 	.word	0x20070140
   80970:	000830ed 	.word	0x000830ed
   80974:	00082b91 	.word	0x00082b91
   80978:	00082f1d 	.word	0x00082f1d
   8097c:	00080531 	.word	0x00080531
   80980:	00081605 	.word	0x00081605
   80984:	000802b1 	.word	0x000802b1
   80988:	000830f9 	.word	0x000830f9
   8098c:	000805c1 	.word	0x000805c1
   80990:	0008126d 	.word	0x0008126d
   80994:	000810dd 	.word	0x000810dd
   80998:	000816c5 	.word	0x000816c5
   8099c:	00081535 	.word	0x00081535
   809a0:	0008169d 	.word	0x0008169d

000809a4 <xQueueGenericSendFromISR>:
{
   809a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   809a8:	b083      	sub	sp, #12
   809aa:	9301      	str	r3, [sp, #4]
	configASSERT( pxQueue );
   809ac:	2800      	cmp	r0, #0
   809ae:	d04a      	beq.n	80a46 <xQueueGenericSendFromISR+0xa2>
   809b0:	4689      	mov	r9, r1
   809b2:	4690      	mov	r8, r2
   809b4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   809b6:	2900      	cmp	r1, #0
   809b8:	d049      	beq.n	80a4e <xQueueGenericSendFromISR+0xaa>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   809ba:	4b38      	ldr	r3, [pc, #224]	; (80a9c <xQueueGenericSendFromISR+0xf8>)
   809bc:	4798      	blx	r3
   809be:	9000      	str	r0, [sp, #0]
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   809c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   809c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   809c4:	429a      	cmp	r2, r3
   809c6:	d24e      	bcs.n	80a66 <xQueueGenericSendFromISR+0xc2>
			traceQUEUE_SEND_FROM_ISR( pxQueue );
   809c8:	4620      	mov	r0, r4
   809ca:	4f35      	ldr	r7, [pc, #212]	; (80aa0 <xQueueGenericSendFromISR+0xfc>)
   809cc:	47b8      	blx	r7
   809ce:	4e35      	ldr	r6, [pc, #212]	; (80aa4 <xQueueGenericSendFromISR+0x100>)
   809d0:	5c35      	ldrb	r5, [r6, r0]
   809d2:	3530      	adds	r5, #48	; 0x30
   809d4:	b2ed      	uxtb	r5, r5
   809d6:	4620      	mov	r0, r4
   809d8:	47b8      	blx	r7
   809da:	f816 b000 	ldrb.w	fp, [r6, r0]
   809de:	4620      	mov	r0, r4
   809e0:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80abc <xQueueGenericSendFromISR+0x118>
   809e4:	47d0      	blx	sl
   809e6:	4602      	mov	r2, r0
   809e8:	4659      	mov	r1, fp
   809ea:	4628      	mov	r0, r5
   809ec:	4b2e      	ldr	r3, [pc, #184]	; (80aa8 <xQueueGenericSendFromISR+0x104>)
   809ee:	4798      	blx	r3
   809f0:	4620      	mov	r0, r4
   809f2:	47b8      	blx	r7
   809f4:	5c35      	ldrb	r5, [r6, r0]
   809f6:	4620      	mov	r0, r4
   809f8:	47d0      	blx	sl
   809fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   809fc:	3201      	adds	r2, #1
   809fe:	b2d2      	uxtb	r2, r2
   80a00:	4601      	mov	r1, r0
   80a02:	4628      	mov	r0, r5
   80a04:	4b29      	ldr	r3, [pc, #164]	; (80aac <xQueueGenericSendFromISR+0x108>)
   80a06:	4798      	blx	r3
			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80a08:	9a01      	ldr	r2, [sp, #4]
   80a0a:	4649      	mov	r1, r9
   80a0c:	4620      	mov	r0, r4
   80a0e:	4b28      	ldr	r3, [pc, #160]	; (80ab0 <xQueueGenericSendFromISR+0x10c>)
   80a10:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
   80a12:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80a14:	f1b3 3fff 	cmp.w	r3, #4294967295
   80a18:	d120      	bne.n	80a5c <xQueueGenericSendFromISR+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80a1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80a1c:	2b00      	cmp	r3, #0
   80a1e:	d036      	beq.n	80a8e <xQueueGenericSendFromISR+0xea>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80a20:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80a24:	4b23      	ldr	r3, [pc, #140]	; (80ab4 <xQueueGenericSendFromISR+0x110>)
   80a26:	4798      	blx	r3
   80a28:	2800      	cmp	r0, #0
   80a2a:	d032      	beq.n	80a92 <xQueueGenericSendFromISR+0xee>
						if( pxHigherPriorityTaskWoken != NULL )
   80a2c:	f1b8 0f00 	cmp.w	r8, #0
   80a30:	d031      	beq.n	80a96 <xQueueGenericSendFromISR+0xf2>
							*pxHigherPriorityTaskWoken = pdTRUE;
   80a32:	2401      	movs	r4, #1
   80a34:	f8c8 4000 	str.w	r4, [r8]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   80a38:	9800      	ldr	r0, [sp, #0]
   80a3a:	4b1f      	ldr	r3, [pc, #124]	; (80ab8 <xQueueGenericSendFromISR+0x114>)
   80a3c:	4798      	blx	r3
}
   80a3e:	4620      	mov	r0, r4
   80a40:	b003      	add	sp, #12
   80a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	configASSERT( pxQueue );
   80a46:	4b15      	ldr	r3, [pc, #84]	; (80a9c <xQueueGenericSendFromISR+0xf8>)
   80a48:	4798      	blx	r3
   80a4a:	bf00      	nop
   80a4c:	e7fd      	b.n	80a4a <xQueueGenericSendFromISR+0xa6>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80a4e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80a50:	2b00      	cmp	r3, #0
   80a52:	d0b2      	beq.n	809ba <xQueueGenericSendFromISR+0x16>
   80a54:	4b11      	ldr	r3, [pc, #68]	; (80a9c <xQueueGenericSendFromISR+0xf8>)
   80a56:	4798      	blx	r3
   80a58:	bf00      	nop
   80a5a:	e7fd      	b.n	80a58 <xQueueGenericSendFromISR+0xb4>
				++( pxQueue->xTxLock );
   80a5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80a5e:	3301      	adds	r3, #1
   80a60:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
   80a62:	2401      	movs	r4, #1
   80a64:	e7e8      	b.n	80a38 <xQueueGenericSendFromISR+0x94>
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   80a66:	4620      	mov	r0, r4
   80a68:	4f0d      	ldr	r7, [pc, #52]	; (80aa0 <xQueueGenericSendFromISR+0xfc>)
   80a6a:	47b8      	blx	r7
   80a6c:	4e0d      	ldr	r6, [pc, #52]	; (80aa4 <xQueueGenericSendFromISR+0x100>)
   80a6e:	5c35      	ldrb	r5, [r6, r0]
   80a70:	3558      	adds	r5, #88	; 0x58
   80a72:	b2ed      	uxtb	r5, r5
   80a74:	4620      	mov	r0, r4
   80a76:	47b8      	blx	r7
   80a78:	5c36      	ldrb	r6, [r6, r0]
   80a7a:	4620      	mov	r0, r4
   80a7c:	4b0f      	ldr	r3, [pc, #60]	; (80abc <xQueueGenericSendFromISR+0x118>)
   80a7e:	4798      	blx	r3
   80a80:	4602      	mov	r2, r0
   80a82:	4631      	mov	r1, r6
   80a84:	4628      	mov	r0, r5
   80a86:	4b08      	ldr	r3, [pc, #32]	; (80aa8 <xQueueGenericSendFromISR+0x104>)
   80a88:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   80a8a:	2400      	movs	r4, #0
   80a8c:	e7d4      	b.n	80a38 <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
   80a8e:	2401      	movs	r4, #1
   80a90:	e7d2      	b.n	80a38 <xQueueGenericSendFromISR+0x94>
   80a92:	2401      	movs	r4, #1
   80a94:	e7d0      	b.n	80a38 <xQueueGenericSendFromISR+0x94>
   80a96:	2401      	movs	r4, #1
   80a98:	e7ce      	b.n	80a38 <xQueueGenericSendFromISR+0x94>
   80a9a:	bf00      	nop
   80a9c:	000802c1 	.word	0x000802c1
   80aa0:	000830f9 	.word	0x000830f9
   80aa4:	20070140 	.word	0x20070140
   80aa8:	00082b91 	.word	0x00082b91
   80aac:	00082f1d 	.word	0x00082f1d
   80ab0:	00080531 	.word	0x00080531
   80ab4:	00081605 	.word	0x00081605
   80ab8:	000802e9 	.word	0x000802e9
   80abc:	000830ed 	.word	0x000830ed

00080ac0 <xQueueGenericReceive>:
{
   80ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80ac4:	b087      	sub	sp, #28
   80ac6:	9101      	str	r1, [sp, #4]
   80ac8:	9203      	str	r2, [sp, #12]
   80aca:	9302      	str	r3, [sp, #8]
	configASSERT( pxQueue );
   80acc:	b140      	cbz	r0, 80ae0 <xQueueGenericReceive+0x20>
   80ace:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80ad0:	9b01      	ldr	r3, [sp, #4]
   80ad2:	b14b      	cbz	r3, 80ae8 <xQueueGenericReceive+0x28>
   80ad4:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   80ad6:	4e8a      	ldr	r6, [pc, #552]	; (80d00 <xQueueGenericReceive+0x240>)
					vTaskSetTimeOutState( &xTimeOut );
   80ad8:	f8df a278 	ldr.w	sl, [pc, #632]	; 80d54 <xQueueGenericReceive+0x294>
		taskEXIT_CRITICAL();
   80adc:	4d89      	ldr	r5, [pc, #548]	; (80d04 <xQueueGenericReceive+0x244>)
   80ade:	e09c      	b.n	80c1a <xQueueGenericReceive+0x15a>
	configASSERT( pxQueue );
   80ae0:	4b89      	ldr	r3, [pc, #548]	; (80d08 <xQueueGenericReceive+0x248>)
   80ae2:	4798      	blx	r3
   80ae4:	bf00      	nop
   80ae6:	e7fd      	b.n	80ae4 <xQueueGenericReceive+0x24>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80ae8:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80aea:	b11b      	cbz	r3, 80af4 <xQueueGenericReceive+0x34>
   80aec:	4b86      	ldr	r3, [pc, #536]	; (80d08 <xQueueGenericReceive+0x248>)
   80aee:	4798      	blx	r3
   80af0:	bf00      	nop
   80af2:	e7fd      	b.n	80af0 <xQueueGenericReceive+0x30>
   80af4:	2700      	movs	r7, #0
   80af6:	e7ee      	b.n	80ad6 <xQueueGenericReceive+0x16>
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   80af8:	68e7      	ldr	r7, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   80afa:	9901      	ldr	r1, [sp, #4]
   80afc:	4620      	mov	r0, r4
   80afe:	4b83      	ldr	r3, [pc, #524]	; (80d0c <xQueueGenericReceive+0x24c>)
   80b00:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
   80b02:	9b02      	ldr	r3, [sp, #8]
   80b04:	2b00      	cmp	r3, #0
   80b06:	d143      	bne.n	80b90 <xQueueGenericReceive+0xd0>
					traceQUEUE_RECEIVE( pxQueue );
   80b08:	4620      	mov	r0, r4
   80b0a:	4f81      	ldr	r7, [pc, #516]	; (80d10 <xQueueGenericReceive+0x250>)
   80b0c:	47b8      	blx	r7
   80b0e:	4e81      	ldr	r6, [pc, #516]	; (80d14 <xQueueGenericReceive+0x254>)
   80b10:	5c35      	ldrb	r5, [r6, r0]
   80b12:	3528      	adds	r5, #40	; 0x28
   80b14:	b2ed      	uxtb	r5, r5
   80b16:	4620      	mov	r0, r4
   80b18:	47b8      	blx	r7
   80b1a:	f816 9000 	ldrb.w	r9, [r6, r0]
   80b1e:	4620      	mov	r0, r4
   80b20:	f8df 8210 	ldr.w	r8, [pc, #528]	; 80d34 <xQueueGenericReceive+0x274>
   80b24:	47c0      	blx	r8
   80b26:	4602      	mov	r2, r0
   80b28:	4649      	mov	r1, r9
   80b2a:	4628      	mov	r0, r5
   80b2c:	4b7a      	ldr	r3, [pc, #488]	; (80d18 <xQueueGenericReceive+0x258>)
   80b2e:	4798      	blx	r3
   80b30:	4620      	mov	r0, r4
   80b32:	47b8      	blx	r7
   80b34:	5c35      	ldrb	r5, [r6, r0]
   80b36:	4620      	mov	r0, r4
   80b38:	47c0      	blx	r8
   80b3a:	4680      	mov	r8, r0
   80b3c:	4620      	mov	r0, r4
   80b3e:	47b8      	blx	r7
   80b40:	5c33      	ldrb	r3, [r6, r0]
   80b42:	2b02      	cmp	r3, #2
   80b44:	d120      	bne.n	80b88 <xQueueGenericReceive+0xc8>
   80b46:	4b75      	ldr	r3, [pc, #468]	; (80d1c <xQueueGenericReceive+0x25c>)
   80b48:	4798      	blx	r3
   80b4a:	4b75      	ldr	r3, [pc, #468]	; (80d20 <xQueueGenericReceive+0x260>)
   80b4c:	4798      	blx	r3
   80b4e:	4602      	mov	r2, r0
   80b50:	4641      	mov	r1, r8
   80b52:	4628      	mov	r0, r5
   80b54:	4b73      	ldr	r3, [pc, #460]	; (80d24 <xQueueGenericReceive+0x264>)
   80b56:	4798      	blx	r3
					--( pxQueue->uxMessagesWaiting );
   80b58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80b5a:	3b01      	subs	r3, #1
   80b5c:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80b5e:	6823      	ldr	r3, [r4, #0]
   80b60:	b913      	cbnz	r3, 80b68 <xQueueGenericReceive+0xa8>
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   80b62:	4b71      	ldr	r3, [pc, #452]	; (80d28 <xQueueGenericReceive+0x268>)
   80b64:	4798      	blx	r3
   80b66:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80b68:	6923      	ldr	r3, [r4, #16]
   80b6a:	b13b      	cbz	r3, 80b7c <xQueueGenericReceive+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80b6c:	f104 0010 	add.w	r0, r4, #16
   80b70:	4b6e      	ldr	r3, [pc, #440]	; (80d2c <xQueueGenericReceive+0x26c>)
   80b72:	4798      	blx	r3
   80b74:	2801      	cmp	r0, #1
   80b76:	d101      	bne.n	80b7c <xQueueGenericReceive+0xbc>
							portYIELD_WITHIN_API();
   80b78:	4b6d      	ldr	r3, [pc, #436]	; (80d30 <xQueueGenericReceive+0x270>)
   80b7a:	4798      	blx	r3
				taskEXIT_CRITICAL();
   80b7c:	4b61      	ldr	r3, [pc, #388]	; (80d04 <xQueueGenericReceive+0x244>)
   80b7e:	4798      	blx	r3
				return pdPASS;
   80b80:	2001      	movs	r0, #1
}
   80b82:	b007      	add	sp, #28
   80b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					traceQUEUE_RECEIVE( pxQueue );
   80b88:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80b8a:	3a01      	subs	r2, #1
   80b8c:	b2d2      	uxtb	r2, r2
   80b8e:	e7df      	b.n	80b50 <xQueueGenericReceive+0x90>
					traceQUEUE_PEEK( pxQueue );
   80b90:	4620      	mov	r0, r4
   80b92:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80d10 <xQueueGenericReceive+0x250>
   80b96:	47c0      	blx	r8
   80b98:	4e5e      	ldr	r6, [pc, #376]	; (80d14 <xQueueGenericReceive+0x254>)
   80b9a:	5c35      	ldrb	r5, [r6, r0]
   80b9c:	3578      	adds	r5, #120	; 0x78
   80b9e:	b2ed      	uxtb	r5, r5
   80ba0:	4620      	mov	r0, r4
   80ba2:	47c0      	blx	r8
   80ba4:	5c36      	ldrb	r6, [r6, r0]
   80ba6:	4620      	mov	r0, r4
   80ba8:	4b62      	ldr	r3, [pc, #392]	; (80d34 <xQueueGenericReceive+0x274>)
   80baa:	4798      	blx	r3
   80bac:	4602      	mov	r2, r0
   80bae:	4631      	mov	r1, r6
   80bb0:	4628      	mov	r0, r5
   80bb2:	4b59      	ldr	r3, [pc, #356]	; (80d18 <xQueueGenericReceive+0x258>)
   80bb4:	4798      	blx	r3
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   80bb6:	60e7      	str	r7, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80bb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80bba:	2b00      	cmp	r3, #0
   80bbc:	d0de      	beq.n	80b7c <xQueueGenericReceive+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80bbe:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80bc2:	4b5a      	ldr	r3, [pc, #360]	; (80d2c <xQueueGenericReceive+0x26c>)
   80bc4:	4798      	blx	r3
   80bc6:	2800      	cmp	r0, #0
   80bc8:	d0d8      	beq.n	80b7c <xQueueGenericReceive+0xbc>
							portYIELD_WITHIN_API();
   80bca:	4b59      	ldr	r3, [pc, #356]	; (80d30 <xQueueGenericReceive+0x270>)
   80bcc:	4798      	blx	r3
   80bce:	e7d5      	b.n	80b7c <xQueueGenericReceive+0xbc>
					taskEXIT_CRITICAL();
   80bd0:	4b4c      	ldr	r3, [pc, #304]	; (80d04 <xQueueGenericReceive+0x244>)
   80bd2:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   80bd4:	4620      	mov	r0, r4
   80bd6:	4f4e      	ldr	r7, [pc, #312]	; (80d10 <xQueueGenericReceive+0x250>)
   80bd8:	47b8      	blx	r7
   80bda:	4e4e      	ldr	r6, [pc, #312]	; (80d14 <xQueueGenericReceive+0x254>)
   80bdc:	5c35      	ldrb	r5, [r6, r0]
   80bde:	3550      	adds	r5, #80	; 0x50
   80be0:	b2ed      	uxtb	r5, r5
   80be2:	4620      	mov	r0, r4
   80be4:	47b8      	blx	r7
   80be6:	5c36      	ldrb	r6, [r6, r0]
   80be8:	4620      	mov	r0, r4
   80bea:	4b52      	ldr	r3, [pc, #328]	; (80d34 <xQueueGenericReceive+0x274>)
   80bec:	4798      	blx	r3
   80bee:	4602      	mov	r2, r0
   80bf0:	4631      	mov	r1, r6
   80bf2:	4628      	mov	r0, r5
   80bf4:	4b48      	ldr	r3, [pc, #288]	; (80d18 <xQueueGenericReceive+0x258>)
   80bf6:	4798      	blx	r3
					return errQUEUE_EMPTY;
   80bf8:	2000      	movs	r0, #0
   80bfa:	e7c2      	b.n	80b82 <xQueueGenericReceive+0xc2>
					vTaskSetTimeOutState( &xTimeOut );
   80bfc:	a804      	add	r0, sp, #16
   80bfe:	47d0      	blx	sl
   80c00:	e015      	b.n	80c2e <xQueueGenericReceive+0x16e>
						portENTER_CRITICAL();
   80c02:	47b0      	blx	r6
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   80c04:	6860      	ldr	r0, [r4, #4]
   80c06:	4b4c      	ldr	r3, [pc, #304]	; (80d38 <xQueueGenericReceive+0x278>)
   80c08:	4798      	blx	r3
						portEXIT_CRITICAL();
   80c0a:	47a8      	blx	r5
   80c0c:	e050      	b.n	80cb0 <xQueueGenericReceive+0x1f0>
				prvUnlockQueue( pxQueue );
   80c0e:	4620      	mov	r0, r4
   80c10:	4b4a      	ldr	r3, [pc, #296]	; (80d3c <xQueueGenericReceive+0x27c>)
   80c12:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80c14:	4b4a      	ldr	r3, [pc, #296]	; (80d40 <xQueueGenericReceive+0x280>)
   80c16:	4798      	blx	r3
   80c18:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   80c1a:	47b0      	blx	r6
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   80c1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80c1e:	2b00      	cmp	r3, #0
   80c20:	f47f af6a 	bne.w	80af8 <xQueueGenericReceive+0x38>
				if( xTicksToWait == ( portTickType ) 0 )
   80c24:	9b03      	ldr	r3, [sp, #12]
   80c26:	2b00      	cmp	r3, #0
   80c28:	d0d2      	beq.n	80bd0 <xQueueGenericReceive+0x110>
				else if( xEntryTimeSet == pdFALSE )
   80c2a:	2f00      	cmp	r7, #0
   80c2c:	d0e6      	beq.n	80bfc <xQueueGenericReceive+0x13c>
		taskEXIT_CRITICAL();
   80c2e:	47a8      	blx	r5
		vTaskSuspendAll();
   80c30:	4b44      	ldr	r3, [pc, #272]	; (80d44 <xQueueGenericReceive+0x284>)
   80c32:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80c34:	47b0      	blx	r6
   80c36:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80c38:	f1b3 3fff 	cmp.w	r3, #4294967295
   80c3c:	bf04      	itt	eq
   80c3e:	2300      	moveq	r3, #0
   80c40:	6463      	streq	r3, [r4, #68]	; 0x44
   80c42:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80c44:	f1b3 3fff 	cmp.w	r3, #4294967295
   80c48:	bf04      	itt	eq
   80c4a:	2300      	moveq	r3, #0
   80c4c:	64a3      	streq	r3, [r4, #72]	; 0x48
   80c4e:	47a8      	blx	r5
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80c50:	a903      	add	r1, sp, #12
   80c52:	a804      	add	r0, sp, #16
   80c54:	4b3c      	ldr	r3, [pc, #240]	; (80d48 <xQueueGenericReceive+0x288>)
   80c56:	4798      	blx	r3
   80c58:	2800      	cmp	r0, #0
   80c5a:	d138      	bne.n	80cce <xQueueGenericReceive+0x20e>
	taskENTER_CRITICAL();
   80c5c:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   80c5e:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   80c60:	47a8      	blx	r5
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80c62:	2f00      	cmp	r7, #0
   80c64:	d1d3      	bne.n	80c0e <xQueueGenericReceive+0x14e>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   80c66:	4620      	mov	r0, r4
   80c68:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80d10 <xQueueGenericReceive+0x250>
   80c6c:	47c8      	blx	r9
   80c6e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80d14 <xQueueGenericReceive+0x254>
   80c72:	f818 7000 	ldrb.w	r7, [r8, r0]
   80c76:	3768      	adds	r7, #104	; 0x68
   80c78:	b2ff      	uxtb	r7, r7
   80c7a:	4620      	mov	r0, r4
   80c7c:	47c8      	blx	r9
   80c7e:	f818 b000 	ldrb.w	fp, [r8, r0]
   80c82:	4620      	mov	r0, r4
   80c84:	4b2b      	ldr	r3, [pc, #172]	; (80d34 <xQueueGenericReceive+0x274>)
   80c86:	4798      	blx	r3
   80c88:	4602      	mov	r2, r0
   80c8a:	4659      	mov	r1, fp
   80c8c:	4638      	mov	r0, r7
   80c8e:	4b22      	ldr	r3, [pc, #136]	; (80d18 <xQueueGenericReceive+0x258>)
   80c90:	4798      	blx	r3
   80c92:	4620      	mov	r0, r4
   80c94:	47c8      	blx	r9
   80c96:	f818 3000 	ldrb.w	r3, [r8, r0]
   80c9a:	2b02      	cmp	r3, #2
   80c9c:	d005      	beq.n	80caa <xQueueGenericReceive+0x1ea>
   80c9e:	4b1f      	ldr	r3, [pc, #124]	; (80d1c <xQueueGenericReceive+0x25c>)
   80ca0:	4798      	blx	r3
   80ca2:	4b1f      	ldr	r3, [pc, #124]	; (80d20 <xQueueGenericReceive+0x260>)
   80ca4:	4798      	blx	r3
   80ca6:	4b29      	ldr	r3, [pc, #164]	; (80d4c <xQueueGenericReceive+0x28c>)
   80ca8:	4798      	blx	r3
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80caa:	6823      	ldr	r3, [r4, #0]
   80cac:	2b00      	cmp	r3, #0
   80cae:	d0a8      	beq.n	80c02 <xQueueGenericReceive+0x142>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80cb0:	9903      	ldr	r1, [sp, #12]
   80cb2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80cb6:	4b26      	ldr	r3, [pc, #152]	; (80d50 <xQueueGenericReceive+0x290>)
   80cb8:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80cba:	4620      	mov	r0, r4
   80cbc:	4b1f      	ldr	r3, [pc, #124]	; (80d3c <xQueueGenericReceive+0x27c>)
   80cbe:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80cc0:	4b1f      	ldr	r3, [pc, #124]	; (80d40 <xQueueGenericReceive+0x280>)
   80cc2:	4798      	blx	r3
   80cc4:	2800      	cmp	r0, #0
   80cc6:	d1a7      	bne.n	80c18 <xQueueGenericReceive+0x158>
					portYIELD_WITHIN_API();
   80cc8:	4b19      	ldr	r3, [pc, #100]	; (80d30 <xQueueGenericReceive+0x270>)
   80cca:	4798      	blx	r3
   80ccc:	e7a4      	b.n	80c18 <xQueueGenericReceive+0x158>
			prvUnlockQueue( pxQueue );
   80cce:	4620      	mov	r0, r4
   80cd0:	4b1a      	ldr	r3, [pc, #104]	; (80d3c <xQueueGenericReceive+0x27c>)
   80cd2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80cd4:	4b1a      	ldr	r3, [pc, #104]	; (80d40 <xQueueGenericReceive+0x280>)
   80cd6:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
   80cd8:	4620      	mov	r0, r4
   80cda:	4f0d      	ldr	r7, [pc, #52]	; (80d10 <xQueueGenericReceive+0x250>)
   80cdc:	47b8      	blx	r7
   80cde:	4e0d      	ldr	r6, [pc, #52]	; (80d14 <xQueueGenericReceive+0x254>)
   80ce0:	5c35      	ldrb	r5, [r6, r0]
   80ce2:	3550      	adds	r5, #80	; 0x50
   80ce4:	b2ed      	uxtb	r5, r5
   80ce6:	4620      	mov	r0, r4
   80ce8:	47b8      	blx	r7
   80cea:	5c36      	ldrb	r6, [r6, r0]
   80cec:	4620      	mov	r0, r4
   80cee:	4b11      	ldr	r3, [pc, #68]	; (80d34 <xQueueGenericReceive+0x274>)
   80cf0:	4798      	blx	r3
   80cf2:	4602      	mov	r2, r0
   80cf4:	4631      	mov	r1, r6
   80cf6:	4628      	mov	r0, r5
   80cf8:	4b07      	ldr	r3, [pc, #28]	; (80d18 <xQueueGenericReceive+0x258>)
   80cfa:	4798      	blx	r3
			return errQUEUE_EMPTY;
   80cfc:	2000      	movs	r0, #0
   80cfe:	e740      	b.n	80b82 <xQueueGenericReceive+0xc2>
   80d00:	000802d1 	.word	0x000802d1
   80d04:	000802f1 	.word	0x000802f1
   80d08:	000802c1 	.word	0x000802c1
   80d0c:	00080599 	.word	0x00080599
   80d10:	000830f9 	.word	0x000830f9
   80d14:	20070140 	.word	0x20070140
   80d18:	00082b91 	.word	0x00082b91
   80d1c:	00083115 	.word	0x00083115
   80d20:	00083105 	.word	0x00083105
   80d24:	00082f1d 	.word	0x00082f1d
   80d28:	00081761 	.word	0x00081761
   80d2c:	00081605 	.word	0x00081605
   80d30:	000802b1 	.word	0x000802b1
   80d34:	000830ed 	.word	0x000830ed
   80d38:	0008178d 	.word	0x0008178d
   80d3c:	000805c1 	.word	0x000805c1
   80d40:	0008126d 	.word	0x0008126d
   80d44:	000810dd 	.word	0x000810dd
   80d48:	000816c5 	.word	0x000816c5
   80d4c:	000830ad 	.word	0x000830ad
   80d50:	00081535 	.word	0x00081535
   80d54:	0008169d 	.word	0x0008169d

00080d58 <ucQueueGetQueueNumber>:
	}
   80d58:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
   80d5c:	4770      	bx	lr

00080d5e <ucQueueGetQueueType>:
	}
   80d5e:	f890 004d 	ldrb.w	r0, [r0, #77]	; 0x4d
   80d62:	4770      	bx	lr

00080d64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   80d64:	b538      	push	{r3, r4, r5, lr}
   80d66:	4604      	mov	r4, r0
   80d68:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   80d6a:	4b0e      	ldr	r3, [pc, #56]	; (80da4 <vQueueWaitForMessageRestricted+0x40>)
   80d6c:	4798      	blx	r3
   80d6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80d70:	f1b3 3fff 	cmp.w	r3, #4294967295
   80d74:	bf04      	itt	eq
   80d76:	2300      	moveq	r3, #0
   80d78:	6463      	streq	r3, [r4, #68]	; 0x44
   80d7a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
   80d80:	bf04      	itt	eq
   80d82:	2300      	moveq	r3, #0
   80d84:	64a3      	streq	r3, [r4, #72]	; 0x48
   80d86:	4b08      	ldr	r3, [pc, #32]	; (80da8 <vQueueWaitForMessageRestricted+0x44>)
   80d88:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   80d8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80d8c:	b11b      	cbz	r3, 80d96 <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
		}
		prvUnlockQueue( pxQueue );
   80d8e:	4620      	mov	r0, r4
   80d90:	4b06      	ldr	r3, [pc, #24]	; (80dac <vQueueWaitForMessageRestricted+0x48>)
   80d92:	4798      	blx	r3
   80d94:	bd38      	pop	{r3, r4, r5, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80d96:	4629      	mov	r1, r5
   80d98:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80d9c:	4b04      	ldr	r3, [pc, #16]	; (80db0 <vQueueWaitForMessageRestricted+0x4c>)
   80d9e:	4798      	blx	r3
   80da0:	e7f5      	b.n	80d8e <vQueueWaitForMessageRestricted+0x2a>
   80da2:	bf00      	nop
   80da4:	000802d1 	.word	0x000802d1
   80da8:	000802f1 	.word	0x000802f1
   80dac:	000805c1 	.word	0x000805c1
   80db0:	00081595 	.word	0x00081595

00080db4 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   80db4:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   80db6:	4b0f      	ldr	r3, [pc, #60]	; (80df4 <prvAddCurrentTaskToDelayedList+0x40>)
   80db8:	681b      	ldr	r3, [r3, #0]
   80dba:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   80dbc:	4b0e      	ldr	r3, [pc, #56]	; (80df8 <prvAddCurrentTaskToDelayedList+0x44>)
   80dbe:	681b      	ldr	r3, [r3, #0]
   80dc0:	4298      	cmp	r0, r3
   80dc2:	d30e      	bcc.n	80de2 <prvAddCurrentTaskToDelayedList+0x2e>
   80dc4:	4604      	mov	r4, r0
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80dc6:	4b0d      	ldr	r3, [pc, #52]	; (80dfc <prvAddCurrentTaskToDelayedList+0x48>)
   80dc8:	6818      	ldr	r0, [r3, #0]
   80dca:	4b0a      	ldr	r3, [pc, #40]	; (80df4 <prvAddCurrentTaskToDelayedList+0x40>)
   80dcc:	6819      	ldr	r1, [r3, #0]
   80dce:	3104      	adds	r1, #4
   80dd0:	4b0b      	ldr	r3, [pc, #44]	; (80e00 <prvAddCurrentTaskToDelayedList+0x4c>)
   80dd2:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   80dd4:	4b0b      	ldr	r3, [pc, #44]	; (80e04 <prvAddCurrentTaskToDelayedList+0x50>)
   80dd6:	681b      	ldr	r3, [r3, #0]
   80dd8:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   80dda:	bf3c      	itt	cc
   80ddc:	4b09      	ldrcc	r3, [pc, #36]	; (80e04 <prvAddCurrentTaskToDelayedList+0x50>)
   80dde:	601c      	strcc	r4, [r3, #0]
   80de0:	bd10      	pop	{r4, pc}
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80de2:	4b09      	ldr	r3, [pc, #36]	; (80e08 <prvAddCurrentTaskToDelayedList+0x54>)
   80de4:	6818      	ldr	r0, [r3, #0]
   80de6:	4b03      	ldr	r3, [pc, #12]	; (80df4 <prvAddCurrentTaskToDelayedList+0x40>)
   80de8:	6819      	ldr	r1, [r3, #0]
   80dea:	3104      	adds	r1, #4
   80dec:	4b04      	ldr	r3, [pc, #16]	; (80e00 <prvAddCurrentTaskToDelayedList+0x4c>)
   80dee:	4798      	blx	r3
   80df0:	bd10      	pop	{r4, pc}
   80df2:	bf00      	nop
   80df4:	2007ab28 	.word	0x2007ab28
   80df8:	2007ac24 	.word	0x2007ac24
   80dfc:	2007ab2c 	.word	0x2007ab2c
   80e00:	00080201 	.word	0x00080201
   80e04:	20070134 	.word	0x20070134
   80e08:	2007ab30 	.word	0x2007ab30

00080e0c <xTaskGenericCreate>:
{
   80e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80e10:	b083      	sub	sp, #12
   80e12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   80e14:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   80e16:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
   80e1a:	9001      	str	r0, [sp, #4]
   80e1c:	b140      	cbz	r0, 80e30 <xTaskGenericCreate+0x24>
   80e1e:	4689      	mov	r9, r1
   80e20:	4616      	mov	r6, r2
   80e22:	469b      	mov	fp, r3
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   80e24:	2d04      	cmp	r5, #4
   80e26:	d907      	bls.n	80e38 <xTaskGenericCreate+0x2c>
   80e28:	4b72      	ldr	r3, [pc, #456]	; (80ff4 <xTaskGenericCreate+0x1e8>)
   80e2a:	4798      	blx	r3
   80e2c:	bf00      	nop
   80e2e:	e7fd      	b.n	80e2c <xTaskGenericCreate+0x20>
	configASSERT( pxTaskCode );
   80e30:	4b70      	ldr	r3, [pc, #448]	; (80ff4 <xTaskGenericCreate+0x1e8>)
   80e32:	4798      	blx	r3
   80e34:	bf00      	nop
   80e36:	e7fd      	b.n	80e34 <xTaskGenericCreate+0x28>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   80e38:	204c      	movs	r0, #76	; 0x4c
   80e3a:	4b6f      	ldr	r3, [pc, #444]	; (80ff8 <xTaskGenericCreate+0x1ec>)
   80e3c:	4798      	blx	r3

	if( pxNewTCB != NULL )
   80e3e:	4604      	mov	r4, r0
   80e40:	2800      	cmp	r0, #0
   80e42:	d055      	beq.n	80ef0 <xTaskGenericCreate+0xe4>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   80e44:	f1b8 0f00 	cmp.w	r8, #0
   80e48:	d048      	beq.n	80edc <xTaskGenericCreate+0xd0>
   80e4a:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   80e4e:	00b2      	lsls	r2, r6, #2
   80e50:	21a5      	movs	r1, #165	; 0xa5
   80e52:	4640      	mov	r0, r8
   80e54:	4b69      	ldr	r3, [pc, #420]	; (80ffc <xTaskGenericCreate+0x1f0>)
   80e56:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   80e58:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
   80e5c:	3e01      	subs	r6, #1
   80e5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80e60:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   80e64:	f023 0607 	bic.w	r6, r3, #7
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   80e68:	f104 0834 	add.w	r8, r4, #52	; 0x34
   80e6c:	220a      	movs	r2, #10
   80e6e:	4649      	mov	r1, r9
   80e70:	4640      	mov	r0, r8
   80e72:	4b63      	ldr	r3, [pc, #396]	; (81000 <xTaskGenericCreate+0x1f4>)
   80e74:	4798      	blx	r3
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   80e76:	2300      	movs	r3, #0
   80e78:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
   80e7c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
   80e7e:	64a5      	str	r5, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   80e80:	f104 0904 	add.w	r9, r4, #4
   80e84:	4648      	mov	r0, r9
   80e86:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8106c <xTaskGenericCreate+0x260>
   80e8a:	47d0      	blx	sl
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   80e8c:	f104 0018 	add.w	r0, r4, #24
   80e90:	47d0      	blx	sl
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   80e92:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   80e94:	f1c5 0305 	rsb	r3, r5, #5
   80e98:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   80e9a:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   80e9c:	465a      	mov	r2, fp
   80e9e:	9901      	ldr	r1, [sp, #4]
   80ea0:	4630      	mov	r0, r6
   80ea2:	4b58      	ldr	r3, [pc, #352]	; (81004 <xTaskGenericCreate+0x1f8>)
   80ea4:	4798      	blx	r3
   80ea6:	6020      	str	r0, [r4, #0]
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   80ea8:	f010 0f07 	tst.w	r0, #7
   80eac:	d128      	bne.n	80f00 <xTaskGenericCreate+0xf4>
		if( ( void * ) pxCreatedTask != NULL )
   80eae:	b107      	cbz	r7, 80eb2 <xTaskGenericCreate+0xa6>
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   80eb0:	603c      	str	r4, [r7, #0]
		taskENTER_CRITICAL();
   80eb2:	4b55      	ldr	r3, [pc, #340]	; (81008 <xTaskGenericCreate+0x1fc>)
   80eb4:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
   80eb6:	4a55      	ldr	r2, [pc, #340]	; (8100c <xTaskGenericCreate+0x200>)
   80eb8:	6813      	ldr	r3, [r2, #0]
   80eba:	3301      	adds	r3, #1
   80ebc:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
   80ebe:	4b54      	ldr	r3, [pc, #336]	; (81010 <xTaskGenericCreate+0x204>)
   80ec0:	681b      	ldr	r3, [r3, #0]
   80ec2:	b30b      	cbz	r3, 80f08 <xTaskGenericCreate+0xfc>
				if( xSchedulerRunning == pdFALSE )
   80ec4:	4b53      	ldr	r3, [pc, #332]	; (81014 <xTaskGenericCreate+0x208>)
   80ec6:	681b      	ldr	r3, [r3, #0]
   80ec8:	2b00      	cmp	r3, #0
   80eca:	d144      	bne.n	80f56 <xTaskGenericCreate+0x14a>
					if( pxCurrentTCB->uxPriority <= uxPriority )
   80ecc:	4b50      	ldr	r3, [pc, #320]	; (81010 <xTaskGenericCreate+0x204>)
   80ece:	681b      	ldr	r3, [r3, #0]
   80ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   80ed2:	429d      	cmp	r5, r3
						pxCurrentTCB = pxNewTCB;
   80ed4:	bf24      	itt	cs
   80ed6:	4b4e      	ldrcs	r3, [pc, #312]	; (81010 <xTaskGenericCreate+0x204>)
   80ed8:	601c      	strcs	r4, [r3, #0]
   80eda:	e03c      	b.n	80f56 <xTaskGenericCreate+0x14a>
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   80edc:	00b0      	lsls	r0, r6, #2
   80ede:	4b46      	ldr	r3, [pc, #280]	; (80ff8 <xTaskGenericCreate+0x1ec>)
   80ee0:	4798      	blx	r3
   80ee2:	4680      	mov	r8, r0
   80ee4:	6320      	str	r0, [r4, #48]	; 0x30
		if( pxNewTCB->pxStack == NULL )
   80ee6:	2800      	cmp	r0, #0
   80ee8:	d1b1      	bne.n	80e4e <xTaskGenericCreate+0x42>
			vPortFree( pxNewTCB );
   80eea:	4620      	mov	r0, r4
   80eec:	4b4a      	ldr	r3, [pc, #296]	; (81018 <xTaskGenericCreate+0x20c>)
   80eee:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
   80ef0:	2200      	movs	r2, #0
   80ef2:	2103      	movs	r1, #3
   80ef4:	2043      	movs	r0, #67	; 0x43
   80ef6:	4b49      	ldr	r3, [pc, #292]	; (8101c <xTaskGenericCreate+0x210>)
   80ef8:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   80efa:	f04f 30ff 	mov.w	r0, #4294967295
   80efe:	e072      	b.n	80fe6 <xTaskGenericCreate+0x1da>
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   80f00:	4b3c      	ldr	r3, [pc, #240]	; (80ff4 <xTaskGenericCreate+0x1e8>)
   80f02:	4798      	blx	r3
   80f04:	bf00      	nop
   80f06:	e7fd      	b.n	80f04 <xTaskGenericCreate+0xf8>
				pxCurrentTCB =  pxNewTCB;
   80f08:	4b41      	ldr	r3, [pc, #260]	; (81010 <xTaskGenericCreate+0x204>)
   80f0a:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   80f0c:	6813      	ldr	r3, [r2, #0]
   80f0e:	2b01      	cmp	r3, #1
   80f10:	d121      	bne.n	80f56 <xTaskGenericCreate+0x14a>
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   80f12:	4f43      	ldr	r7, [pc, #268]	; (81020 <xTaskGenericCreate+0x214>)
   80f14:	4638      	mov	r0, r7
   80f16:	4e43      	ldr	r6, [pc, #268]	; (81024 <xTaskGenericCreate+0x218>)
   80f18:	47b0      	blx	r6
   80f1a:	f107 0014 	add.w	r0, r7, #20
   80f1e:	47b0      	blx	r6
   80f20:	f107 0028 	add.w	r0, r7, #40	; 0x28
   80f24:	47b0      	blx	r6
   80f26:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   80f2a:	47b0      	blx	r6
   80f2c:	f107 0050 	add.w	r0, r7, #80	; 0x50
   80f30:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   80f32:	f8df a13c 	ldr.w	sl, [pc, #316]	; 81070 <xTaskGenericCreate+0x264>
   80f36:	4650      	mov	r0, sl
   80f38:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   80f3a:	4f3b      	ldr	r7, [pc, #236]	; (81028 <xTaskGenericCreate+0x21c>)
   80f3c:	4638      	mov	r0, r7
   80f3e:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   80f40:	483a      	ldr	r0, [pc, #232]	; (8102c <xTaskGenericCreate+0x220>)
   80f42:	47b0      	blx	r6
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   80f44:	483a      	ldr	r0, [pc, #232]	; (81030 <xTaskGenericCreate+0x224>)
   80f46:	47b0      	blx	r6
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   80f48:	483a      	ldr	r0, [pc, #232]	; (81034 <xTaskGenericCreate+0x228>)
   80f4a:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
   80f4c:	4b3a      	ldr	r3, [pc, #232]	; (81038 <xTaskGenericCreate+0x22c>)
   80f4e:	f8c3 a000 	str.w	sl, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   80f52:	4b3a      	ldr	r3, [pc, #232]	; (8103c <xTaskGenericCreate+0x230>)
   80f54:	601f      	str	r7, [r3, #0]
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   80f56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   80f58:	4a39      	ldr	r2, [pc, #228]	; (81040 <xTaskGenericCreate+0x234>)
   80f5a:	6812      	ldr	r2, [r2, #0]
   80f5c:	4293      	cmp	r3, r2
				uxTopUsedPriority = pxNewTCB->uxPriority;
   80f5e:	bf84      	itt	hi
   80f60:	4a37      	ldrhi	r2, [pc, #220]	; (81040 <xTaskGenericCreate+0x234>)
   80f62:	6013      	strhi	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   80f64:	4a37      	ldr	r2, [pc, #220]	; (81044 <xTaskGenericCreate+0x238>)
   80f66:	6813      	ldr	r3, [r2, #0]
   80f68:	6423      	str	r3, [r4, #64]	; 0x40
			uxTaskNumber++;
   80f6a:	3301      	adds	r3, #1
   80f6c:	6013      	str	r3, [r2, #0]
			prvAddTaskToReadyQueue( pxNewTCB );
   80f6e:	4620      	mov	r0, r4
   80f70:	4b35      	ldr	r3, [pc, #212]	; (81048 <xTaskGenericCreate+0x23c>)
   80f72:	4798      	blx	r3
   80f74:	4b35      	ldr	r3, [pc, #212]	; (8104c <xTaskGenericCreate+0x240>)
   80f76:	4798      	blx	r3
   80f78:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80f7a:	4b35      	ldr	r3, [pc, #212]	; (81050 <xTaskGenericCreate+0x244>)
   80f7c:	681b      	ldr	r3, [r3, #0]
   80f7e:	4298      	cmp	r0, r3
   80f80:	bf84      	itt	hi
   80f82:	4b33      	ldrhi	r3, [pc, #204]	; (81050 <xTaskGenericCreate+0x244>)
   80f84:	6018      	strhi	r0, [r3, #0]
   80f86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80f8a:	4649      	mov	r1, r9
   80f8c:	4b24      	ldr	r3, [pc, #144]	; (81020 <xTaskGenericCreate+0x214>)
   80f8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   80f92:	4b30      	ldr	r3, [pc, #192]	; (81054 <xTaskGenericCreate+0x248>)
   80f94:	4798      	blx	r3
			traceTASK_CREATE( pxNewTCB );
   80f96:	2003      	movs	r0, #3
   80f98:	4b2f      	ldr	r3, [pc, #188]	; (81058 <xTaskGenericCreate+0x24c>)
   80f9a:	4798      	blx	r3
   80f9c:	6460      	str	r0, [r4, #68]	; 0x44
   80f9e:	4620      	mov	r0, r4
   80fa0:	4e29      	ldr	r6, [pc, #164]	; (81048 <xTaskGenericCreate+0x23c>)
   80fa2:	47b0      	blx	r6
   80fa4:	4642      	mov	r2, r8
   80fa6:	4601      	mov	r1, r0
   80fa8:	2003      	movs	r0, #3
   80faa:	4b2c      	ldr	r3, [pc, #176]	; (8105c <xTaskGenericCreate+0x250>)
   80fac:	4798      	blx	r3
   80fae:	4620      	mov	r0, r4
   80fb0:	47b0      	blx	r6
   80fb2:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   80fb6:	4601      	mov	r1, r0
   80fb8:	2003      	movs	r0, #3
   80fba:	4b29      	ldr	r3, [pc, #164]	; (81060 <xTaskGenericCreate+0x254>)
   80fbc:	4798      	blx	r3
   80fbe:	4620      	mov	r0, r4
   80fc0:	47b0      	blx	r6
   80fc2:	4602      	mov	r2, r0
   80fc4:	2103      	movs	r1, #3
   80fc6:	201b      	movs	r0, #27
   80fc8:	4b14      	ldr	r3, [pc, #80]	; (8101c <xTaskGenericCreate+0x210>)
   80fca:	4798      	blx	r3
		taskEXIT_CRITICAL();
   80fcc:	4b25      	ldr	r3, [pc, #148]	; (81064 <xTaskGenericCreate+0x258>)
   80fce:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
   80fd0:	4b10      	ldr	r3, [pc, #64]	; (81014 <xTaskGenericCreate+0x208>)
   80fd2:	681b      	ldr	r3, [r3, #0]
   80fd4:	b153      	cbz	r3, 80fec <xTaskGenericCreate+0x1e0>
			if( pxCurrentTCB->uxPriority < uxPriority )
   80fd6:	4b0e      	ldr	r3, [pc, #56]	; (81010 <xTaskGenericCreate+0x204>)
   80fd8:	681b      	ldr	r3, [r3, #0]
   80fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   80fdc:	429d      	cmp	r5, r3
   80fde:	d907      	bls.n	80ff0 <xTaskGenericCreate+0x1e4>
				portYIELD_WITHIN_API();
   80fe0:	4b21      	ldr	r3, [pc, #132]	; (81068 <xTaskGenericCreate+0x25c>)
   80fe2:	4798      	blx	r3
			xReturn = pdPASS;
   80fe4:	2001      	movs	r0, #1
}
   80fe6:	b003      	add	sp, #12
   80fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
   80fec:	2001      	movs	r0, #1
   80fee:	e7fa      	b.n	80fe6 <xTaskGenericCreate+0x1da>
   80ff0:	2001      	movs	r0, #1
	return xReturn;
   80ff2:	e7f8      	b.n	80fe6 <xTaskGenericCreate+0x1da>
   80ff4:	000802c1 	.word	0x000802c1
   80ff8:	00080421 	.word	0x00080421
   80ffc:	000837b1 	.word	0x000837b1
   81000:	00083a05 	.word	0x00083a05
   81004:	00080275 	.word	0x00080275
   81008:	000802d1 	.word	0x000802d1
   8100c:	2007ab98 	.word	0x2007ab98
   81010:	2007ab28 	.word	0x2007ab28
   81014:	2007abf8 	.word	0x2007abf8
   81018:	000804f9 	.word	0x000804f9
   8101c:	00082b91 	.word	0x00082b91
   81020:	2007ab34 	.word	0x2007ab34
   81024:	000801c9 	.word	0x000801c9
   81028:	2007abc8 	.word	0x2007abc8
   8102c:	2007abe4 	.word	0x2007abe4
   81030:	2007ac10 	.word	0x2007ac10
   81034:	2007abfc 	.word	0x2007abfc
   81038:	2007ab2c 	.word	0x2007ab2c
   8103c:	2007ab30 	.word	0x2007ab30
   81040:	2007abb0 	.word	0x2007abb0
   81044:	2007aba4 	.word	0x2007aba4
   81048:	00083105 	.word	0x00083105
   8104c:	00082add 	.word	0x00082add
   81050:	2007abac 	.word	0x2007abac
   81054:	000801e5 	.word	0x000801e5
   81058:	0008263d 	.word	0x0008263d
   8105c:	00082771 	.word	0x00082771
   81060:	00082e69 	.word	0x00082e69
   81064:	000802f1 	.word	0x000802f1
   81068:	000802b1 	.word	0x000802b1
   8106c:	000801df 	.word	0x000801df
   81070:	2007abb4 	.word	0x2007abb4

00081074 <vTaskStartScheduler>:
{
   81074:	b510      	push	{r4, lr}
   81076:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   81078:	2300      	movs	r3, #0
   8107a:	9303      	str	r3, [sp, #12]
   8107c:	9302      	str	r3, [sp, #8]
   8107e:	9301      	str	r3, [sp, #4]
   81080:	9300      	str	r3, [sp, #0]
   81082:	2282      	movs	r2, #130	; 0x82
   81084:	490d      	ldr	r1, [pc, #52]	; (810bc <vTaskStartScheduler+0x48>)
   81086:	480e      	ldr	r0, [pc, #56]	; (810c0 <vTaskStartScheduler+0x4c>)
   81088:	4c0e      	ldr	r4, [pc, #56]	; (810c4 <vTaskStartScheduler+0x50>)
   8108a:	47a0      	blx	r4
		if( xReturn == pdPASS )
   8108c:	2801      	cmp	r0, #1
   8108e:	d002      	beq.n	81096 <vTaskStartScheduler+0x22>
	configASSERT( xReturn );
   81090:	b180      	cbz	r0, 810b4 <vTaskStartScheduler+0x40>
}
   81092:	b004      	add	sp, #16
   81094:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
   81096:	4b0c      	ldr	r3, [pc, #48]	; (810c8 <vTaskStartScheduler+0x54>)
   81098:	4798      	blx	r3
	if( xReturn == pdPASS )
   8109a:	2801      	cmp	r0, #1
   8109c:	d1f8      	bne.n	81090 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
   8109e:	4b0b      	ldr	r3, [pc, #44]	; (810cc <vTaskStartScheduler+0x58>)
   810a0:	4798      	blx	r3
		xSchedulerRunning = pdTRUE;
   810a2:	2201      	movs	r2, #1
   810a4:	4b0a      	ldr	r3, [pc, #40]	; (810d0 <vTaskStartScheduler+0x5c>)
   810a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   810a8:	2200      	movs	r2, #0
   810aa:	4b0a      	ldr	r3, [pc, #40]	; (810d4 <vTaskStartScheduler+0x60>)
   810ac:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
   810ae:	4b0a      	ldr	r3, [pc, #40]	; (810d8 <vTaskStartScheduler+0x64>)
   810b0:	4798      	blx	r3
   810b2:	e7ee      	b.n	81092 <vTaskStartScheduler+0x1e>
	configASSERT( xReturn );
   810b4:	4b05      	ldr	r3, [pc, #20]	; (810cc <vTaskStartScheduler+0x58>)
   810b6:	4798      	blx	r3
   810b8:	bf00      	nop
   810ba:	e7fd      	b.n	810b8 <vTaskStartScheduler+0x44>
   810bc:	00086384 	.word	0x00086384
   810c0:	000813f5 	.word	0x000813f5
   810c4:	00080e0d 	.word	0x00080e0d
   810c8:	000819a9 	.word	0x000819a9
   810cc:	000802c1 	.word	0x000802c1
   810d0:	2007abf8 	.word	0x2007abf8
   810d4:	2007ac24 	.word	0x2007ac24
   810d8:	00080391 	.word	0x00080391

000810dc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
   810dc:	4a02      	ldr	r2, [pc, #8]	; (810e8 <vTaskSuspendAll+0xc>)
   810de:	6813      	ldr	r3, [r2, #0]
   810e0:	3301      	adds	r3, #1
   810e2:	6013      	str	r3, [r2, #0]
   810e4:	4770      	bx	lr
   810e6:	bf00      	nop
   810e8:	2007aba0 	.word	0x2007aba0

000810ec <xTaskGetTickCount>:
{
   810ec:	b510      	push	{r4, lr}
	taskENTER_CRITICAL();
   810ee:	4b04      	ldr	r3, [pc, #16]	; (81100 <xTaskGetTickCount+0x14>)
   810f0:	4798      	blx	r3
		xTicks = xTickCount;
   810f2:	4b04      	ldr	r3, [pc, #16]	; (81104 <xTaskGetTickCount+0x18>)
   810f4:	681c      	ldr	r4, [r3, #0]
	taskEXIT_CRITICAL();
   810f6:	4b04      	ldr	r3, [pc, #16]	; (81108 <xTaskGetTickCount+0x1c>)
   810f8:	4798      	blx	r3
}
   810fa:	4620      	mov	r0, r4
   810fc:	bd10      	pop	{r4, pc}
   810fe:	bf00      	nop
   81100:	000802d1 	.word	0x000802d1
   81104:	2007ac24 	.word	0x2007ac24
   81108:	000802f1 	.word	0x000802f1

0008110c <vTaskIncrementTick>:
{
   8110c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	traceTASK_INCREMENT_TICK( xTickCount );
   81110:	4b46      	ldr	r3, [pc, #280]	; (8122c <vTaskIncrementTick+0x120>)
   81112:	681b      	ldr	r3, [r3, #0]
   81114:	2b01      	cmp	r3, #1
   81116:	d002      	beq.n	8111e <vTaskIncrementTick+0x12>
   81118:	4b45      	ldr	r3, [pc, #276]	; (81230 <vTaskIncrementTick+0x124>)
   8111a:	681b      	ldr	r3, [r3, #0]
   8111c:	b933      	cbnz	r3, 8112c <vTaskIncrementTick+0x20>
   8111e:	4a45      	ldr	r2, [pc, #276]	; (81234 <vTaskIncrementTick+0x128>)
   81120:	6813      	ldr	r3, [r2, #0]
   81122:	3301      	adds	r3, #1
   81124:	6013      	str	r3, [r2, #0]
   81126:	2000      	movs	r0, #0
   81128:	4b43      	ldr	r3, [pc, #268]	; (81238 <vTaskIncrementTick+0x12c>)
   8112a:	4798      	blx	r3
   8112c:	4b3f      	ldr	r3, [pc, #252]	; (8122c <vTaskIncrementTick+0x120>)
   8112e:	681a      	ldr	r2, [r3, #0]
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81130:	681b      	ldr	r3, [r3, #0]
   81132:	2b00      	cmp	r3, #0
   81134:	d173      	bne.n	8121e <vTaskIncrementTick+0x112>
		++xTickCount;
   81136:	4b41      	ldr	r3, [pc, #260]	; (8123c <vTaskIncrementTick+0x130>)
   81138:	681a      	ldr	r2, [r3, #0]
   8113a:	3201      	adds	r2, #1
   8113c:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   8113e:	681b      	ldr	r3, [r3, #0]
   81140:	b9ab      	cbnz	r3, 8116e <vTaskIncrementTick+0x62>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   81142:	4b3f      	ldr	r3, [pc, #252]	; (81240 <vTaskIncrementTick+0x134>)
   81144:	681b      	ldr	r3, [r3, #0]
   81146:	681b      	ldr	r3, [r3, #0]
   81148:	2b00      	cmp	r3, #0
   8114a:	d128      	bne.n	8119e <vTaskIncrementTick+0x92>
			pxTemp = pxDelayedTaskList;
   8114c:	4b3c      	ldr	r3, [pc, #240]	; (81240 <vTaskIncrementTick+0x134>)
   8114e:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   81150:	4a3c      	ldr	r2, [pc, #240]	; (81244 <vTaskIncrementTick+0x138>)
   81152:	6810      	ldr	r0, [r2, #0]
   81154:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   81156:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   81158:	493b      	ldr	r1, [pc, #236]	; (81248 <vTaskIncrementTick+0x13c>)
   8115a:	680a      	ldr	r2, [r1, #0]
   8115c:	3201      	adds	r2, #1
   8115e:	600a      	str	r2, [r1, #0]
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81160:	681b      	ldr	r3, [r3, #0]
   81162:	681b      	ldr	r3, [r3, #0]
   81164:	b9fb      	cbnz	r3, 811a6 <vTaskIncrementTick+0x9a>
				xNextTaskUnblockTime = portMAX_DELAY;
   81166:	f04f 32ff 	mov.w	r2, #4294967295
   8116a:	4b38      	ldr	r3, [pc, #224]	; (8124c <vTaskIncrementTick+0x140>)
   8116c:	601a      	str	r2, [r3, #0]
		prvCheckDelayedTasks();
   8116e:	4b33      	ldr	r3, [pc, #204]	; (8123c <vTaskIncrementTick+0x130>)
   81170:	681a      	ldr	r2, [r3, #0]
   81172:	4b36      	ldr	r3, [pc, #216]	; (8124c <vTaskIncrementTick+0x140>)
   81174:	681b      	ldr	r3, [r3, #0]
   81176:	429a      	cmp	r2, r3
   81178:	d355      	bcc.n	81226 <vTaskIncrementTick+0x11a>
   8117a:	4b31      	ldr	r3, [pc, #196]	; (81240 <vTaskIncrementTick+0x134>)
   8117c:	681b      	ldr	r3, [r3, #0]
   8117e:	681b      	ldr	r3, [r3, #0]
   81180:	b1cb      	cbz	r3, 811b6 <vTaskIncrementTick+0xaa>
   81182:	4b2f      	ldr	r3, [pc, #188]	; (81240 <vTaskIncrementTick+0x134>)
   81184:	681b      	ldr	r3, [r3, #0]
   81186:	68db      	ldr	r3, [r3, #12]
   81188:	68dc      	ldr	r4, [r3, #12]
   8118a:	6863      	ldr	r3, [r4, #4]
   8118c:	4a2b      	ldr	r2, [pc, #172]	; (8123c <vTaskIncrementTick+0x130>)
   8118e:	6812      	ldr	r2, [r2, #0]
   81190:	4293      	cmp	r3, r2
   81192:	d816      	bhi.n	811c2 <vTaskIncrementTick+0xb6>
   81194:	4e2e      	ldr	r6, [pc, #184]	; (81250 <vTaskIncrementTick+0x144>)
   81196:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 81268 <vTaskIncrementTick+0x15c>
   8119a:	4f2e      	ldr	r7, [pc, #184]	; (81254 <vTaskIncrementTick+0x148>)
   8119c:	e035      	b.n	8120a <vTaskIncrementTick+0xfe>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   8119e:	4b2e      	ldr	r3, [pc, #184]	; (81258 <vTaskIncrementTick+0x14c>)
   811a0:	4798      	blx	r3
   811a2:	bf00      	nop
   811a4:	e7fd      	b.n	811a2 <vTaskIncrementTick+0x96>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   811a6:	4b26      	ldr	r3, [pc, #152]	; (81240 <vTaskIncrementTick+0x134>)
   811a8:	681b      	ldr	r3, [r3, #0]
   811aa:	68db      	ldr	r3, [r3, #12]
   811ac:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   811ae:	685a      	ldr	r2, [r3, #4]
   811b0:	4b26      	ldr	r3, [pc, #152]	; (8124c <vTaskIncrementTick+0x140>)
   811b2:	601a      	str	r2, [r3, #0]
   811b4:	e7db      	b.n	8116e <vTaskIncrementTick+0x62>
		prvCheckDelayedTasks();
   811b6:	f04f 32ff 	mov.w	r2, #4294967295
   811ba:	4b24      	ldr	r3, [pc, #144]	; (8124c <vTaskIncrementTick+0x140>)
   811bc:	601a      	str	r2, [r3, #0]
   811be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   811c2:	4a22      	ldr	r2, [pc, #136]	; (8124c <vTaskIncrementTick+0x140>)
   811c4:	6013      	str	r3, [r2, #0]
   811c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   811ca:	4620      	mov	r0, r4
   811cc:	47c0      	blx	r8
   811ce:	47b8      	blx	r7
   811d0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   811d2:	4b22      	ldr	r3, [pc, #136]	; (8125c <vTaskIncrementTick+0x150>)
   811d4:	681b      	ldr	r3, [r3, #0]
   811d6:	4298      	cmp	r0, r3
   811d8:	bf84      	itt	hi
   811da:	4b20      	ldrhi	r3, [pc, #128]	; (8125c <vTaskIncrementTick+0x150>)
   811dc:	6018      	strhi	r0, [r3, #0]
   811de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   811e2:	4629      	mov	r1, r5
   811e4:	4b1e      	ldr	r3, [pc, #120]	; (81260 <vTaskIncrementTick+0x154>)
   811e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   811ea:	4b1e      	ldr	r3, [pc, #120]	; (81264 <vTaskIncrementTick+0x158>)
   811ec:	4798      	blx	r3
   811ee:	4b14      	ldr	r3, [pc, #80]	; (81240 <vTaskIncrementTick+0x134>)
   811f0:	681b      	ldr	r3, [r3, #0]
   811f2:	681b      	ldr	r3, [r3, #0]
   811f4:	2b00      	cmp	r3, #0
   811f6:	d0de      	beq.n	811b6 <vTaskIncrementTick+0xaa>
   811f8:	4b11      	ldr	r3, [pc, #68]	; (81240 <vTaskIncrementTick+0x134>)
   811fa:	681b      	ldr	r3, [r3, #0]
   811fc:	68db      	ldr	r3, [r3, #12]
   811fe:	68dc      	ldr	r4, [r3, #12]
   81200:	6863      	ldr	r3, [r4, #4]
   81202:	4a0e      	ldr	r2, [pc, #56]	; (8123c <vTaskIncrementTick+0x130>)
   81204:	6812      	ldr	r2, [r2, #0]
   81206:	4293      	cmp	r3, r2
   81208:	d8db      	bhi.n	811c2 <vTaskIncrementTick+0xb6>
   8120a:	1d25      	adds	r5, r4, #4
   8120c:	4628      	mov	r0, r5
   8120e:	47b0      	blx	r6
   81210:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   81212:	2b00      	cmp	r3, #0
   81214:	d0d9      	beq.n	811ca <vTaskIncrementTick+0xbe>
   81216:	f104 0018 	add.w	r0, r4, #24
   8121a:	47b0      	blx	r6
   8121c:	e7d5      	b.n	811ca <vTaskIncrementTick+0xbe>
		++uxMissedTicks;
   8121e:	4a04      	ldr	r2, [pc, #16]	; (81230 <vTaskIncrementTick+0x124>)
   81220:	6813      	ldr	r3, [r2, #0]
   81222:	3301      	adds	r3, #1
   81224:	6013      	str	r3, [r2, #0]
   81226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8122a:	bf00      	nop
   8122c:	2007aba0 	.word	0x2007aba0
   81230:	2007ab9c 	.word	0x2007ab9c
   81234:	2007ad98 	.word	0x2007ad98
   81238:	00082a2d 	.word	0x00082a2d
   8123c:	2007ac24 	.word	0x2007ac24
   81240:	2007ab2c 	.word	0x2007ab2c
   81244:	2007ab30 	.word	0x2007ab30
   81248:	2007abe0 	.word	0x2007abe0
   8124c:	20070134 	.word	0x20070134
   81250:	0008023b 	.word	0x0008023b
   81254:	00082add 	.word	0x00082add
   81258:	000802c1 	.word	0x000802c1
   8125c:	2007abac 	.word	0x2007abac
   81260:	2007ab34 	.word	0x2007ab34
   81264:	000801e5 	.word	0x000801e5
   81268:	00083105 	.word	0x00083105

0008126c <xTaskResumeAll>:
{
   8126c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
   81270:	4b31      	ldr	r3, [pc, #196]	; (81338 <xTaskResumeAll+0xcc>)
   81272:	681b      	ldr	r3, [r3, #0]
   81274:	b91b      	cbnz	r3, 8127e <xTaskResumeAll+0x12>
   81276:	4b31      	ldr	r3, [pc, #196]	; (8133c <xTaskResumeAll+0xd0>)
   81278:	4798      	blx	r3
   8127a:	bf00      	nop
   8127c:	e7fd      	b.n	8127a <xTaskResumeAll+0xe>
	taskENTER_CRITICAL();
   8127e:	4b30      	ldr	r3, [pc, #192]	; (81340 <xTaskResumeAll+0xd4>)
   81280:	4798      	blx	r3
		--uxSchedulerSuspended;
   81282:	4b2d      	ldr	r3, [pc, #180]	; (81338 <xTaskResumeAll+0xcc>)
   81284:	681a      	ldr	r2, [r3, #0]
   81286:	3a01      	subs	r2, #1
   81288:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8128a:	681b      	ldr	r3, [r3, #0]
   8128c:	2b00      	cmp	r3, #0
   8128e:	d151      	bne.n	81334 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   81290:	4b2c      	ldr	r3, [pc, #176]	; (81344 <xTaskResumeAll+0xd8>)
   81292:	681b      	ldr	r3, [r3, #0]
   81294:	b12b      	cbz	r3, 812a2 <xTaskResumeAll+0x36>
   81296:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81298:	4f2b      	ldr	r7, [pc, #172]	; (81348 <xTaskResumeAll+0xdc>)
					uxListRemove( &( pxTCB->xEventListItem ) );
   8129a:	4e2c      	ldr	r6, [pc, #176]	; (8134c <xTaskResumeAll+0xe0>)
					prvAddTaskToReadyQueue( pxTCB );
   8129c:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 81378 <xTaskResumeAll+0x10c>
   812a0:	e028      	b.n	812f4 <xTaskResumeAll+0x88>
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   812a2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
   812a4:	4b2a      	ldr	r3, [pc, #168]	; (81350 <xTaskResumeAll+0xe4>)
   812a6:	4798      	blx	r3
}
   812a8:	4620      	mov	r0, r4
   812aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   812ae:	68fb      	ldr	r3, [r7, #12]
   812b0:	68dd      	ldr	r5, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   812b2:	f105 0018 	add.w	r0, r5, #24
   812b6:	47b0      	blx	r6
					uxListRemove( &( pxTCB->xGenericListItem ) );
   812b8:	f105 0804 	add.w	r8, r5, #4
   812bc:	4640      	mov	r0, r8
   812be:	47b0      	blx	r6
					prvAddTaskToReadyQueue( pxTCB );
   812c0:	4628      	mov	r0, r5
   812c2:	47c8      	blx	r9
   812c4:	4b23      	ldr	r3, [pc, #140]	; (81354 <xTaskResumeAll+0xe8>)
   812c6:	4798      	blx	r3
   812c8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   812ca:	4b23      	ldr	r3, [pc, #140]	; (81358 <xTaskResumeAll+0xec>)
   812cc:	681b      	ldr	r3, [r3, #0]
   812ce:	4298      	cmp	r0, r3
   812d0:	bf84      	itt	hi
   812d2:	4b21      	ldrhi	r3, [pc, #132]	; (81358 <xTaskResumeAll+0xec>)
   812d4:	6018      	strhi	r0, [r3, #0]
   812d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   812da:	4641      	mov	r1, r8
   812dc:	4b1f      	ldr	r3, [pc, #124]	; (8135c <xTaskResumeAll+0xf0>)
   812de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   812e2:	4b1f      	ldr	r3, [pc, #124]	; (81360 <xTaskResumeAll+0xf4>)
   812e4:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   812e6:	4b1f      	ldr	r3, [pc, #124]	; (81364 <xTaskResumeAll+0xf8>)
   812e8:	681b      	ldr	r3, [r3, #0]
   812ea:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   812ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						xYieldRequired = pdTRUE;
   812ee:	429a      	cmp	r2, r3
   812f0:	bf28      	it	cs
   812f2:	2401      	movcs	r4, #1
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   812f4:	683b      	ldr	r3, [r7, #0]
   812f6:	2b00      	cmp	r3, #0
   812f8:	d1d9      	bne.n	812ae <xTaskResumeAll+0x42>
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   812fa:	4b1b      	ldr	r3, [pc, #108]	; (81368 <xTaskResumeAll+0xfc>)
   812fc:	681b      	ldr	r3, [r3, #0]
   812fe:	b193      	cbz	r3, 81326 <xTaskResumeAll+0xba>
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81300:	4b19      	ldr	r3, [pc, #100]	; (81368 <xTaskResumeAll+0xfc>)
   81302:	681b      	ldr	r3, [r3, #0]
   81304:	b143      	cbz	r3, 81318 <xTaskResumeAll+0xac>
						vTaskIncrementTick();
   81306:	4d19      	ldr	r5, [pc, #100]	; (8136c <xTaskResumeAll+0x100>)
						--uxMissedTicks;
   81308:	4c17      	ldr	r4, [pc, #92]	; (81368 <xTaskResumeAll+0xfc>)
						vTaskIncrementTick();
   8130a:	47a8      	blx	r5
						--uxMissedTicks;
   8130c:	6823      	ldr	r3, [r4, #0]
   8130e:	3b01      	subs	r3, #1
   81310:	6023      	str	r3, [r4, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81312:	6823      	ldr	r3, [r4, #0]
   81314:	2b00      	cmp	r3, #0
   81316:	d1f8      	bne.n	8130a <xTaskResumeAll+0x9e>
					xMissedYield = pdFALSE;
   81318:	2200      	movs	r2, #0
   8131a:	4b15      	ldr	r3, [pc, #84]	; (81370 <xTaskResumeAll+0x104>)
   8131c:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   8131e:	4b15      	ldr	r3, [pc, #84]	; (81374 <xTaskResumeAll+0x108>)
   81320:	4798      	blx	r3
					xAlreadyYielded = pdTRUE;
   81322:	2401      	movs	r4, #1
   81324:	e7be      	b.n	812a4 <xTaskResumeAll+0x38>
				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   81326:	2c01      	cmp	r4, #1
   81328:	d0f6      	beq.n	81318 <xTaskResumeAll+0xac>
   8132a:	4b11      	ldr	r3, [pc, #68]	; (81370 <xTaskResumeAll+0x104>)
   8132c:	681b      	ldr	r3, [r3, #0]
   8132e:	2b01      	cmp	r3, #1
   81330:	d1b8      	bne.n	812a4 <xTaskResumeAll+0x38>
   81332:	e7f1      	b.n	81318 <xTaskResumeAll+0xac>
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   81334:	2400      	movs	r4, #0
   81336:	e7b5      	b.n	812a4 <xTaskResumeAll+0x38>
   81338:	2007aba0 	.word	0x2007aba0
   8133c:	000802c1 	.word	0x000802c1
   81340:	000802d1 	.word	0x000802d1
   81344:	2007ab98 	.word	0x2007ab98
   81348:	2007abe4 	.word	0x2007abe4
   8134c:	0008023b 	.word	0x0008023b
   81350:	000802f1 	.word	0x000802f1
   81354:	00082add 	.word	0x00082add
   81358:	2007abac 	.word	0x2007abac
   8135c:	2007ab34 	.word	0x2007ab34
   81360:	000801e5 	.word	0x000801e5
   81364:	2007ab28 	.word	0x2007ab28
   81368:	2007ab9c 	.word	0x2007ab9c
   8136c:	0008110d 	.word	0x0008110d
   81370:	2007abdc 	.word	0x2007abdc
   81374:	000802b1 	.word	0x000802b1
   81378:	00083105 	.word	0x00083105

0008137c <vTaskDelay>:
	{
   8137c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( portTickType ) 0U )
   8137e:	b910      	cbnz	r0, 81386 <vTaskDelay+0xa>
			portYIELD_WITHIN_API();
   81380:	4b11      	ldr	r3, [pc, #68]	; (813c8 <vTaskDelay+0x4c>)
   81382:	4798      	blx	r3
   81384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81386:	4604      	mov	r4, r0
			vTaskSuspendAll();
   81388:	4b10      	ldr	r3, [pc, #64]	; (813cc <vTaskDelay+0x50>)
   8138a:	4798      	blx	r3
				traceTASK_DELAY();
   8138c:	4621      	mov	r1, r4
   8138e:	2089      	movs	r0, #137	; 0x89
   81390:	4b0f      	ldr	r3, [pc, #60]	; (813d0 <vTaskDelay+0x54>)
   81392:	4798      	blx	r3
   81394:	4d0f      	ldr	r5, [pc, #60]	; (813d4 <vTaskDelay+0x58>)
   81396:	6828      	ldr	r0, [r5, #0]
   81398:	4f0f      	ldr	r7, [pc, #60]	; (813d8 <vTaskDelay+0x5c>)
   8139a:	47b8      	blx	r7
   8139c:	4e0f      	ldr	r6, [pc, #60]	; (813dc <vTaskDelay+0x60>)
   8139e:	47b0      	blx	r6
   813a0:	4b0f      	ldr	r3, [pc, #60]	; (813e0 <vTaskDelay+0x64>)
   813a2:	4798      	blx	r3
   813a4:	47b8      	blx	r7
   813a6:	47b0      	blx	r6
				xTimeToWake = xTickCount + xTicksToDelay;
   813a8:	4b0e      	ldr	r3, [pc, #56]	; (813e4 <vTaskDelay+0x68>)
   813aa:	681b      	ldr	r3, [r3, #0]
   813ac:	441c      	add	r4, r3
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   813ae:	6828      	ldr	r0, [r5, #0]
   813b0:	3004      	adds	r0, #4
   813b2:	4b0d      	ldr	r3, [pc, #52]	; (813e8 <vTaskDelay+0x6c>)
   813b4:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   813b6:	4620      	mov	r0, r4
   813b8:	4b0c      	ldr	r3, [pc, #48]	; (813ec <vTaskDelay+0x70>)
   813ba:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
   813bc:	4b0c      	ldr	r3, [pc, #48]	; (813f0 <vTaskDelay+0x74>)
   813be:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
   813c0:	2800      	cmp	r0, #0
   813c2:	d1df      	bne.n	81384 <vTaskDelay+0x8>
   813c4:	e7dc      	b.n	81380 <vTaskDelay+0x4>
   813c6:	bf00      	nop
   813c8:	000802b1 	.word	0x000802b1
   813cc:	000810dd 	.word	0x000810dd
   813d0:	00082d9d 	.word	0x00082d9d
   813d4:	2007ab28 	.word	0x2007ab28
   813d8:	00083105 	.word	0x00083105
   813dc:	000830ad 	.word	0x000830ad
   813e0:	00083115 	.word	0x00083115
   813e4:	2007ac24 	.word	0x2007ac24
   813e8:	0008023b 	.word	0x0008023b
   813ec:	00080db5 	.word	0x00080db5
   813f0:	0008126d 	.word	0x0008126d

000813f4 <prvIdleTask>:
{
   813f4:	b580      	push	{r7, lr}
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   813f6:	4d16      	ldr	r5, [pc, #88]	; (81450 <prvIdleTask+0x5c>)
			vTaskSuspendAll();
   813f8:	f8df 8078 	ldr.w	r8, [pc, #120]	; 81474 <prvIdleTask+0x80>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   813fc:	4e15      	ldr	r6, [pc, #84]	; (81454 <prvIdleTask+0x60>)
   813fe:	e024      	b.n	8144a <prvIdleTask+0x56>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81400:	4b15      	ldr	r3, [pc, #84]	; (81458 <prvIdleTask+0x64>)
   81402:	681b      	ldr	r3, [r3, #0]
   81404:	2b01      	cmp	r3, #1
   81406:	d81e      	bhi.n	81446 <prvIdleTask+0x52>
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81408:	682b      	ldr	r3, [r5, #0]
   8140a:	2b00      	cmp	r3, #0
   8140c:	d0f8      	beq.n	81400 <prvIdleTask+0xc>
			vTaskSuspendAll();
   8140e:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81410:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
   81412:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
   81414:	2c00      	cmp	r4, #0
   81416:	d0f7      	beq.n	81408 <prvIdleTask+0x14>
				taskENTER_CRITICAL();
   81418:	4b10      	ldr	r3, [pc, #64]	; (8145c <prvIdleTask+0x68>)
   8141a:	4798      	blx	r3
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   8141c:	68f3      	ldr	r3, [r6, #12]
   8141e:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81420:	1d20      	adds	r0, r4, #4
   81422:	4b0f      	ldr	r3, [pc, #60]	; (81460 <prvIdleTask+0x6c>)
   81424:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   81426:	4a0f      	ldr	r2, [pc, #60]	; (81464 <prvIdleTask+0x70>)
   81428:	6813      	ldr	r3, [r2, #0]
   8142a:	3b01      	subs	r3, #1
   8142c:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
   8142e:	682b      	ldr	r3, [r5, #0]
   81430:	3b01      	subs	r3, #1
   81432:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
   81434:	4b0c      	ldr	r3, [pc, #48]	; (81468 <prvIdleTask+0x74>)
   81436:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   81438:	6b20      	ldr	r0, [r4, #48]	; 0x30
   8143a:	f8df 903c 	ldr.w	r9, [pc, #60]	; 81478 <prvIdleTask+0x84>
   8143e:	47c8      	blx	r9
		vPortFree( pxTCB );
   81440:	4620      	mov	r0, r4
   81442:	47c8      	blx	r9
   81444:	e7e0      	b.n	81408 <prvIdleTask+0x14>
				taskYIELD();
   81446:	4b09      	ldr	r3, [pc, #36]	; (8146c <prvIdleTask+0x78>)
   81448:	4798      	blx	r3
			xTaskResumeAll();
   8144a:	4f09      	ldr	r7, [pc, #36]	; (81470 <prvIdleTask+0x7c>)
   8144c:	e7dc      	b.n	81408 <prvIdleTask+0x14>
   8144e:	bf00      	nop
   81450:	2007aba8 	.word	0x2007aba8
   81454:	2007ac10 	.word	0x2007ac10
   81458:	2007ab34 	.word	0x2007ab34
   8145c:	000802d1 	.word	0x000802d1
   81460:	0008023b 	.word	0x0008023b
   81464:	2007ab98 	.word	0x2007ab98
   81468:	000802f1 	.word	0x000802f1
   8146c:	000802b1 	.word	0x000802b1
   81470:	0008126d 	.word	0x0008126d
   81474:	000810dd 	.word	0x000810dd
   81478:	000804f9 	.word	0x000804f9

0008147c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   8147c:	4b24      	ldr	r3, [pc, #144]	; (81510 <vTaskSwitchContext+0x94>)
   8147e:	681b      	ldr	r3, [r3, #0]
   81480:	b9eb      	cbnz	r3, 814be <vTaskSwitchContext+0x42>
{
   81482:	b510      	push	{r4, lr}
		taskSELECT_HIGHEST_PRIORITY_TASK();
   81484:	4b23      	ldr	r3, [pc, #140]	; (81514 <vTaskSwitchContext+0x98>)
   81486:	681b      	ldr	r3, [r3, #0]
   81488:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8148c:	009b      	lsls	r3, r3, #2
   8148e:	4a22      	ldr	r2, [pc, #136]	; (81518 <vTaskSwitchContext+0x9c>)
   81490:	58d3      	ldr	r3, [r2, r3]
   81492:	b9c3      	cbnz	r3, 814c6 <vTaskSwitchContext+0x4a>
   81494:	4b1f      	ldr	r3, [pc, #124]	; (81514 <vTaskSwitchContext+0x98>)
   81496:	681b      	ldr	r3, [r3, #0]
   81498:	b16b      	cbz	r3, 814b6 <vTaskSwitchContext+0x3a>
   8149a:	4a1e      	ldr	r2, [pc, #120]	; (81514 <vTaskSwitchContext+0x98>)
   8149c:	491e      	ldr	r1, [pc, #120]	; (81518 <vTaskSwitchContext+0x9c>)
   8149e:	6813      	ldr	r3, [r2, #0]
   814a0:	3b01      	subs	r3, #1
   814a2:	6013      	str	r3, [r2, #0]
   814a4:	6813      	ldr	r3, [r2, #0]
   814a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   814aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   814ae:	b953      	cbnz	r3, 814c6 <vTaskSwitchContext+0x4a>
   814b0:	6813      	ldr	r3, [r2, #0]
   814b2:	2b00      	cmp	r3, #0
   814b4:	d1f3      	bne.n	8149e <vTaskSwitchContext+0x22>
   814b6:	4b19      	ldr	r3, [pc, #100]	; (8151c <vTaskSwitchContext+0xa0>)
   814b8:	4798      	blx	r3
   814ba:	bf00      	nop
   814bc:	e7fd      	b.n	814ba <vTaskSwitchContext+0x3e>
		xMissedYield = pdTRUE;
   814be:	2201      	movs	r2, #1
   814c0:	4b17      	ldr	r3, [pc, #92]	; (81520 <vTaskSwitchContext+0xa4>)
   814c2:	601a      	str	r2, [r3, #0]
   814c4:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   814c6:	4b13      	ldr	r3, [pc, #76]	; (81514 <vTaskSwitchContext+0x98>)
   814c8:	681b      	ldr	r3, [r3, #0]
   814ca:	4a13      	ldr	r2, [pc, #76]	; (81518 <vTaskSwitchContext+0x9c>)
   814cc:	0099      	lsls	r1, r3, #2
   814ce:	18c8      	adds	r0, r1, r3
   814d0:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   814d4:	6844      	ldr	r4, [r0, #4]
   814d6:	6864      	ldr	r4, [r4, #4]
   814d8:	6044      	str	r4, [r0, #4]
   814da:	4419      	add	r1, r3
   814dc:	4602      	mov	r2, r0
   814de:	3208      	adds	r2, #8
   814e0:	4294      	cmp	r4, r2
   814e2:	d00f      	beq.n	81504 <vTaskSwitchContext+0x88>
   814e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   814e8:	4a0b      	ldr	r2, [pc, #44]	; (81518 <vTaskSwitchContext+0x9c>)
   814ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   814ee:	685b      	ldr	r3, [r3, #4]
   814f0:	68da      	ldr	r2, [r3, #12]
   814f2:	4b0c      	ldr	r3, [pc, #48]	; (81524 <vTaskSwitchContext+0xa8>)
   814f4:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   814f6:	4b0c      	ldr	r3, [pc, #48]	; (81528 <vTaskSwitchContext+0xac>)
   814f8:	4798      	blx	r3
   814fa:	4b0c      	ldr	r3, [pc, #48]	; (8152c <vTaskSwitchContext+0xb0>)
   814fc:	4798      	blx	r3
   814fe:	4b0c      	ldr	r3, [pc, #48]	; (81530 <vTaskSwitchContext+0xb4>)
   81500:	4798      	blx	r3
   81502:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
   81504:	6860      	ldr	r0, [r4, #4]
   81506:	4a04      	ldr	r2, [pc, #16]	; (81518 <vTaskSwitchContext+0x9c>)
   81508:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   8150c:	6050      	str	r0, [r2, #4]
   8150e:	e7e9      	b.n	814e4 <vTaskSwitchContext+0x68>
   81510:	2007aba0 	.word	0x2007aba0
   81514:	2007abac 	.word	0x2007abac
   81518:	2007ab34 	.word	0x2007ab34
   8151c:	000802c1 	.word	0x000802c1
   81520:	2007abdc 	.word	0x2007abdc
   81524:	2007ab28 	.word	0x2007ab28
   81528:	00083115 	.word	0x00083115
   8152c:	00083105 	.word	0x00083105
   81530:	00082fd1 	.word	0x00082fd1

00081534 <vTaskPlaceOnEventList>:
{
   81534:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
   81536:	b190      	cbz	r0, 8155e <vTaskPlaceOnEventList+0x2a>
   81538:	460c      	mov	r4, r1
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   8153a:	4d0e      	ldr	r5, [pc, #56]	; (81574 <vTaskPlaceOnEventList+0x40>)
   8153c:	6829      	ldr	r1, [r5, #0]
   8153e:	3118      	adds	r1, #24
   81540:	4b0d      	ldr	r3, [pc, #52]	; (81578 <vTaskPlaceOnEventList+0x44>)
   81542:	4798      	blx	r3
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81544:	6828      	ldr	r0, [r5, #0]
   81546:	3004      	adds	r0, #4
   81548:	4b0c      	ldr	r3, [pc, #48]	; (8157c <vTaskPlaceOnEventList+0x48>)
   8154a:	4798      	blx	r3
		if( xTicksToWait == portMAX_DELAY )
   8154c:	f1b4 3fff 	cmp.w	r4, #4294967295
   81550:	d009      	beq.n	81566 <vTaskPlaceOnEventList+0x32>
			xTimeToWake = xTickCount + xTicksToWait;
   81552:	4b0b      	ldr	r3, [pc, #44]	; (81580 <vTaskPlaceOnEventList+0x4c>)
   81554:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   81556:	4420      	add	r0, r4
   81558:	4b0a      	ldr	r3, [pc, #40]	; (81584 <vTaskPlaceOnEventList+0x50>)
   8155a:	4798      	blx	r3
   8155c:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxEventList );
   8155e:	4b0a      	ldr	r3, [pc, #40]	; (81588 <vTaskPlaceOnEventList+0x54>)
   81560:	4798      	blx	r3
   81562:	bf00      	nop
   81564:	e7fd      	b.n	81562 <vTaskPlaceOnEventList+0x2e>
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81566:	6829      	ldr	r1, [r5, #0]
   81568:	3104      	adds	r1, #4
   8156a:	4808      	ldr	r0, [pc, #32]	; (8158c <vTaskPlaceOnEventList+0x58>)
   8156c:	4b08      	ldr	r3, [pc, #32]	; (81590 <vTaskPlaceOnEventList+0x5c>)
   8156e:	4798      	blx	r3
   81570:	bd38      	pop	{r3, r4, r5, pc}
   81572:	bf00      	nop
   81574:	2007ab28 	.word	0x2007ab28
   81578:	00080201 	.word	0x00080201
   8157c:	0008023b 	.word	0x0008023b
   81580:	2007ac24 	.word	0x2007ac24
   81584:	00080db5 	.word	0x00080db5
   81588:	000802c1 	.word	0x000802c1
   8158c:	2007abfc 	.word	0x2007abfc
   81590:	000801e5 	.word	0x000801e5

00081594 <vTaskPlaceOnEventListRestricted>:
	{
   81594:	b570      	push	{r4, r5, r6, lr}
		configASSERT( pxEventList );
   81596:	b1e8      	cbz	r0, 815d4 <vTaskPlaceOnEventListRestricted+0x40>
   81598:	460e      	mov	r6, r1
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   8159a:	4d10      	ldr	r5, [pc, #64]	; (815dc <vTaskPlaceOnEventListRestricted+0x48>)
   8159c:	6829      	ldr	r1, [r5, #0]
   8159e:	3118      	adds	r1, #24
   815a0:	4b0f      	ldr	r3, [pc, #60]	; (815e0 <vTaskPlaceOnEventListRestricted+0x4c>)
   815a2:	4798      	blx	r3
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   815a4:	6828      	ldr	r0, [r5, #0]
   815a6:	3004      	adds	r0, #4
   815a8:	4b0e      	ldr	r3, [pc, #56]	; (815e4 <vTaskPlaceOnEventListRestricted+0x50>)
   815aa:	4798      	blx	r3
		xTimeToWake = xTickCount + xTicksToWait;
   815ac:	4b0e      	ldr	r3, [pc, #56]	; (815e8 <vTaskPlaceOnEventListRestricted+0x54>)
   815ae:	681c      	ldr	r4, [r3, #0]
   815b0:	4434      	add	r4, r6
		traceTASK_DELAY_UNTIL();
   815b2:	4621      	mov	r1, r4
   815b4:	2088      	movs	r0, #136	; 0x88
   815b6:	4b0d      	ldr	r3, [pc, #52]	; (815ec <vTaskPlaceOnEventListRestricted+0x58>)
   815b8:	4798      	blx	r3
   815ba:	6828      	ldr	r0, [r5, #0]
   815bc:	4e0c      	ldr	r6, [pc, #48]	; (815f0 <vTaskPlaceOnEventListRestricted+0x5c>)
   815be:	47b0      	blx	r6
   815c0:	4d0c      	ldr	r5, [pc, #48]	; (815f4 <vTaskPlaceOnEventListRestricted+0x60>)
   815c2:	47a8      	blx	r5
   815c4:	4b0c      	ldr	r3, [pc, #48]	; (815f8 <vTaskPlaceOnEventListRestricted+0x64>)
   815c6:	4798      	blx	r3
   815c8:	47b0      	blx	r6
   815ca:	47a8      	blx	r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   815cc:	4620      	mov	r0, r4
   815ce:	4b0b      	ldr	r3, [pc, #44]	; (815fc <vTaskPlaceOnEventListRestricted+0x68>)
   815d0:	4798      	blx	r3
   815d2:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
   815d4:	4b0a      	ldr	r3, [pc, #40]	; (81600 <vTaskPlaceOnEventListRestricted+0x6c>)
   815d6:	4798      	blx	r3
   815d8:	bf00      	nop
   815da:	e7fd      	b.n	815d8 <vTaskPlaceOnEventListRestricted+0x44>
   815dc:	2007ab28 	.word	0x2007ab28
   815e0:	000801e5 	.word	0x000801e5
   815e4:	0008023b 	.word	0x0008023b
   815e8:	2007ac24 	.word	0x2007ac24
   815ec:	00082d9d 	.word	0x00082d9d
   815f0:	00083105 	.word	0x00083105
   815f4:	000830ad 	.word	0x000830ad
   815f8:	00083115 	.word	0x00083115
   815fc:	00080db5 	.word	0x00080db5
   81600:	000802c1 	.word	0x000802c1

00081604 <xTaskRemoveFromEventList>:
{
   81604:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   81606:	68c3      	ldr	r3, [r0, #12]
   81608:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   8160a:	2c00      	cmp	r4, #0
   8160c:	d028      	beq.n	81660 <xTaskRemoveFromEventList+0x5c>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   8160e:	f104 0518 	add.w	r5, r4, #24
   81612:	4628      	mov	r0, r5
   81614:	4b17      	ldr	r3, [pc, #92]	; (81674 <xTaskRemoveFromEventList+0x70>)
   81616:	4798      	blx	r3
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81618:	4b17      	ldr	r3, [pc, #92]	; (81678 <xTaskRemoveFromEventList+0x74>)
   8161a:	681b      	ldr	r3, [r3, #0]
   8161c:	bb23      	cbnz	r3, 81668 <xTaskRemoveFromEventList+0x64>
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   8161e:	1d25      	adds	r5, r4, #4
   81620:	4628      	mov	r0, r5
   81622:	4b14      	ldr	r3, [pc, #80]	; (81674 <xTaskRemoveFromEventList+0x70>)
   81624:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   81626:	4620      	mov	r0, r4
   81628:	4b14      	ldr	r3, [pc, #80]	; (8167c <xTaskRemoveFromEventList+0x78>)
   8162a:	4798      	blx	r3
   8162c:	4b14      	ldr	r3, [pc, #80]	; (81680 <xTaskRemoveFromEventList+0x7c>)
   8162e:	4798      	blx	r3
   81630:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81632:	4b14      	ldr	r3, [pc, #80]	; (81684 <xTaskRemoveFromEventList+0x80>)
   81634:	681b      	ldr	r3, [r3, #0]
   81636:	4298      	cmp	r0, r3
   81638:	bf84      	itt	hi
   8163a:	4b12      	ldrhi	r3, [pc, #72]	; (81684 <xTaskRemoveFromEventList+0x80>)
   8163c:	6018      	strhi	r0, [r3, #0]
   8163e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81642:	4629      	mov	r1, r5
   81644:	4b10      	ldr	r3, [pc, #64]	; (81688 <xTaskRemoveFromEventList+0x84>)
   81646:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   8164a:	4b10      	ldr	r3, [pc, #64]	; (8168c <xTaskRemoveFromEventList+0x88>)
   8164c:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   8164e:	4b10      	ldr	r3, [pc, #64]	; (81690 <xTaskRemoveFromEventList+0x8c>)
   81650:	681b      	ldr	r3, [r3, #0]
   81652:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   81656:	4298      	cmp	r0, r3
   81658:	bf34      	ite	cc
   8165a:	2000      	movcc	r0, #0
   8165c:	2001      	movcs	r0, #1
   8165e:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxUnblockedTCB );
   81660:	4b0c      	ldr	r3, [pc, #48]	; (81694 <xTaskRemoveFromEventList+0x90>)
   81662:	4798      	blx	r3
   81664:	bf00      	nop
   81666:	e7fd      	b.n	81664 <xTaskRemoveFromEventList+0x60>
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81668:	4629      	mov	r1, r5
   8166a:	480b      	ldr	r0, [pc, #44]	; (81698 <xTaskRemoveFromEventList+0x94>)
   8166c:	4b07      	ldr	r3, [pc, #28]	; (8168c <xTaskRemoveFromEventList+0x88>)
   8166e:	4798      	blx	r3
   81670:	e7ed      	b.n	8164e <xTaskRemoveFromEventList+0x4a>
   81672:	bf00      	nop
   81674:	0008023b 	.word	0x0008023b
   81678:	2007aba0 	.word	0x2007aba0
   8167c:	00083105 	.word	0x00083105
   81680:	00082add 	.word	0x00082add
   81684:	2007abac 	.word	0x2007abac
   81688:	2007ab34 	.word	0x2007ab34
   8168c:	000801e5 	.word	0x000801e5
   81690:	2007ab28 	.word	0x2007ab28
   81694:	000802c1 	.word	0x000802c1
   81698:	2007abe4 	.word	0x2007abe4

0008169c <vTaskSetTimeOutState>:
{
   8169c:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   8169e:	b130      	cbz	r0, 816ae <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   816a0:	4a05      	ldr	r2, [pc, #20]	; (816b8 <vTaskSetTimeOutState+0x1c>)
   816a2:	6812      	ldr	r2, [r2, #0]
   816a4:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   816a6:	4a05      	ldr	r2, [pc, #20]	; (816bc <vTaskSetTimeOutState+0x20>)
   816a8:	6812      	ldr	r2, [r2, #0]
   816aa:	6042      	str	r2, [r0, #4]
   816ac:	bd08      	pop	{r3, pc}
	configASSERT( pxTimeOut );
   816ae:	4b04      	ldr	r3, [pc, #16]	; (816c0 <vTaskSetTimeOutState+0x24>)
   816b0:	4798      	blx	r3
   816b2:	bf00      	nop
   816b4:	e7fd      	b.n	816b2 <vTaskSetTimeOutState+0x16>
   816b6:	bf00      	nop
   816b8:	2007abe0 	.word	0x2007abe0
   816bc:	2007ac24 	.word	0x2007ac24
   816c0:	000802c1 	.word	0x000802c1

000816c4 <xTaskCheckForTimeOut>:
{
   816c4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
   816c6:	b1e8      	cbz	r0, 81704 <xTaskCheckForTimeOut+0x40>
   816c8:	460d      	mov	r5, r1
   816ca:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
   816cc:	b1f1      	cbz	r1, 8170c <xTaskCheckForTimeOut+0x48>
	taskENTER_CRITICAL();
   816ce:	4b18      	ldr	r3, [pc, #96]	; (81730 <xTaskCheckForTimeOut+0x6c>)
   816d0:	4798      	blx	r3
			if( *pxTicksToWait == portMAX_DELAY )
   816d2:	682b      	ldr	r3, [r5, #0]
   816d4:	f1b3 3fff 	cmp.w	r3, #4294967295
   816d8:	d026      	beq.n	81728 <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   816da:	4a16      	ldr	r2, [pc, #88]	; (81734 <xTaskCheckForTimeOut+0x70>)
   816dc:	6812      	ldr	r2, [r2, #0]
   816de:	6821      	ldr	r1, [r4, #0]
   816e0:	4291      	cmp	r1, r2
   816e2:	d004      	beq.n	816ee <xTaskCheckForTimeOut+0x2a>
   816e4:	4a14      	ldr	r2, [pc, #80]	; (81738 <xTaskCheckForTimeOut+0x74>)
   816e6:	6812      	ldr	r2, [r2, #0]
   816e8:	6861      	ldr	r1, [r4, #4]
   816ea:	4291      	cmp	r1, r2
   816ec:	d91e      	bls.n	8172c <xTaskCheckForTimeOut+0x68>
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   816ee:	4a12      	ldr	r2, [pc, #72]	; (81738 <xTaskCheckForTimeOut+0x74>)
   816f0:	6812      	ldr	r2, [r2, #0]
   816f2:	6861      	ldr	r1, [r4, #4]
   816f4:	1a52      	subs	r2, r2, r1
   816f6:	4293      	cmp	r3, r2
   816f8:	d80c      	bhi.n	81714 <xTaskCheckForTimeOut+0x50>
			xReturn = pdTRUE;
   816fa:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
   816fc:	4b0f      	ldr	r3, [pc, #60]	; (8173c <xTaskCheckForTimeOut+0x78>)
   816fe:	4798      	blx	r3
}
   81700:	4620      	mov	r0, r4
   81702:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxTimeOut );
   81704:	4b0e      	ldr	r3, [pc, #56]	; (81740 <xTaskCheckForTimeOut+0x7c>)
   81706:	4798      	blx	r3
   81708:	bf00      	nop
   8170a:	e7fd      	b.n	81708 <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
   8170c:	4b0c      	ldr	r3, [pc, #48]	; (81740 <xTaskCheckForTimeOut+0x7c>)
   8170e:	4798      	blx	r3
   81710:	bf00      	nop
   81712:	e7fd      	b.n	81710 <xTaskCheckForTimeOut+0x4c>
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   81714:	4a08      	ldr	r2, [pc, #32]	; (81738 <xTaskCheckForTimeOut+0x74>)
   81716:	6812      	ldr	r2, [r2, #0]
   81718:	1a52      	subs	r2, r2, r1
   8171a:	1a9b      	subs	r3, r3, r2
   8171c:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   8171e:	4620      	mov	r0, r4
   81720:	4b08      	ldr	r3, [pc, #32]	; (81744 <xTaskCheckForTimeOut+0x80>)
   81722:	4798      	blx	r3
			xReturn = pdFALSE;
   81724:	2400      	movs	r4, #0
   81726:	e7e9      	b.n	816fc <xTaskCheckForTimeOut+0x38>
				xReturn = pdFALSE;
   81728:	2400      	movs	r4, #0
   8172a:	e7e7      	b.n	816fc <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
   8172c:	2401      	movs	r4, #1
   8172e:	e7e5      	b.n	816fc <xTaskCheckForTimeOut+0x38>
   81730:	000802d1 	.word	0x000802d1
   81734:	2007abe0 	.word	0x2007abe0
   81738:	2007ac24 	.word	0x2007ac24
   8173c:	000802f1 	.word	0x000802f1
   81740:	000802c1 	.word	0x000802c1
   81744:	0008169d 	.word	0x0008169d

00081748 <vTaskMissedYield>:
	xMissedYield = pdTRUE;
   81748:	2201      	movs	r2, #1
   8174a:	4b01      	ldr	r3, [pc, #4]	; (81750 <vTaskMissedYield+0x8>)
   8174c:	601a      	str	r2, [r3, #0]
   8174e:	4770      	bx	lr
   81750:	2007abdc 	.word	0x2007abdc

00081754 <uxTaskGetTaskNumber>:
		if( xTask != NULL )
   81754:	b108      	cbz	r0, 8175a <uxTaskGetTaskNumber+0x6>
			uxReturn = pxTCB->uxTaskNumber;
   81756:	6c40      	ldr	r0, [r0, #68]	; 0x44
   81758:	4770      	bx	lr
			uxReturn = 0U;
   8175a:	2000      	movs	r0, #0
	}
   8175c:	4770      	bx	lr
	...

00081760 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   81760:	4b01      	ldr	r3, [pc, #4]	; (81768 <xTaskGetCurrentTaskHandle+0x8>)
   81762:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   81764:	4770      	bx	lr
   81766:	bf00      	nop
   81768:	2007ab28 	.word	0x2007ab28

0008176c <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   8176c:	4b05      	ldr	r3, [pc, #20]	; (81784 <xTaskGetSchedulerState+0x18>)
   8176e:	681b      	ldr	r3, [r3, #0]
   81770:	b133      	cbz	r3, 81780 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81772:	4b05      	ldr	r3, [pc, #20]	; (81788 <xTaskGetSchedulerState+0x1c>)
   81774:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   81776:	2b00      	cmp	r3, #0
   81778:	bf0c      	ite	eq
   8177a:	2001      	moveq	r0, #1
   8177c:	2002      	movne	r0, #2
   8177e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
   81780:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
   81782:	4770      	bx	lr
   81784:	2007abf8 	.word	0x2007abf8
   81788:	2007aba0 	.word	0x2007aba0

0008178c <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   8178c:	2800      	cmp	r0, #0
   8178e:	d051      	beq.n	81834 <vTaskPriorityInherit+0xa8>
	{
   81790:	b570      	push	{r4, r5, r6, lr}
   81792:	4604      	mov	r4, r0
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   81794:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   81796:	4a28      	ldr	r2, [pc, #160]	; (81838 <vTaskPriorityInherit+0xac>)
   81798:	6812      	ldr	r2, [r2, #0]
   8179a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   8179c:	4293      	cmp	r3, r2
   8179e:	d22b      	bcs.n	817f8 <vTaskPriorityInherit+0x6c>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   817a0:	4a25      	ldr	r2, [pc, #148]	; (81838 <vTaskPriorityInherit+0xac>)
   817a2:	6812      	ldr	r2, [r2, #0]
   817a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   817a6:	f1c2 0205 	rsb	r2, r2, #5
   817aa:	6182      	str	r2, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   817ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   817b0:	4a22      	ldr	r2, [pc, #136]	; (8183c <vTaskPriorityInherit+0xb0>)
   817b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   817b6:	6942      	ldr	r2, [r0, #20]
   817b8:	429a      	cmp	r2, r3
   817ba:	d01e      	beq.n	817fa <vTaskPriorityInherit+0x6e>
					prvAddTaskToReadyQueue( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   817bc:	4b1e      	ldr	r3, [pc, #120]	; (81838 <vTaskPriorityInherit+0xac>)
   817be:	681b      	ldr	r3, [r3, #0]
   817c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   817c2:	62c3      	str	r3, [r0, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
   817c4:	4620      	mov	r0, r4
   817c6:	4d1e      	ldr	r5, [pc, #120]	; (81840 <vTaskPriorityInherit+0xb4>)
   817c8:	47a8      	blx	r5
   817ca:	4606      	mov	r6, r0
   817cc:	4620      	mov	r0, r4
   817ce:	47a8      	blx	r5
   817d0:	4601      	mov	r1, r0
   817d2:	2003      	movs	r0, #3
   817d4:	4b1b      	ldr	r3, [pc, #108]	; (81844 <vTaskPriorityInherit+0xb8>)
   817d6:	4798      	blx	r3
   817d8:	4603      	mov	r3, r0
   817da:	4632      	mov	r2, r6
   817dc:	2103      	movs	r1, #3
   817de:	208e      	movs	r0, #142	; 0x8e
   817e0:	4e19      	ldr	r6, [pc, #100]	; (81848 <vTaskPriorityInherit+0xbc>)
   817e2:	47b0      	blx	r6
   817e4:	4620      	mov	r0, r4
   817e6:	47a8      	blx	r5
   817e8:	4b13      	ldr	r3, [pc, #76]	; (81838 <vTaskPriorityInherit+0xac>)
   817ea:	681b      	ldr	r3, [r3, #0]
   817ec:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
   817f0:	4601      	mov	r1, r0
   817f2:	2003      	movs	r0, #3
   817f4:	4b15      	ldr	r3, [pc, #84]	; (8184c <vTaskPriorityInherit+0xc0>)
   817f6:	4798      	blx	r3
   817f8:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   817fa:	1d05      	adds	r5, r0, #4
   817fc:	4628      	mov	r0, r5
   817fe:	4b14      	ldr	r3, [pc, #80]	; (81850 <vTaskPriorityInherit+0xc4>)
   81800:	4798      	blx	r3
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81802:	4b0d      	ldr	r3, [pc, #52]	; (81838 <vTaskPriorityInherit+0xac>)
   81804:	681b      	ldr	r3, [r3, #0]
   81806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81808:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   8180a:	4620      	mov	r0, r4
   8180c:	4b0c      	ldr	r3, [pc, #48]	; (81840 <vTaskPriorityInherit+0xb4>)
   8180e:	4798      	blx	r3
   81810:	4b10      	ldr	r3, [pc, #64]	; (81854 <vTaskPriorityInherit+0xc8>)
   81812:	4798      	blx	r3
   81814:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81816:	4b10      	ldr	r3, [pc, #64]	; (81858 <vTaskPriorityInherit+0xcc>)
   81818:	681b      	ldr	r3, [r3, #0]
   8181a:	4298      	cmp	r0, r3
   8181c:	bf84      	itt	hi
   8181e:	4b0e      	ldrhi	r3, [pc, #56]	; (81858 <vTaskPriorityInherit+0xcc>)
   81820:	6018      	strhi	r0, [r3, #0]
   81822:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81826:	4629      	mov	r1, r5
   81828:	4b04      	ldr	r3, [pc, #16]	; (8183c <vTaskPriorityInherit+0xb0>)
   8182a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   8182e:	4b0b      	ldr	r3, [pc, #44]	; (8185c <vTaskPriorityInherit+0xd0>)
   81830:	4798      	blx	r3
   81832:	e7c7      	b.n	817c4 <vTaskPriorityInherit+0x38>
   81834:	4770      	bx	lr
   81836:	bf00      	nop
   81838:	2007ab28 	.word	0x2007ab28
   8183c:	2007ab34 	.word	0x2007ab34
   81840:	00083105 	.word	0x00083105
   81844:	00082ec1 	.word	0x00082ec1
   81848:	00082c89 	.word	0x00082c89
   8184c:	00082e69 	.word	0x00082e69
   81850:	0008023b 	.word	0x0008023b
   81854:	00082add 	.word	0x00082add
   81858:	2007abac 	.word	0x2007abac
   8185c:	000801e5 	.word	0x000801e5

00081860 <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   81860:	2800      	cmp	r0, #0
   81862:	d03a      	beq.n	818da <vTaskPriorityDisinherit+0x7a>
	{
   81864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81866:	4604      	mov	r4, r0
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   81868:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   8186a:	6c83      	ldr	r3, [r0, #72]	; 0x48
   8186c:	429a      	cmp	r2, r3
   8186e:	d033      	beq.n	818d8 <vTaskPriorityDisinherit+0x78>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81870:	1d06      	adds	r6, r0, #4
   81872:	4630      	mov	r0, r6
   81874:	4b19      	ldr	r3, [pc, #100]	; (818dc <vTaskPriorityDisinherit+0x7c>)
   81876:	4798      	blx	r3
					taskRESET_READY_PRIORITY( pxTCB->uxPriority );
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   81878:	4620      	mov	r0, r4
   8187a:	4d19      	ldr	r5, [pc, #100]	; (818e0 <vTaskPriorityDisinherit+0x80>)
   8187c:	47a8      	blx	r5
   8187e:	4607      	mov	r7, r0
   81880:	4620      	mov	r0, r4
   81882:	47a8      	blx	r5
   81884:	4601      	mov	r1, r0
   81886:	2003      	movs	r0, #3
   81888:	4b16      	ldr	r3, [pc, #88]	; (818e4 <vTaskPriorityDisinherit+0x84>)
   8188a:	4798      	blx	r3
   8188c:	4603      	mov	r3, r0
   8188e:	463a      	mov	r2, r7
   81890:	2103      	movs	r1, #3
   81892:	208f      	movs	r0, #143	; 0x8f
   81894:	4f14      	ldr	r7, [pc, #80]	; (818e8 <vTaskPriorityDisinherit+0x88>)
   81896:	47b8      	blx	r7
   81898:	4620      	mov	r0, r4
   8189a:	47a8      	blx	r5
   8189c:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
   818a0:	4601      	mov	r1, r0
   818a2:	2003      	movs	r0, #3
   818a4:	4b11      	ldr	r3, [pc, #68]	; (818ec <vTaskPriorityDisinherit+0x8c>)
   818a6:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   818a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   818aa:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   818ac:	f1c3 0305 	rsb	r3, r3, #5
   818b0:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   818b2:	4620      	mov	r0, r4
   818b4:	47a8      	blx	r5
   818b6:	4b0e      	ldr	r3, [pc, #56]	; (818f0 <vTaskPriorityDisinherit+0x90>)
   818b8:	4798      	blx	r3
   818ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   818bc:	4b0d      	ldr	r3, [pc, #52]	; (818f4 <vTaskPriorityDisinherit+0x94>)
   818be:	681b      	ldr	r3, [r3, #0]
   818c0:	4298      	cmp	r0, r3
   818c2:	bf84      	itt	hi
   818c4:	4b0b      	ldrhi	r3, [pc, #44]	; (818f4 <vTaskPriorityDisinherit+0x94>)
   818c6:	6018      	strhi	r0, [r3, #0]
   818c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   818cc:	4631      	mov	r1, r6
   818ce:	4b0a      	ldr	r3, [pc, #40]	; (818f8 <vTaskPriorityDisinherit+0x98>)
   818d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   818d4:	4b09      	ldr	r3, [pc, #36]	; (818fc <vTaskPriorityDisinherit+0x9c>)
   818d6:	4798      	blx	r3
   818d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   818da:	4770      	bx	lr
   818dc:	0008023b 	.word	0x0008023b
   818e0:	00083105 	.word	0x00083105
   818e4:	00082ec1 	.word	0x00082ec1
   818e8:	00082c89 	.word	0x00082c89
   818ec:	00082e69 	.word	0x00082e69
   818f0:	00082add 	.word	0x00082add
   818f4:	2007abac 	.word	0x2007abac
   818f8:	2007ab34 	.word	0x2007ab34
   818fc:	000801e5 	.word	0x000801e5

00081900 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   81900:	b508      	push	{r3, lr}
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   81902:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81904:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
   81906:	4291      	cmp	r1, r2
   81908:	d80c      	bhi.n	81924 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   8190a:	1ad2      	subs	r2, r2, r3
   8190c:	6983      	ldr	r3, [r0, #24]
   8190e:	429a      	cmp	r2, r3
   81910:	d301      	bcc.n	81916 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   81912:	2001      	movs	r0, #1
   81914:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   81916:	1d01      	adds	r1, r0, #4
   81918:	4b09      	ldr	r3, [pc, #36]	; (81940 <prvInsertTimerInActiveList+0x40>)
   8191a:	6818      	ldr	r0, [r3, #0]
   8191c:	4b09      	ldr	r3, [pc, #36]	; (81944 <prvInsertTimerInActiveList+0x44>)
   8191e:	4798      	blx	r3
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81920:	2000      	movs	r0, #0
   81922:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   81924:	429a      	cmp	r2, r3
   81926:	d201      	bcs.n	8192c <prvInsertTimerInActiveList+0x2c>
   81928:	4299      	cmp	r1, r3
   8192a:	d206      	bcs.n	8193a <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   8192c:	1d01      	adds	r1, r0, #4
   8192e:	4b06      	ldr	r3, [pc, #24]	; (81948 <prvInsertTimerInActiveList+0x48>)
   81930:	6818      	ldr	r0, [r3, #0]
   81932:	4b04      	ldr	r3, [pc, #16]	; (81944 <prvInsertTimerInActiveList+0x44>)
   81934:	4798      	blx	r3
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81936:	2000      	movs	r0, #0
   81938:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
   8193a:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
   8193c:	bd08      	pop	{r3, pc}
   8193e:	bf00      	nop
   81940:	2007ac2c 	.word	0x2007ac2c
   81944:	00080201 	.word	0x00080201
   81948:	2007ac28 	.word	0x2007ac28

0008194c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   8194c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   8194e:	4b0d      	ldr	r3, [pc, #52]	; (81984 <prvCheckForValidListAndQueue+0x38>)
   81950:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   81952:	4b0d      	ldr	r3, [pc, #52]	; (81988 <prvCheckForValidListAndQueue+0x3c>)
   81954:	681b      	ldr	r3, [r3, #0]
   81956:	b113      	cbz	r3, 8195e <prvCheckForValidListAndQueue+0x12>
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
		}
	}
	taskEXIT_CRITICAL();
   81958:	4b0c      	ldr	r3, [pc, #48]	; (8198c <prvCheckForValidListAndQueue+0x40>)
   8195a:	4798      	blx	r3
   8195c:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
   8195e:	4d0c      	ldr	r5, [pc, #48]	; (81990 <prvCheckForValidListAndQueue+0x44>)
   81960:	4628      	mov	r0, r5
   81962:	4e0c      	ldr	r6, [pc, #48]	; (81994 <prvCheckForValidListAndQueue+0x48>)
   81964:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   81966:	4c0c      	ldr	r4, [pc, #48]	; (81998 <prvCheckForValidListAndQueue+0x4c>)
   81968:	4620      	mov	r0, r4
   8196a:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   8196c:	4b0b      	ldr	r3, [pc, #44]	; (8199c <prvCheckForValidListAndQueue+0x50>)
   8196e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   81970:	4b0b      	ldr	r3, [pc, #44]	; (819a0 <prvCheckForValidListAndQueue+0x54>)
   81972:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   81974:	2200      	movs	r2, #0
   81976:	210c      	movs	r1, #12
   81978:	2005      	movs	r0, #5
   8197a:	4b0a      	ldr	r3, [pc, #40]	; (819a4 <prvCheckForValidListAndQueue+0x58>)
   8197c:	4798      	blx	r3
   8197e:	4b02      	ldr	r3, [pc, #8]	; (81988 <prvCheckForValidListAndQueue+0x3c>)
   81980:	6018      	str	r0, [r3, #0]
   81982:	e7e9      	b.n	81958 <prvCheckForValidListAndQueue+0xc>
   81984:	000802d1 	.word	0x000802d1
   81988:	2007ac5c 	.word	0x2007ac5c
   8198c:	000802f1 	.word	0x000802f1
   81990:	2007ac30 	.word	0x2007ac30
   81994:	000801c9 	.word	0x000801c9
   81998:	2007ac44 	.word	0x2007ac44
   8199c:	2007ac28 	.word	0x2007ac28
   819a0:	2007ac2c 	.word	0x2007ac2c
   819a4:	000806d5 	.word	0x000806d5

000819a8 <xTimerCreateTimerTask>:
{
   819a8:	b510      	push	{r4, lr}
   819aa:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
   819ac:	4b0c      	ldr	r3, [pc, #48]	; (819e0 <xTimerCreateTimerTask+0x38>)
   819ae:	4798      	blx	r3
	if( xTimerQueue != NULL )
   819b0:	4b0c      	ldr	r3, [pc, #48]	; (819e4 <xTimerCreateTimerTask+0x3c>)
   819b2:	681b      	ldr	r3, [r3, #0]
   819b4:	b17b      	cbz	r3, 819d6 <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
   819b6:	2300      	movs	r3, #0
   819b8:	9303      	str	r3, [sp, #12]
   819ba:	9302      	str	r3, [sp, #8]
   819bc:	4a0a      	ldr	r2, [pc, #40]	; (819e8 <xTimerCreateTimerTask+0x40>)
   819be:	9201      	str	r2, [sp, #4]
   819c0:	2204      	movs	r2, #4
   819c2:	9200      	str	r2, [sp, #0]
   819c4:	f44f 7282 	mov.w	r2, #260	; 0x104
   819c8:	4908      	ldr	r1, [pc, #32]	; (819ec <xTimerCreateTimerTask+0x44>)
   819ca:	4809      	ldr	r0, [pc, #36]	; (819f0 <xTimerCreateTimerTask+0x48>)
   819cc:	4c09      	ldr	r4, [pc, #36]	; (819f4 <xTimerCreateTimerTask+0x4c>)
   819ce:	47a0      	blx	r4
	configASSERT( xReturn );
   819d0:	b108      	cbz	r0, 819d6 <xTimerCreateTimerTask+0x2e>
}
   819d2:	b004      	add	sp, #16
   819d4:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
   819d6:	4b08      	ldr	r3, [pc, #32]	; (819f8 <xTimerCreateTimerTask+0x50>)
   819d8:	4798      	blx	r3
   819da:	bf00      	nop
   819dc:	e7fd      	b.n	819da <xTimerCreateTimerTask+0x32>
   819de:	bf00      	nop
   819e0:	0008194d 	.word	0x0008194d
   819e4:	2007ac5c 	.word	0x2007ac5c
   819e8:	2007ac60 	.word	0x2007ac60
   819ec:	0008638c 	.word	0x0008638c
   819f0:	00081b01 	.word	0x00081b01
   819f4:	00080e0d 	.word	0x00080e0d
   819f8:	000802c1 	.word	0x000802c1

000819fc <xTimerGenericCommand>:
{
   819fc:	b530      	push	{r4, r5, lr}
   819fe:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
   81a00:	4c0f      	ldr	r4, [pc, #60]	; (81a40 <xTimerGenericCommand+0x44>)
   81a02:	6825      	ldr	r5, [r4, #0]
   81a04:	b1d5      	cbz	r5, 81a3c <xTimerGenericCommand+0x40>
   81a06:	461c      	mov	r4, r3
		xMessage.xMessageID = xCommandID;
   81a08:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   81a0a:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   81a0c:	9003      	str	r0, [sp, #12]
		if( pxHigherPriorityTaskWoken == NULL )
   81a0e:	b13b      	cbz	r3, 81a20 <xTimerGenericCommand+0x24>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81a10:	2300      	movs	r3, #0
   81a12:	4622      	mov	r2, r4
   81a14:	a901      	add	r1, sp, #4
   81a16:	4628      	mov	r0, r5
   81a18:	4c0a      	ldr	r4, [pc, #40]	; (81a44 <xTimerGenericCommand+0x48>)
   81a1a:	47a0      	blx	r4
}
   81a1c:	b005      	add	sp, #20
   81a1e:	bd30      	pop	{r4, r5, pc}
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81a20:	4b09      	ldr	r3, [pc, #36]	; (81a48 <xTimerGenericCommand+0x4c>)
   81a22:	4798      	blx	r3
   81a24:	2801      	cmp	r0, #1
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   81a26:	f04f 0300 	mov.w	r3, #0
   81a2a:	bf0c      	ite	eq
   81a2c:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81a2e:	461a      	movne	r2, r3
   81a30:	a901      	add	r1, sp, #4
   81a32:	4803      	ldr	r0, [pc, #12]	; (81a40 <xTimerGenericCommand+0x44>)
   81a34:	6800      	ldr	r0, [r0, #0]
   81a36:	4c05      	ldr	r4, [pc, #20]	; (81a4c <xTimerGenericCommand+0x50>)
   81a38:	47a0      	blx	r4
   81a3a:	e7ef      	b.n	81a1c <xTimerGenericCommand+0x20>
portBASE_TYPE xReturn = pdFAIL;
   81a3c:	2000      	movs	r0, #0
	return xReturn;
   81a3e:	e7ed      	b.n	81a1c <xTimerGenericCommand+0x20>
   81a40:	2007ac5c 	.word	0x2007ac5c
   81a44:	000809a5 	.word	0x000809a5
   81a48:	0008176d 	.word	0x0008176d
   81a4c:	000807a5 	.word	0x000807a5

00081a50 <prvSampleTimeNow>:
{
   81a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81a54:	b082      	sub	sp, #8
   81a56:	4681      	mov	r9, r0
	xTimeNow = xTaskGetTickCount();
   81a58:	4b21      	ldr	r3, [pc, #132]	; (81ae0 <prvSampleTimeNow+0x90>)
   81a5a:	4798      	blx	r3
   81a5c:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
   81a5e:	4b21      	ldr	r3, [pc, #132]	; (81ae4 <prvSampleTimeNow+0x94>)
   81a60:	681b      	ldr	r3, [r3, #0]
   81a62:	4298      	cmp	r0, r3
   81a64:	d315      	bcc.n	81a92 <prvSampleTimeNow+0x42>
		*pxTimerListsWereSwitched = pdFALSE;
   81a66:	2300      	movs	r3, #0
   81a68:	f8c9 3000 	str.w	r3, [r9]
	xLastTime = xTimeNow;
   81a6c:	4b1d      	ldr	r3, [pc, #116]	; (81ae4 <prvSampleTimeNow+0x94>)
   81a6e:	f8c3 8000 	str.w	r8, [r3]
}
   81a72:	4640      	mov	r0, r8
   81a74:	b002      	add	sp, #8
   81a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81a7a:	2100      	movs	r1, #0
   81a7c:	9100      	str	r1, [sp, #0]
   81a7e:	460b      	mov	r3, r1
   81a80:	4652      	mov	r2, sl
   81a82:	4620      	mov	r0, r4
   81a84:	4c18      	ldr	r4, [pc, #96]	; (81ae8 <prvSampleTimeNow+0x98>)
   81a86:	47a0      	blx	r4
				configASSERT( xResult );
   81a88:	b928      	cbnz	r0, 81a96 <prvSampleTimeNow+0x46>
   81a8a:	4b18      	ldr	r3, [pc, #96]	; (81aec <prvSampleTimeNow+0x9c>)
   81a8c:	4798      	blx	r3
   81a8e:	bf00      	nop
   81a90:	e7fd      	b.n	81a8e <prvSampleTimeNow+0x3e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81a92:	4e17      	ldr	r6, [pc, #92]	; (81af0 <prvSampleTimeNow+0xa0>)
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81a94:	4f17      	ldr	r7, [pc, #92]	; (81af4 <prvSampleTimeNow+0xa4>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81a96:	6833      	ldr	r3, [r6, #0]
   81a98:	681a      	ldr	r2, [r3, #0]
   81a9a:	b1c2      	cbz	r2, 81ace <prvSampleTimeNow+0x7e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81a9c:	68da      	ldr	r2, [r3, #12]
   81a9e:	f8d2 a000 	ldr.w	sl, [r2]
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81aa2:	68db      	ldr	r3, [r3, #12]
   81aa4:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81aa6:	1d25      	adds	r5, r4, #4
   81aa8:	4628      	mov	r0, r5
   81aaa:	47b8      	blx	r7
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81aac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81aae:	4620      	mov	r0, r4
   81ab0:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81ab2:	69e3      	ldr	r3, [r4, #28]
   81ab4:	2b01      	cmp	r3, #1
   81ab6:	d1ee      	bne.n	81a96 <prvSampleTimeNow+0x46>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   81ab8:	69a3      	ldr	r3, [r4, #24]
   81aba:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   81abc:	459a      	cmp	sl, r3
   81abe:	d2dc      	bcs.n	81a7a <prvSampleTimeNow+0x2a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   81ac0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81ac2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81ac4:	4629      	mov	r1, r5
   81ac6:	6830      	ldr	r0, [r6, #0]
   81ac8:	4b0b      	ldr	r3, [pc, #44]	; (81af8 <prvSampleTimeNow+0xa8>)
   81aca:	4798      	blx	r3
   81acc:	e7e3      	b.n	81a96 <prvSampleTimeNow+0x46>
	pxCurrentTimerList = pxOverflowTimerList;
   81ace:	4a0b      	ldr	r2, [pc, #44]	; (81afc <prvSampleTimeNow+0xac>)
   81ad0:	6810      	ldr	r0, [r2, #0]
   81ad2:	4907      	ldr	r1, [pc, #28]	; (81af0 <prvSampleTimeNow+0xa0>)
   81ad4:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   81ad6:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
   81ad8:	2301      	movs	r3, #1
   81ada:	f8c9 3000 	str.w	r3, [r9]
   81ade:	e7c5      	b.n	81a6c <prvSampleTimeNow+0x1c>
   81ae0:	000810ed 	.word	0x000810ed
   81ae4:	2007ac58 	.word	0x2007ac58
   81ae8:	000819fd 	.word	0x000819fd
   81aec:	000802c1 	.word	0x000802c1
   81af0:	2007ac28 	.word	0x2007ac28
   81af4:	0008023b 	.word	0x0008023b
   81af8:	00080201 	.word	0x00080201
   81afc:	2007ac2c 	.word	0x2007ac2c

00081b00 <prvTimerTask>:
{
   81b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81b04:	b086      	sub	sp, #24
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81b06:	f8df 8168 	ldr.w	r8, [pc, #360]	; 81c70 <prvTimerTask+0x170>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81b0a:	4b4d      	ldr	r3, [pc, #308]	; (81c40 <prvTimerTask+0x140>)
   81b0c:	681b      	ldr	r3, [r3, #0]
   81b0e:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   81b10:	2a00      	cmp	r2, #0
   81b12:	f000 8089 	beq.w	81c28 <prvTimerTask+0x128>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81b16:	68db      	ldr	r3, [r3, #12]
   81b18:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
   81b1a:	4b4a      	ldr	r3, [pc, #296]	; (81c44 <prvTimerTask+0x144>)
   81b1c:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81b1e:	a803      	add	r0, sp, #12
   81b20:	4b49      	ldr	r3, [pc, #292]	; (81c48 <prvTimerTask+0x148>)
   81b22:	4798      	blx	r3
   81b24:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81b26:	9b03      	ldr	r3, [sp, #12]
   81b28:	2b00      	cmp	r3, #0
   81b2a:	f040 8086 	bne.w	81c3a <prvTimerTask+0x13a>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   81b2e:	42a8      	cmp	r0, r5
   81b30:	d20f      	bcs.n	81b52 <prvTimerTask+0x52>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81b32:	1ba9      	subs	r1, r5, r6
   81b34:	4b45      	ldr	r3, [pc, #276]	; (81c4c <prvTimerTask+0x14c>)
   81b36:	6818      	ldr	r0, [r3, #0]
   81b38:	4b45      	ldr	r3, [pc, #276]	; (81c50 <prvTimerTask+0x150>)
   81b3a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   81b3c:	4b45      	ldr	r3, [pc, #276]	; (81c54 <prvTimerTask+0x154>)
   81b3e:	4798      	blx	r3
   81b40:	b908      	cbnz	r0, 81b46 <prvTimerTask+0x46>
					portYIELD_WITHIN_API();
   81b42:	4b45      	ldr	r3, [pc, #276]	; (81c58 <prvTimerTask+0x158>)
   81b44:	4798      	blx	r3
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81b46:	a802      	add	r0, sp, #8
   81b48:	4b3f      	ldr	r3, [pc, #252]	; (81c48 <prvTimerTask+0x148>)
   81b4a:	4798      	blx	r3
   81b4c:	4607      	mov	r7, r0
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81b4e:	4e3f      	ldr	r6, [pc, #252]	; (81c4c <prvTimerTask+0x14c>)
   81b50:	e036      	b.n	81bc0 <prvTimerTask+0xc0>
				xTaskResumeAll();
   81b52:	4b40      	ldr	r3, [pc, #256]	; (81c54 <prvTimerTask+0x154>)
   81b54:	4798      	blx	r3
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81b56:	4b3a      	ldr	r3, [pc, #232]	; (81c40 <prvTimerTask+0x140>)
   81b58:	681b      	ldr	r3, [r3, #0]
   81b5a:	68db      	ldr	r3, [r3, #12]
   81b5c:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81b5e:	1d20      	adds	r0, r4, #4
   81b60:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81b62:	69e3      	ldr	r3, [r4, #28]
   81b64:	2b01      	cmp	r3, #1
   81b66:	d114      	bne.n	81b92 <prvTimerTask+0x92>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   81b68:	69a1      	ldr	r1, [r4, #24]
   81b6a:	462b      	mov	r3, r5
   81b6c:	4632      	mov	r2, r6
   81b6e:	4429      	add	r1, r5
   81b70:	4620      	mov	r0, r4
   81b72:	4e3a      	ldr	r6, [pc, #232]	; (81c5c <prvTimerTask+0x15c>)
   81b74:	47b0      	blx	r6
   81b76:	2801      	cmp	r0, #1
   81b78:	d10b      	bne.n	81b92 <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81b7a:	2100      	movs	r1, #0
   81b7c:	9100      	str	r1, [sp, #0]
   81b7e:	460b      	mov	r3, r1
   81b80:	462a      	mov	r2, r5
   81b82:	4620      	mov	r0, r4
   81b84:	4d36      	ldr	r5, [pc, #216]	; (81c60 <prvTimerTask+0x160>)
   81b86:	47a8      	blx	r5
			configASSERT( xResult );
   81b88:	b918      	cbnz	r0, 81b92 <prvTimerTask+0x92>
   81b8a:	4b36      	ldr	r3, [pc, #216]	; (81c64 <prvTimerTask+0x164>)
   81b8c:	4798      	blx	r3
   81b8e:	bf00      	nop
   81b90:	e7fd      	b.n	81b8e <prvTimerTask+0x8e>
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81b92:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81b94:	4620      	mov	r0, r4
   81b96:	4798      	blx	r3
   81b98:	e7d5      	b.n	81b46 <prvTimerTask+0x46>
		xNextExpireTime = ( portTickType ) 0U;
   81b9a:	2500      	movs	r5, #0
   81b9c:	e7c9      	b.n	81b32 <prvTimerTask+0x32>
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   81b9e:	9904      	ldr	r1, [sp, #16]
   81ba0:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   81ba2:	b131      	cbz	r1, 81bb2 <prvTimerTask+0xb2>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81ba4:	463b      	mov	r3, r7
   81ba6:	463a      	mov	r2, r7
   81ba8:	4439      	add	r1, r7
   81baa:	4620      	mov	r0, r4
   81bac:	4c2b      	ldr	r4, [pc, #172]	; (81c5c <prvTimerTask+0x15c>)
   81bae:	47a0      	blx	r4
   81bb0:	e006      	b.n	81bc0 <prvTimerTask+0xc0>
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   81bb2:	4b2c      	ldr	r3, [pc, #176]	; (81c64 <prvTimerTask+0x164>)
   81bb4:	4798      	blx	r3
   81bb6:	bf00      	nop
   81bb8:	e7fd      	b.n	81bb6 <prvTimerTask+0xb6>
				vPortFree( pxTimer );
   81bba:	4620      	mov	r0, r4
   81bbc:	4b2a      	ldr	r3, [pc, #168]	; (81c68 <prvTimerTask+0x168>)
   81bbe:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81bc0:	4d2a      	ldr	r5, [pc, #168]	; (81c6c <prvTimerTask+0x16c>)
   81bc2:	2300      	movs	r3, #0
   81bc4:	461a      	mov	r2, r3
   81bc6:	a903      	add	r1, sp, #12
   81bc8:	6830      	ldr	r0, [r6, #0]
   81bca:	47a8      	blx	r5
   81bcc:	2800      	cmp	r0, #0
   81bce:	d09c      	beq.n	81b0a <prvTimerTask+0xa>
		pxTimer = xMessage.pxTimer;
   81bd0:	9c05      	ldr	r4, [sp, #20]
		if( pxTimer != NULL )
   81bd2:	b11c      	cbz	r4, 81bdc <prvTimerTask+0xdc>
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   81bd4:	6963      	ldr	r3, [r4, #20]
   81bd6:	b10b      	cbz	r3, 81bdc <prvTimerTask+0xdc>
				uxListRemove( &( pxTimer->xTimerListItem ) );
   81bd8:	1d20      	adds	r0, r4, #4
   81bda:	47c0      	blx	r8
		switch( xMessage.xMessageID )
   81bdc:	9b03      	ldr	r3, [sp, #12]
   81bde:	2b02      	cmp	r3, #2
   81be0:	d0dd      	beq.n	81b9e <prvTimerTask+0x9e>
   81be2:	2b03      	cmp	r3, #3
   81be4:	d0e9      	beq.n	81bba <prvTimerTask+0xba>
   81be6:	2b00      	cmp	r3, #0
   81be8:	d1eb      	bne.n	81bc2 <prvTimerTask+0xc2>
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   81bea:	9904      	ldr	r1, [sp, #16]
   81bec:	69a0      	ldr	r0, [r4, #24]
   81bee:	460b      	mov	r3, r1
   81bf0:	463a      	mov	r2, r7
   81bf2:	4401      	add	r1, r0
   81bf4:	4620      	mov	r0, r4
   81bf6:	4d19      	ldr	r5, [pc, #100]	; (81c5c <prvTimerTask+0x15c>)
   81bf8:	47a8      	blx	r5
   81bfa:	2801      	cmp	r0, #1
   81bfc:	d1e0      	bne.n	81bc0 <prvTimerTask+0xc0>
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81bfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81c00:	4620      	mov	r0, r4
   81c02:	4798      	blx	r3
					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81c04:	69e3      	ldr	r3, [r4, #28]
   81c06:	2b01      	cmp	r3, #1
   81c08:	d1da      	bne.n	81bc0 <prvTimerTask+0xc0>
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   81c0a:	69a2      	ldr	r2, [r4, #24]
   81c0c:	2100      	movs	r1, #0
   81c0e:	9100      	str	r1, [sp, #0]
   81c10:	460b      	mov	r3, r1
   81c12:	9804      	ldr	r0, [sp, #16]
   81c14:	4402      	add	r2, r0
   81c16:	4620      	mov	r0, r4
   81c18:	4c11      	ldr	r4, [pc, #68]	; (81c60 <prvTimerTask+0x160>)
   81c1a:	47a0      	blx	r4
						configASSERT( xResult );
   81c1c:	2800      	cmp	r0, #0
   81c1e:	d1cf      	bne.n	81bc0 <prvTimerTask+0xc0>
   81c20:	4b10      	ldr	r3, [pc, #64]	; (81c64 <prvTimerTask+0x164>)
   81c22:	4798      	blx	r3
   81c24:	bf00      	nop
   81c26:	e7fd      	b.n	81c24 <prvTimerTask+0x124>
	vTaskSuspendAll();
   81c28:	4b06      	ldr	r3, [pc, #24]	; (81c44 <prvTimerTask+0x144>)
   81c2a:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81c2c:	a803      	add	r0, sp, #12
   81c2e:	4b06      	ldr	r3, [pc, #24]	; (81c48 <prvTimerTask+0x148>)
   81c30:	4798      	blx	r3
   81c32:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81c34:	9b03      	ldr	r3, [sp, #12]
   81c36:	2b00      	cmp	r3, #0
   81c38:	d0af      	beq.n	81b9a <prvTimerTask+0x9a>
			xTaskResumeAll();
   81c3a:	4b06      	ldr	r3, [pc, #24]	; (81c54 <prvTimerTask+0x154>)
   81c3c:	4798      	blx	r3
   81c3e:	e782      	b.n	81b46 <prvTimerTask+0x46>
   81c40:	2007ac28 	.word	0x2007ac28
   81c44:	000810dd 	.word	0x000810dd
   81c48:	00081a51 	.word	0x00081a51
   81c4c:	2007ac5c 	.word	0x2007ac5c
   81c50:	00080d65 	.word	0x00080d65
   81c54:	0008126d 	.word	0x0008126d
   81c58:	000802b1 	.word	0x000802b1
   81c5c:	00081901 	.word	0x00081901
   81c60:	000819fd 	.word	0x000819fd
   81c64:	000802c1 	.word	0x000802c1
   81c68:	000804f9 	.word	0x000804f9
   81c6c:	00080ac1 	.word	0x00080ac1
   81c70:	0008023b 	.word	0x0008023b

00081c74 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   81c74:	3801      	subs	r0, #1
   81c76:	2802      	cmp	r0, #2
   81c78:	d815      	bhi.n	81ca6 <_write+0x32>
{
   81c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81c7e:	460e      	mov	r6, r1
   81c80:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   81c82:	b19a      	cbz	r2, 81cac <_write+0x38>
   81c84:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   81c86:	f8df 8038 	ldr.w	r8, [pc, #56]	; 81cc0 <_write+0x4c>
   81c8a:	4f0c      	ldr	r7, [pc, #48]	; (81cbc <_write+0x48>)
   81c8c:	f8d8 0000 	ldr.w	r0, [r8]
   81c90:	f815 1b01 	ldrb.w	r1, [r5], #1
   81c94:	683b      	ldr	r3, [r7, #0]
   81c96:	4798      	blx	r3
   81c98:	2800      	cmp	r0, #0
   81c9a:	db0a      	blt.n	81cb2 <_write+0x3e>
   81c9c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   81c9e:	3c01      	subs	r4, #1
   81ca0:	d1f4      	bne.n	81c8c <_write+0x18>
   81ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   81ca6:	f04f 30ff 	mov.w	r0, #4294967295
   81caa:	4770      	bx	lr
	for (; len != 0; --len) {
   81cac:	4610      	mov	r0, r2
   81cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   81cb2:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   81cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81cba:	bf00      	nop
   81cbc:	2007addc 	.word	0x2007addc
   81cc0:	2007ade0 	.word	0x2007ade0

00081cc4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   81cc4:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   81cc6:	23ac      	movs	r3, #172	; 0xac
   81cc8:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   81cca:	680b      	ldr	r3, [r1, #0]
   81ccc:	684a      	ldr	r2, [r1, #4]
   81cce:	fbb3 f3f2 	udiv	r3, r3, r2
   81cd2:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   81cd4:	1e5c      	subs	r4, r3, #1
   81cd6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   81cda:	4294      	cmp	r4, r2
   81cdc:	d80b      	bhi.n	81cf6 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   81cde:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   81ce0:	688b      	ldr	r3, [r1, #8]
   81ce2:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   81ce4:	f240 2302 	movw	r3, #514	; 0x202
   81ce8:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   81cec:	2350      	movs	r3, #80	; 0x50
   81cee:	6003      	str	r3, [r0, #0]

	return 0;
   81cf0:	2000      	movs	r0, #0
}
   81cf2:	bc10      	pop	{r4}
   81cf4:	4770      	bx	lr
		return 1;
   81cf6:	2001      	movs	r0, #1
   81cf8:	e7fb      	b.n	81cf2 <uart_init+0x2e>

00081cfa <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   81cfa:	6943      	ldr	r3, [r0, #20]
   81cfc:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   81d00:	bf1a      	itte	ne
   81d02:	61c1      	strne	r1, [r0, #28]
	return 0;
   81d04:	2000      	movne	r0, #0
		return 1;
   81d06:	2001      	moveq	r0, #1
}
   81d08:	4770      	bx	lr

00081d0a <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   81d0a:	6943      	ldr	r3, [r0, #20]
   81d0c:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   81d10:	bf1d      	ittte	ne
   81d12:	6983      	ldrne	r3, [r0, #24]
   81d14:	700b      	strbne	r3, [r1, #0]
	return 0;
   81d16:	2000      	movne	r0, #0
		return 1;
   81d18:	2001      	moveq	r0, #1
}
   81d1a:	4770      	bx	lr

00081d1c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81d1c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   81d1e:	480e      	ldr	r0, [pc, #56]	; (81d58 <sysclk_init+0x3c>)
   81d20:	4b0e      	ldr	r3, [pc, #56]	; (81d5c <sysclk_init+0x40>)
   81d22:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81d24:	213e      	movs	r1, #62	; 0x3e
   81d26:	2000      	movs	r0, #0
   81d28:	4b0d      	ldr	r3, [pc, #52]	; (81d60 <sysclk_init+0x44>)
   81d2a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81d2c:	4c0d      	ldr	r4, [pc, #52]	; (81d64 <sysclk_init+0x48>)
   81d2e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81d30:	2800      	cmp	r0, #0
   81d32:	d0fc      	beq.n	81d2e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   81d34:	4b0c      	ldr	r3, [pc, #48]	; (81d68 <sysclk_init+0x4c>)
   81d36:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81d38:	4a0c      	ldr	r2, [pc, #48]	; (81d6c <sysclk_init+0x50>)
   81d3a:	4b0d      	ldr	r3, [pc, #52]	; (81d70 <sysclk_init+0x54>)
   81d3c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81d3e:	4c0d      	ldr	r4, [pc, #52]	; (81d74 <sysclk_init+0x58>)
   81d40:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81d42:	2800      	cmp	r0, #0
   81d44:	d0fc      	beq.n	81d40 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81d46:	2010      	movs	r0, #16
   81d48:	4b0b      	ldr	r3, [pc, #44]	; (81d78 <sysclk_init+0x5c>)
   81d4a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81d4c:	4b0b      	ldr	r3, [pc, #44]	; (81d7c <sysclk_init+0x60>)
   81d4e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81d50:	4801      	ldr	r0, [pc, #4]	; (81d58 <sysclk_init+0x3c>)
   81d52:	4b02      	ldr	r3, [pc, #8]	; (81d5c <sysclk_init+0x40>)
   81d54:	4798      	blx	r3
   81d56:	bd10      	pop	{r4, pc}
   81d58:	0501bd00 	.word	0x0501bd00
   81d5c:	200700a5 	.word	0x200700a5
   81d60:	00082111 	.word	0x00082111
   81d64:	00082165 	.word	0x00082165
   81d68:	00082175 	.word	0x00082175
   81d6c:	200d3f01 	.word	0x200d3f01
   81d70:	400e0600 	.word	0x400e0600
   81d74:	00082185 	.word	0x00082185
   81d78:	000820ad 	.word	0x000820ad
   81d7c:	00082285 	.word	0x00082285

00081d80 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   81d80:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81d82:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81d86:	4b16      	ldr	r3, [pc, #88]	; (81de0 <board_init+0x60>)
   81d88:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   81d8a:	200b      	movs	r0, #11
   81d8c:	4c15      	ldr	r4, [pc, #84]	; (81de4 <board_init+0x64>)
   81d8e:	47a0      	blx	r4
   81d90:	200c      	movs	r0, #12
   81d92:	47a0      	blx	r4
   81d94:	200d      	movs	r0, #13
   81d96:	47a0      	blx	r4
   81d98:	200e      	movs	r0, #14
   81d9a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81d9c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81da0:	203b      	movs	r0, #59	; 0x3b
   81da2:	4c11      	ldr	r4, [pc, #68]	; (81de8 <board_init+0x68>)
   81da4:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81da6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81daa:	2055      	movs	r0, #85	; 0x55
   81dac:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81dae:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81db2:	2056      	movs	r0, #86	; 0x56
   81db4:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81db6:	490d      	ldr	r1, [pc, #52]	; (81dec <board_init+0x6c>)
   81db8:	2068      	movs	r0, #104	; 0x68
   81dba:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81dbc:	490c      	ldr	r1, [pc, #48]	; (81df0 <board_init+0x70>)
   81dbe:	205c      	movs	r0, #92	; 0x5c
   81dc0:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81dc2:	4a0c      	ldr	r2, [pc, #48]	; (81df4 <board_init+0x74>)
   81dc4:	f44f 7140 	mov.w	r1, #768	; 0x300
   81dc8:	480b      	ldr	r0, [pc, #44]	; (81df8 <board_init+0x78>)
   81dca:	4b0c      	ldr	r3, [pc, #48]	; (81dfc <board_init+0x7c>)
   81dcc:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   81dce:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81dd2:	202b      	movs	r0, #43	; 0x2b
   81dd4:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   81dd6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81dda:	202a      	movs	r0, #42	; 0x2a
   81ddc:	47a0      	blx	r4
   81dde:	bd10      	pop	{r4, pc}
   81de0:	400e1a50 	.word	0x400e1a50
   81de4:	00082195 	.word	0x00082195
   81de8:	00081ea1 	.word	0x00081ea1
   81dec:	28000079 	.word	0x28000079
   81df0:	28000001 	.word	0x28000001
   81df4:	08000001 	.word	0x08000001
   81df8:	400e0e00 	.word	0x400e0e00
   81dfc:	00081f71 	.word	0x00081f71

00081e00 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81e00:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81e02:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   81e06:	d016      	beq.n	81e36 <pio_set_peripheral+0x36>
   81e08:	d80b      	bhi.n	81e22 <pio_set_peripheral+0x22>
   81e0a:	b149      	cbz	r1, 81e20 <pio_set_peripheral+0x20>
   81e0c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81e10:	d105      	bne.n	81e1e <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81e12:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81e14:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81e16:	400b      	ands	r3, r1
   81e18:	ea23 0302 	bic.w	r3, r3, r2
   81e1c:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81e1e:	6042      	str	r2, [r0, #4]
   81e20:	4770      	bx	lr
	switch (ul_type) {
   81e22:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81e26:	d0fb      	beq.n	81e20 <pio_set_peripheral+0x20>
   81e28:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81e2c:	d0f8      	beq.n	81e20 <pio_set_peripheral+0x20>
   81e2e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81e32:	d1f4      	bne.n	81e1e <pio_set_peripheral+0x1e>
   81e34:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   81e36:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81e38:	4313      	orrs	r3, r2
   81e3a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81e3c:	e7ef      	b.n	81e1e <pio_set_peripheral+0x1e>

00081e3e <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81e3e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81e40:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81e44:	bf14      	ite	ne
   81e46:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81e48:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81e4a:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   81e4e:	bf14      	ite	ne
   81e50:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   81e52:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   81e54:	f012 0f02 	tst.w	r2, #2
   81e58:	d107      	bne.n	81e6a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   81e5a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   81e5e:	bf18      	it	ne
   81e60:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   81e64:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   81e66:	6001      	str	r1, [r0, #0]
   81e68:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   81e6a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   81e6e:	e7f9      	b.n	81e64 <pio_set_input+0x26>

00081e70 <pio_set_output>:
{
   81e70:	b410      	push	{r4}
   81e72:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   81e74:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81e76:	b944      	cbnz	r4, 81e8a <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   81e78:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   81e7a:	b143      	cbz	r3, 81e8e <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   81e7c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   81e7e:	b942      	cbnz	r2, 81e92 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   81e80:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   81e82:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81e84:	6001      	str	r1, [r0, #0]
}
   81e86:	bc10      	pop	{r4}
   81e88:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   81e8a:	6641      	str	r1, [r0, #100]	; 0x64
   81e8c:	e7f5      	b.n	81e7a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   81e8e:	6541      	str	r1, [r0, #84]	; 0x54
   81e90:	e7f5      	b.n	81e7e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   81e92:	6301      	str	r1, [r0, #48]	; 0x30
   81e94:	e7f5      	b.n	81e82 <pio_set_output+0x12>

00081e96 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81e96:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81e98:	4770      	bx	lr

00081e9a <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81e9a:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   81e9c:	4770      	bx	lr
	...

00081ea0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81ea0:	b570      	push	{r4, r5, r6, lr}
   81ea2:	b082      	sub	sp, #8
   81ea4:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81ea6:	0943      	lsrs	r3, r0, #5
   81ea8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81eac:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81eb0:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   81eb2:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   81eb6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81eba:	d031      	beq.n	81f20 <pio_configure_pin+0x80>
   81ebc:	d816      	bhi.n	81eec <pio_configure_pin+0x4c>
   81ebe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81ec2:	d01b      	beq.n	81efc <pio_configure_pin+0x5c>
   81ec4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81ec8:	d116      	bne.n	81ef8 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81eca:	f000 001f 	and.w	r0, r0, #31
   81ece:	2601      	movs	r6, #1
   81ed0:	4086      	lsls	r6, r0
   81ed2:	4632      	mov	r2, r6
   81ed4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81ed8:	4620      	mov	r0, r4
   81eda:	4b22      	ldr	r3, [pc, #136]	; (81f64 <pio_configure_pin+0xc4>)
   81edc:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81ede:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81ee2:	bf14      	ite	ne
   81ee4:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81ee6:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   81ee8:	2001      	movs	r0, #1
   81eea:	e017      	b.n	81f1c <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   81eec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81ef0:	d021      	beq.n	81f36 <pio_configure_pin+0x96>
   81ef2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81ef6:	d01e      	beq.n	81f36 <pio_configure_pin+0x96>
		return 0;
   81ef8:	2000      	movs	r0, #0
   81efa:	e00f      	b.n	81f1c <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81efc:	f000 001f 	and.w	r0, r0, #31
   81f00:	2601      	movs	r6, #1
   81f02:	4086      	lsls	r6, r0
   81f04:	4632      	mov	r2, r6
   81f06:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f0a:	4620      	mov	r0, r4
   81f0c:	4b15      	ldr	r3, [pc, #84]	; (81f64 <pio_configure_pin+0xc4>)
   81f0e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81f10:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81f14:	bf14      	ite	ne
   81f16:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81f18:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   81f1a:	2001      	movs	r0, #1
}
   81f1c:	b002      	add	sp, #8
   81f1e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81f20:	f000 011f 	and.w	r1, r0, #31
   81f24:	2601      	movs	r6, #1
   81f26:	462a      	mov	r2, r5
   81f28:	fa06 f101 	lsl.w	r1, r6, r1
   81f2c:	4620      	mov	r0, r4
   81f2e:	4b0e      	ldr	r3, [pc, #56]	; (81f68 <pio_configure_pin+0xc8>)
   81f30:	4798      	blx	r3
	return 1;
   81f32:	4630      	mov	r0, r6
		break;
   81f34:	e7f2      	b.n	81f1c <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81f36:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81f3a:	f000 011f 	and.w	r1, r0, #31
   81f3e:	2601      	movs	r6, #1
   81f40:	ea05 0306 	and.w	r3, r5, r6
   81f44:	9300      	str	r3, [sp, #0]
   81f46:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81f4a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81f4e:	bf14      	ite	ne
   81f50:	2200      	movne	r2, #0
   81f52:	2201      	moveq	r2, #1
   81f54:	fa06 f101 	lsl.w	r1, r6, r1
   81f58:	4620      	mov	r0, r4
   81f5a:	4c04      	ldr	r4, [pc, #16]	; (81f6c <pio_configure_pin+0xcc>)
   81f5c:	47a0      	blx	r4
	return 1;
   81f5e:	4630      	mov	r0, r6
		break;
   81f60:	e7dc      	b.n	81f1c <pio_configure_pin+0x7c>
   81f62:	bf00      	nop
   81f64:	00081e01 	.word	0x00081e01
   81f68:	00081e3f 	.word	0x00081e3f
   81f6c:	00081e71 	.word	0x00081e71

00081f70 <pio_configure_pin_group>:
{
   81f70:	b570      	push	{r4, r5, r6, lr}
   81f72:	b082      	sub	sp, #8
   81f74:	4605      	mov	r5, r0
   81f76:	460e      	mov	r6, r1
   81f78:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   81f7a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   81f7e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81f82:	d027      	beq.n	81fd4 <pio_configure_pin_group+0x64>
   81f84:	d811      	bhi.n	81faa <pio_configure_pin_group+0x3a>
   81f86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81f8a:	d016      	beq.n	81fba <pio_configure_pin_group+0x4a>
   81f8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81f90:	d111      	bne.n	81fb6 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   81f92:	460a      	mov	r2, r1
   81f94:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81f98:	4b19      	ldr	r3, [pc, #100]	; (82000 <pio_configure_pin_group+0x90>)
   81f9a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81f9c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81fa0:	bf14      	ite	ne
   81fa2:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81fa4:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   81fa6:	2001      	movs	r0, #1
   81fa8:	e012      	b.n	81fd0 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   81faa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81fae:	d015      	beq.n	81fdc <pio_configure_pin_group+0x6c>
   81fb0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81fb4:	d012      	beq.n	81fdc <pio_configure_pin_group+0x6c>
		return 0;
   81fb6:	2000      	movs	r0, #0
   81fb8:	e00a      	b.n	81fd0 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81fba:	460a      	mov	r2, r1
   81fbc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81fc0:	4b0f      	ldr	r3, [pc, #60]	; (82000 <pio_configure_pin_group+0x90>)
   81fc2:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81fc4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81fc8:	bf14      	ite	ne
   81fca:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81fcc:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   81fce:	2001      	movs	r0, #1
}
   81fd0:	b002      	add	sp, #8
   81fd2:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   81fd4:	4b0b      	ldr	r3, [pc, #44]	; (82004 <pio_configure_pin_group+0x94>)
   81fd6:	4798      	blx	r3
	return 1;
   81fd8:	2001      	movs	r0, #1
		break;
   81fda:	e7f9      	b.n	81fd0 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81fdc:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   81fe0:	f004 0301 	and.w	r3, r4, #1
   81fe4:	9300      	str	r3, [sp, #0]
   81fe6:	f3c4 0380 	ubfx	r3, r4, #2, #1
   81fea:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81fee:	bf14      	ite	ne
   81ff0:	2200      	movne	r2, #0
   81ff2:	2201      	moveq	r2, #1
   81ff4:	4631      	mov	r1, r6
   81ff6:	4628      	mov	r0, r5
   81ff8:	4c03      	ldr	r4, [pc, #12]	; (82008 <pio_configure_pin_group+0x98>)
   81ffa:	47a0      	blx	r4
	return 1;
   81ffc:	2001      	movs	r0, #1
		break;
   81ffe:	e7e7      	b.n	81fd0 <pio_configure_pin_group+0x60>
   82000:	00081e01 	.word	0x00081e01
   82004:	00081e3f 	.word	0x00081e3f
   82008:	00081e71 	.word	0x00081e71

0008200c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   8200c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82010:	4604      	mov	r4, r0
   82012:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82014:	4b0e      	ldr	r3, [pc, #56]	; (82050 <pio_handler_process+0x44>)
   82016:	4798      	blx	r3
   82018:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8201a:	4620      	mov	r0, r4
   8201c:	4b0d      	ldr	r3, [pc, #52]	; (82054 <pio_handler_process+0x48>)
   8201e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   82020:	4005      	ands	r5, r0
   82022:	d013      	beq.n	8204c <pio_handler_process+0x40>
   82024:	4c0c      	ldr	r4, [pc, #48]	; (82058 <pio_handler_process+0x4c>)
   82026:	f104 0660 	add.w	r6, r4, #96	; 0x60
   8202a:	e003      	b.n	82034 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8202c:	42b4      	cmp	r4, r6
   8202e:	d00d      	beq.n	8204c <pio_handler_process+0x40>
   82030:	3410      	adds	r4, #16
		while (status != 0) {
   82032:	b15d      	cbz	r5, 8204c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   82034:	6820      	ldr	r0, [r4, #0]
   82036:	4540      	cmp	r0, r8
   82038:	d1f8      	bne.n	8202c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8203a:	6861      	ldr	r1, [r4, #4]
   8203c:	4229      	tst	r1, r5
   8203e:	d0f5      	beq.n	8202c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82040:	68e3      	ldr	r3, [r4, #12]
   82042:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   82044:	6863      	ldr	r3, [r4, #4]
   82046:	ea25 0503 	bic.w	r5, r5, r3
   8204a:	e7ef      	b.n	8202c <pio_handler_process+0x20>
   8204c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82050:	00081e97 	.word	0x00081e97
   82054:	00081e9b 	.word	0x00081e9b
   82058:	2007ac64 	.word	0x2007ac64

0008205c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   8205c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8205e:	210b      	movs	r1, #11
   82060:	4801      	ldr	r0, [pc, #4]	; (82068 <PIOA_Handler+0xc>)
   82062:	4b02      	ldr	r3, [pc, #8]	; (8206c <PIOA_Handler+0x10>)
   82064:	4798      	blx	r3
   82066:	bd08      	pop	{r3, pc}
   82068:	400e0e00 	.word	0x400e0e00
   8206c:	0008200d 	.word	0x0008200d

00082070 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82070:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   82072:	210c      	movs	r1, #12
   82074:	4801      	ldr	r0, [pc, #4]	; (8207c <PIOB_Handler+0xc>)
   82076:	4b02      	ldr	r3, [pc, #8]	; (82080 <PIOB_Handler+0x10>)
   82078:	4798      	blx	r3
   8207a:	bd08      	pop	{r3, pc}
   8207c:	400e1000 	.word	0x400e1000
   82080:	0008200d 	.word	0x0008200d

00082084 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82084:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   82086:	210d      	movs	r1, #13
   82088:	4801      	ldr	r0, [pc, #4]	; (82090 <PIOC_Handler+0xc>)
   8208a:	4b02      	ldr	r3, [pc, #8]	; (82094 <PIOC_Handler+0x10>)
   8208c:	4798      	blx	r3
   8208e:	bd08      	pop	{r3, pc}
   82090:	400e1200 	.word	0x400e1200
   82094:	0008200d 	.word	0x0008200d

00082098 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82098:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8209a:	210e      	movs	r1, #14
   8209c:	4801      	ldr	r0, [pc, #4]	; (820a4 <PIOD_Handler+0xc>)
   8209e:	4b02      	ldr	r3, [pc, #8]	; (820a8 <PIOD_Handler+0x10>)
   820a0:	4798      	blx	r3
   820a2:	bd08      	pop	{r3, pc}
   820a4:	400e1400 	.word	0x400e1400
   820a8:	0008200d 	.word	0x0008200d

000820ac <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   820ac:	4a17      	ldr	r2, [pc, #92]	; (8210c <pmc_switch_mck_to_pllack+0x60>)
   820ae:	6b13      	ldr	r3, [r2, #48]	; 0x30
   820b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   820b4:	4318      	orrs	r0, r3
   820b6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   820b8:	6e93      	ldr	r3, [r2, #104]	; 0x68
   820ba:	f013 0f08 	tst.w	r3, #8
   820be:	d10a      	bne.n	820d6 <pmc_switch_mck_to_pllack+0x2a>
   820c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   820c4:	4911      	ldr	r1, [pc, #68]	; (8210c <pmc_switch_mck_to_pllack+0x60>)
   820c6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   820c8:	f012 0f08 	tst.w	r2, #8
   820cc:	d103      	bne.n	820d6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   820ce:	3b01      	subs	r3, #1
   820d0:	d1f9      	bne.n	820c6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   820d2:	2001      	movs	r0, #1
   820d4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   820d6:	4a0d      	ldr	r2, [pc, #52]	; (8210c <pmc_switch_mck_to_pllack+0x60>)
   820d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   820da:	f023 0303 	bic.w	r3, r3, #3
   820de:	f043 0302 	orr.w	r3, r3, #2
   820e2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   820e4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   820e6:	f013 0f08 	tst.w	r3, #8
   820ea:	d10a      	bne.n	82102 <pmc_switch_mck_to_pllack+0x56>
   820ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
   820f0:	4906      	ldr	r1, [pc, #24]	; (8210c <pmc_switch_mck_to_pllack+0x60>)
   820f2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   820f4:	f012 0f08 	tst.w	r2, #8
   820f8:	d105      	bne.n	82106 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   820fa:	3b01      	subs	r3, #1
   820fc:	d1f9      	bne.n	820f2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   820fe:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   82100:	4770      	bx	lr
	return 0;
   82102:	2000      	movs	r0, #0
   82104:	4770      	bx	lr
   82106:	2000      	movs	r0, #0
   82108:	4770      	bx	lr
   8210a:	bf00      	nop
   8210c:	400e0600 	.word	0x400e0600

00082110 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82110:	b9c8      	cbnz	r0, 82146 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82112:	4a11      	ldr	r2, [pc, #68]	; (82158 <pmc_switch_mainck_to_xtal+0x48>)
   82114:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   82116:	0209      	lsls	r1, r1, #8
   82118:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8211a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8211e:	f023 0303 	bic.w	r3, r3, #3
   82122:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82126:	f043 0301 	orr.w	r3, r3, #1
   8212a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8212c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8212e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82130:	f013 0f01 	tst.w	r3, #1
   82134:	d0fb      	beq.n	8212e <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   82136:	4a08      	ldr	r2, [pc, #32]	; (82158 <pmc_switch_mainck_to_xtal+0x48>)
   82138:	6a13      	ldr	r3, [r2, #32]
   8213a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8213e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82142:	6213      	str	r3, [r2, #32]
   82144:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82146:	4904      	ldr	r1, [pc, #16]	; (82158 <pmc_switch_mainck_to_xtal+0x48>)
   82148:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8214a:	4a04      	ldr	r2, [pc, #16]	; (8215c <pmc_switch_mainck_to_xtal+0x4c>)
   8214c:	401a      	ands	r2, r3
   8214e:	4b04      	ldr	r3, [pc, #16]	; (82160 <pmc_switch_mainck_to_xtal+0x50>)
   82150:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82152:	620b      	str	r3, [r1, #32]
   82154:	4770      	bx	lr
   82156:	bf00      	nop
   82158:	400e0600 	.word	0x400e0600
   8215c:	fec8fffc 	.word	0xfec8fffc
   82160:	01370002 	.word	0x01370002

00082164 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82164:	4b02      	ldr	r3, [pc, #8]	; (82170 <pmc_osc_is_ready_mainck+0xc>)
   82166:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82168:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8216c:	4770      	bx	lr
   8216e:	bf00      	nop
   82170:	400e0600 	.word	0x400e0600

00082174 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82174:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82178:	4b01      	ldr	r3, [pc, #4]	; (82180 <pmc_disable_pllack+0xc>)
   8217a:	629a      	str	r2, [r3, #40]	; 0x28
   8217c:	4770      	bx	lr
   8217e:	bf00      	nop
   82180:	400e0600 	.word	0x400e0600

00082184 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82184:	4b02      	ldr	r3, [pc, #8]	; (82190 <pmc_is_locked_pllack+0xc>)
   82186:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82188:	f000 0002 	and.w	r0, r0, #2
   8218c:	4770      	bx	lr
   8218e:	bf00      	nop
   82190:	400e0600 	.word	0x400e0600

00082194 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   82194:	282c      	cmp	r0, #44	; 0x2c
   82196:	d81e      	bhi.n	821d6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   82198:	281f      	cmp	r0, #31
   8219a:	d80c      	bhi.n	821b6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8219c:	4b11      	ldr	r3, [pc, #68]	; (821e4 <pmc_enable_periph_clk+0x50>)
   8219e:	699a      	ldr	r2, [r3, #24]
   821a0:	2301      	movs	r3, #1
   821a2:	4083      	lsls	r3, r0
   821a4:	4393      	bics	r3, r2
   821a6:	d018      	beq.n	821da <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   821a8:	2301      	movs	r3, #1
   821aa:	fa03 f000 	lsl.w	r0, r3, r0
   821ae:	4b0d      	ldr	r3, [pc, #52]	; (821e4 <pmc_enable_periph_clk+0x50>)
   821b0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   821b2:	2000      	movs	r0, #0
   821b4:	4770      	bx	lr
		ul_id -= 32;
   821b6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   821b8:	4b0a      	ldr	r3, [pc, #40]	; (821e4 <pmc_enable_periph_clk+0x50>)
   821ba:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   821be:	2301      	movs	r3, #1
   821c0:	4083      	lsls	r3, r0
   821c2:	4393      	bics	r3, r2
   821c4:	d00b      	beq.n	821de <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   821c6:	2301      	movs	r3, #1
   821c8:	fa03 f000 	lsl.w	r0, r3, r0
   821cc:	4b05      	ldr	r3, [pc, #20]	; (821e4 <pmc_enable_periph_clk+0x50>)
   821ce:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   821d2:	2000      	movs	r0, #0
   821d4:	4770      	bx	lr
		return 1;
   821d6:	2001      	movs	r0, #1
   821d8:	4770      	bx	lr
	return 0;
   821da:	2000      	movs	r0, #0
   821dc:	4770      	bx	lr
   821de:	2000      	movs	r0, #0
}
   821e0:	4770      	bx	lr
   821e2:	bf00      	nop
   821e4:	400e0600 	.word	0x400e0600

000821e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   821e8:	e7fe      	b.n	821e8 <Dummy_Handler>
	...

000821ec <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   821ec:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   821ee:	4b1c      	ldr	r3, [pc, #112]	; (82260 <Reset_Handler+0x74>)
   821f0:	4a1c      	ldr	r2, [pc, #112]	; (82264 <Reset_Handler+0x78>)
   821f2:	429a      	cmp	r2, r3
   821f4:	d010      	beq.n	82218 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   821f6:	4b1c      	ldr	r3, [pc, #112]	; (82268 <Reset_Handler+0x7c>)
   821f8:	4a19      	ldr	r2, [pc, #100]	; (82260 <Reset_Handler+0x74>)
   821fa:	429a      	cmp	r2, r3
   821fc:	d20c      	bcs.n	82218 <Reset_Handler+0x2c>
   821fe:	3b01      	subs	r3, #1
   82200:	1a9b      	subs	r3, r3, r2
   82202:	f023 0303 	bic.w	r3, r3, #3
   82206:	3304      	adds	r3, #4
   82208:	4413      	add	r3, r2
   8220a:	4916      	ldr	r1, [pc, #88]	; (82264 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   8220c:	f851 0b04 	ldr.w	r0, [r1], #4
   82210:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   82214:	429a      	cmp	r2, r3
   82216:	d1f9      	bne.n	8220c <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82218:	4b14      	ldr	r3, [pc, #80]	; (8226c <Reset_Handler+0x80>)
   8221a:	4a15      	ldr	r2, [pc, #84]	; (82270 <Reset_Handler+0x84>)
   8221c:	429a      	cmp	r2, r3
   8221e:	d20a      	bcs.n	82236 <Reset_Handler+0x4a>
   82220:	3b01      	subs	r3, #1
   82222:	1a9b      	subs	r3, r3, r2
   82224:	f023 0303 	bic.w	r3, r3, #3
   82228:	3304      	adds	r3, #4
   8222a:	4413      	add	r3, r2
		*pDest++ = 0;
   8222c:	2100      	movs	r1, #0
   8222e:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   82232:	4293      	cmp	r3, r2
   82234:	d1fb      	bne.n	8222e <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82236:	4b0f      	ldr	r3, [pc, #60]	; (82274 <Reset_Handler+0x88>)
   82238:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   8223c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   82240:	490d      	ldr	r1, [pc, #52]	; (82278 <Reset_Handler+0x8c>)
   82242:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82244:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   82248:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   8224c:	d203      	bcs.n	82256 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8224e:	688b      	ldr	r3, [r1, #8]
   82250:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82254:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82256:	4b09      	ldr	r3, [pc, #36]	; (8227c <Reset_Handler+0x90>)
   82258:	4798      	blx	r3

	/* Branch to main function */
	main();
   8225a:	4b09      	ldr	r3, [pc, #36]	; (82280 <Reset_Handler+0x94>)
   8225c:	4798      	blx	r3
   8225e:	e7fe      	b.n	8225e <Reset_Handler+0x72>
   82260:	20070000 	.word	0x20070000
   82264:	00087144 	.word	0x00087144
   82268:	20070afc 	.word	0x20070afc
   8226c:	2007c5cc 	.word	0x2007c5cc
   82270:	20070b00 	.word	0x20070b00
   82274:	00080000 	.word	0x00080000
   82278:	e000ed00 	.word	0xe000ed00
   8227c:	0008364d 	.word	0x0008364d
   82280:	0008355d 	.word	0x0008355d

00082284 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82284:	4b3d      	ldr	r3, [pc, #244]	; (8237c <SystemCoreClockUpdate+0xf8>)
   82286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82288:	f003 0303 	and.w	r3, r3, #3
   8228c:	2b03      	cmp	r3, #3
   8228e:	d80e      	bhi.n	822ae <SystemCoreClockUpdate+0x2a>
   82290:	e8df f003 	tbb	[pc, r3]
   82294:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82298:	4b39      	ldr	r3, [pc, #228]	; (82380 <SystemCoreClockUpdate+0xfc>)
   8229a:	695b      	ldr	r3, [r3, #20]
   8229c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   822a0:	bf14      	ite	ne
   822a2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   822a6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   822aa:	4b36      	ldr	r3, [pc, #216]	; (82384 <SystemCoreClockUpdate+0x100>)
   822ac:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   822ae:	4b33      	ldr	r3, [pc, #204]	; (8237c <SystemCoreClockUpdate+0xf8>)
   822b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   822b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   822b6:	2b70      	cmp	r3, #112	; 0x70
   822b8:	d057      	beq.n	8236a <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   822ba:	4b30      	ldr	r3, [pc, #192]	; (8237c <SystemCoreClockUpdate+0xf8>)
   822bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   822be:	4931      	ldr	r1, [pc, #196]	; (82384 <SystemCoreClockUpdate+0x100>)
   822c0:	f3c2 1202 	ubfx	r2, r2, #4, #3
   822c4:	680b      	ldr	r3, [r1, #0]
   822c6:	40d3      	lsrs	r3, r2
   822c8:	600b      	str	r3, [r1, #0]
   822ca:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   822cc:	4b2b      	ldr	r3, [pc, #172]	; (8237c <SystemCoreClockUpdate+0xf8>)
   822ce:	6a1b      	ldr	r3, [r3, #32]
   822d0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   822d4:	d003      	beq.n	822de <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   822d6:	4a2c      	ldr	r2, [pc, #176]	; (82388 <SystemCoreClockUpdate+0x104>)
   822d8:	4b2a      	ldr	r3, [pc, #168]	; (82384 <SystemCoreClockUpdate+0x100>)
   822da:	601a      	str	r2, [r3, #0]
   822dc:	e7e7      	b.n	822ae <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   822de:	4a2b      	ldr	r2, [pc, #172]	; (8238c <SystemCoreClockUpdate+0x108>)
   822e0:	4b28      	ldr	r3, [pc, #160]	; (82384 <SystemCoreClockUpdate+0x100>)
   822e2:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   822e4:	4b25      	ldr	r3, [pc, #148]	; (8237c <SystemCoreClockUpdate+0xf8>)
   822e6:	6a1b      	ldr	r3, [r3, #32]
   822e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
   822ec:	2b10      	cmp	r3, #16
   822ee:	d005      	beq.n	822fc <SystemCoreClockUpdate+0x78>
   822f0:	2b20      	cmp	r3, #32
   822f2:	d1dc      	bne.n	822ae <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   822f4:	4a24      	ldr	r2, [pc, #144]	; (82388 <SystemCoreClockUpdate+0x104>)
   822f6:	4b23      	ldr	r3, [pc, #140]	; (82384 <SystemCoreClockUpdate+0x100>)
   822f8:	601a      	str	r2, [r3, #0]
				break;
   822fa:	e7d8      	b.n	822ae <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   822fc:	4a24      	ldr	r2, [pc, #144]	; (82390 <SystemCoreClockUpdate+0x10c>)
   822fe:	4b21      	ldr	r3, [pc, #132]	; (82384 <SystemCoreClockUpdate+0x100>)
   82300:	601a      	str	r2, [r3, #0]
				break;
   82302:	e7d4      	b.n	822ae <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82304:	4b1d      	ldr	r3, [pc, #116]	; (8237c <SystemCoreClockUpdate+0xf8>)
   82306:	6a1b      	ldr	r3, [r3, #32]
   82308:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8230c:	d00c      	beq.n	82328 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8230e:	4a1e      	ldr	r2, [pc, #120]	; (82388 <SystemCoreClockUpdate+0x104>)
   82310:	4b1c      	ldr	r3, [pc, #112]	; (82384 <SystemCoreClockUpdate+0x100>)
   82312:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82314:	4b19      	ldr	r3, [pc, #100]	; (8237c <SystemCoreClockUpdate+0xf8>)
   82316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82318:	f003 0303 	and.w	r3, r3, #3
   8231c:	2b02      	cmp	r3, #2
   8231e:	d016      	beq.n	8234e <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82320:	4a1c      	ldr	r2, [pc, #112]	; (82394 <SystemCoreClockUpdate+0x110>)
   82322:	4b18      	ldr	r3, [pc, #96]	; (82384 <SystemCoreClockUpdate+0x100>)
   82324:	601a      	str	r2, [r3, #0]
   82326:	e7c2      	b.n	822ae <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82328:	4a18      	ldr	r2, [pc, #96]	; (8238c <SystemCoreClockUpdate+0x108>)
   8232a:	4b16      	ldr	r3, [pc, #88]	; (82384 <SystemCoreClockUpdate+0x100>)
   8232c:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8232e:	4b13      	ldr	r3, [pc, #76]	; (8237c <SystemCoreClockUpdate+0xf8>)
   82330:	6a1b      	ldr	r3, [r3, #32]
   82332:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82336:	2b10      	cmp	r3, #16
   82338:	d005      	beq.n	82346 <SystemCoreClockUpdate+0xc2>
   8233a:	2b20      	cmp	r3, #32
   8233c:	d1ea      	bne.n	82314 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   8233e:	4a12      	ldr	r2, [pc, #72]	; (82388 <SystemCoreClockUpdate+0x104>)
   82340:	4b10      	ldr	r3, [pc, #64]	; (82384 <SystemCoreClockUpdate+0x100>)
   82342:	601a      	str	r2, [r3, #0]
				break;
   82344:	e7e6      	b.n	82314 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   82346:	4a12      	ldr	r2, [pc, #72]	; (82390 <SystemCoreClockUpdate+0x10c>)
   82348:	4b0e      	ldr	r3, [pc, #56]	; (82384 <SystemCoreClockUpdate+0x100>)
   8234a:	601a      	str	r2, [r3, #0]
				break;
   8234c:	e7e2      	b.n	82314 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8234e:	4a0b      	ldr	r2, [pc, #44]	; (8237c <SystemCoreClockUpdate+0xf8>)
   82350:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82352:	6a92      	ldr	r2, [r2, #40]	; 0x28
   82354:	480b      	ldr	r0, [pc, #44]	; (82384 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82356:	f3c1 410a 	ubfx	r1, r1, #16, #11
   8235a:	6803      	ldr	r3, [r0, #0]
   8235c:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82360:	b2d2      	uxtb	r2, r2
   82362:	fbb3 f3f2 	udiv	r3, r3, r2
   82366:	6003      	str	r3, [r0, #0]
   82368:	e7a1      	b.n	822ae <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   8236a:	4a06      	ldr	r2, [pc, #24]	; (82384 <SystemCoreClockUpdate+0x100>)
   8236c:	6813      	ldr	r3, [r2, #0]
   8236e:	490a      	ldr	r1, [pc, #40]	; (82398 <SystemCoreClockUpdate+0x114>)
   82370:	fba1 1303 	umull	r1, r3, r1, r3
   82374:	085b      	lsrs	r3, r3, #1
   82376:	6013      	str	r3, [r2, #0]
   82378:	4770      	bx	lr
   8237a:	bf00      	nop
   8237c:	400e0600 	.word	0x400e0600
   82380:	400e1a10 	.word	0x400e1a10
   82384:	20070138 	.word	0x20070138
   82388:	00b71b00 	.word	0x00b71b00
   8238c:	003d0900 	.word	0x003d0900
   82390:	007a1200 	.word	0x007a1200
   82394:	0e4e1c00 	.word	0x0e4e1c00
   82398:	aaaaaaab 	.word	0xaaaaaaab

0008239c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   8239c:	4b0a      	ldr	r3, [pc, #40]	; (823c8 <_sbrk+0x2c>)
   8239e:	681b      	ldr	r3, [r3, #0]
   823a0:	b153      	cbz	r3, 823b8 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   823a2:	4b09      	ldr	r3, [pc, #36]	; (823c8 <_sbrk+0x2c>)
   823a4:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   823a6:	181a      	adds	r2, r3, r0
   823a8:	4908      	ldr	r1, [pc, #32]	; (823cc <_sbrk+0x30>)
   823aa:	4291      	cmp	r1, r2
   823ac:	db08      	blt.n	823c0 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   823ae:	4610      	mov	r0, r2
   823b0:	4a05      	ldr	r2, [pc, #20]	; (823c8 <_sbrk+0x2c>)
   823b2:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   823b4:	4618      	mov	r0, r3
   823b6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   823b8:	4a05      	ldr	r2, [pc, #20]	; (823d0 <_sbrk+0x34>)
   823ba:	4b03      	ldr	r3, [pc, #12]	; (823c8 <_sbrk+0x2c>)
   823bc:	601a      	str	r2, [r3, #0]
   823be:	e7f0      	b.n	823a2 <_sbrk+0x6>
		return (caddr_t) -1;	
   823c0:	f04f 30ff 	mov.w	r0, #4294967295
}
   823c4:	4770      	bx	lr
   823c6:	bf00      	nop
   823c8:	2007acd4 	.word	0x2007acd4
   823cc:	20087ffc 	.word	0x20087ffc
   823d0:	2007e5d0 	.word	0x2007e5d0

000823d4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   823d4:	f04f 30ff 	mov.w	r0, #4294967295
   823d8:	4770      	bx	lr

000823da <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   823da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   823de:	604b      	str	r3, [r1, #4]

	return 0;
}
   823e0:	2000      	movs	r0, #0
   823e2:	4770      	bx	lr

000823e4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   823e4:	2001      	movs	r0, #1
   823e6:	4770      	bx	lr

000823e8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   823e8:	2000      	movs	r0, #0
   823ea:	4770      	bx	lr

000823ec <vTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., NTask) in trcConfig.h is too small.
 ******************************************************************************/
void vTraceError(const char* msg)
{
   823ec:	b510      	push	{r4, lr}
	TRACE_ASSERT(msg != NULL, "vTraceError: msg == NULL", );
   823ee:	b148      	cbz	r0, 82404 <vTraceError+0x18>
   823f0:	4601      	mov	r1, r0
	TRACE_ASSERT(RecorderDataPtr != NULL, "vTraceError: RecorderDataPtr == NULL", );
   823f2:	4b0e      	ldr	r3, [pc, #56]	; (8242c <vTraceError+0x40>)
   823f4:	681c      	ldr	r4, [r3, #0]
   823f6:	b14c      	cbz	r4, 8240c <vTraceError+0x20>

	/* Stop the recorder. Note: We do not call vTraceStop, since that adds a weird
	and unnecessary dependency to trcUser.c */

	RecorderDataPtr->recorderActive = 0;
   823f8:	2300      	movs	r3, #0
   823fa:	6323      	str	r3, [r4, #48]	; 0x30

	if (traceErrorMessage == NULL)
   823fc:	4b0c      	ldr	r3, [pc, #48]	; (82430 <vTraceError+0x44>)
   823fe:	681b      	ldr	r3, [r3, #0]
   82400:	b143      	cbz	r3, 82414 <vTraceError+0x28>
   82402:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(msg != NULL, "vTraceError: msg == NULL", );
   82404:	480b      	ldr	r0, [pc, #44]	; (82434 <vTraceError+0x48>)
   82406:	f7ff fff1 	bl	823ec <vTraceError>
   8240a:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(RecorderDataPtr != NULL, "vTraceError: RecorderDataPtr == NULL", );
   8240c:	480a      	ldr	r0, [pc, #40]	; (82438 <vTraceError+0x4c>)
   8240e:	f7ff ffed 	bl	823ec <vTraceError>
   82412:	bd10      	pop	{r4, pc}
	{
		traceErrorMessage = (char*)msg;
   82414:	4b06      	ldr	r3, [pc, #24]	; (82430 <vTraceError+0x44>)
   82416:	6018      	str	r0, [r3, #0]
		(void)strncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   82418:	2250      	movs	r2, #80	; 0x50
   8241a:	f204 70dc 	addw	r0, r4, #2012	; 0x7dc
   8241e:	4b07      	ldr	r3, [pc, #28]	; (8243c <vTraceError+0x50>)
   82420:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;	 	 
   82422:	2301      	movs	r3, #1
   82424:	f8c4 37d4 	str.w	r3, [r4, #2004]	; 0x7d4
   82428:	e7eb      	b.n	82402 <vTraceError+0x16>
   8242a:	bf00      	nop
   8242c:	2007acd8 	.word	0x2007acd8
   82430:	2007ad80 	.word	0x2007ad80
   82434:	00086510 	.word	0x00086510
   82438:	00086538 	.word	0x00086538
   8243c:	00083a05 	.word	0x00083a05

00082440 <prvTraceInitTraceData>:
{		
   82440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	init_hwtc_count = HWTC_COUNT;
   82444:	4b4d      	ldr	r3, [pc, #308]	; (8257c <prvTraceInitTraceData+0x13c>)
   82446:	681a      	ldr	r2, [r3, #0]
   82448:	4b4d      	ldr	r3, [pc, #308]	; (82580 <prvTraceInitTraceData+0x140>)
   8244a:	681b      	ldr	r3, [r3, #0]
   8244c:	4413      	add	r3, r2
   8244e:	4a4d      	ldr	r2, [pc, #308]	; (82584 <prvTraceInitTraceData+0x144>)
   82450:	6013      	str	r3, [r2, #0]
	RecorderDataPtr = &RecorderData;
   82452:	4d4d      	ldr	r5, [pc, #308]	; (82588 <prvTraceInitTraceData+0x148>)
   82454:	4c4d      	ldr	r4, [pc, #308]	; (8258c <prvTraceInitTraceData+0x14c>)
   82456:	602c      	str	r4, [r5, #0]
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   82458:	f44f 52bf 	mov.w	r2, #6112	; 0x17e0
   8245c:	2100      	movs	r1, #0
   8245e:	4620      	mov	r0, r4
   82460:	4b4b      	ldr	r3, [pc, #300]	; (82590 <prvTraceInitTraceData+0x150>)
   82462:	4798      	blx	r3
	RecorderDataPtr->startmarker1 = 0x01;
   82464:	f04f 0301 	mov.w	r3, #1
   82468:	7063      	strb	r3, [r4, #1]
	RecorderDataPtr->startmarker2 = 0x02;
   8246a:	2302      	movs	r3, #2
   8246c:	70a3      	strb	r3, [r4, #2]
	RecorderDataPtr->startmarker3 = 0x03;
   8246e:	2303      	movs	r3, #3
   82470:	70e3      	strb	r3, [r4, #3]
	RecorderDataPtr->startmarker4 = 0x70;
   82472:	2370      	movs	r3, #112	; 0x70
   82474:	7123      	strb	r3, [r4, #4]
	RecorderDataPtr->startmarker5 = 0x71;
   82476:	f04f 0a71 	mov.w	sl, #113	; 0x71
   8247a:	f884 a005 	strb.w	sl, [r4, #5]
	RecorderDataPtr->startmarker6 = 0x72;
   8247e:	f04f 0972 	mov.w	r9, #114	; 0x72
   82482:	f884 9006 	strb.w	r9, [r4, #6]
	RecorderDataPtr->startmarker7 = 0x73;
   82486:	f04f 0873 	mov.w	r8, #115	; 0x73
   8248a:	f884 8007 	strb.w	r8, [r4, #7]
	RecorderDataPtr->startmarker8 = 0xF0;
   8248e:	23f0      	movs	r3, #240	; 0xf0
   82490:	7223      	strb	r3, [r4, #8]
	RecorderDataPtr->startmarker9 = 0xF1;
   82492:	27f1      	movs	r7, #241	; 0xf1
   82494:	7267      	strb	r7, [r4, #9]
	RecorderDataPtr->startmarker10 = 0xF2;
   82496:	26f2      	movs	r6, #242	; 0xf2
   82498:	72a6      	strb	r6, [r4, #10]
	RecorderDataPtr->startmarker11 = 0xF3;
   8249a:	f04f 0bf3 	mov.w	fp, #243	; 0xf3
   8249e:	f884 b00b 	strb.w	fp, [r4, #11]
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   824a2:	f641 23a1 	movw	r3, #6817	; 0x1aa1
   824a6:	81a3      	strh	r3, [r4, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   824a8:	2304      	movs	r3, #4
   824aa:	73a3      	strb	r3, [r4, #14]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   824ac:	f44f 53bf 	mov.w	r3, #6112	; 0x17e0
   824b0:	6123      	str	r3, [r4, #16]
	RecorderDataPtr->maxEvents = EVENT_BUFFER_SIZE;
   824b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   824b6:	61a3      	str	r3, [r4, #24]
	RecorderDataPtr->debugMarker0 = 0xF0F0F0F0;
   824b8:	f04f 33f0 	mov.w	r3, #4042322160	; 0xf0f0f0f0
   824bc:	6563      	str	r3, [r4, #84]	; 0x54
	vTraceInitObjectPropertyTable();
   824be:	4b35      	ldr	r3, [pc, #212]	; (82594 <prvTraceInitTraceData+0x154>)
   824c0:	4798      	blx	r3
	RecorderDataPtr->debugMarker1 = 0xF1F1F1F1;
   824c2:	682c      	ldr	r4, [r5, #0]
   824c4:	f04f 33f1 	mov.w	r3, #4059165169	; 0xf1f1f1f1
   824c8:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
	RecorderDataPtr->SymbolTable.symTableSize = SYMBOL_TABLE_SIZE;
   824cc:	f44f 7348 	mov.w	r3, #800	; 0x320
   824d0:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   824d4:	2301      	movs	r3, #1
   824d6:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
	RecorderDataPtr->debugMarker2 = 0xF2F2F2F2;
   824da:	f04f 33f2 	mov.w	r3, #4076008178	; 0xf2f2f2f2
   824de:	f8c4 37d8 	str.w	r3, [r4, #2008]	; 0x7d8
	(void)strncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   824e2:	2250      	movs	r2, #80	; 0x50
   824e4:	492c      	ldr	r1, [pc, #176]	; (82598 <prvTraceInitTraceData+0x158>)
   824e6:	f204 70dc 	addw	r0, r4, #2012	; 0x7dc
   824ea:	4b2c      	ldr	r3, [pc, #176]	; (8259c <prvTraceInitTraceData+0x15c>)
   824ec:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = 0xF3F3F3F3;
   824ee:	f04f 33f3 	mov.w	r3, #4092851187	; 0xf3f3f3f3
   824f2:	f8c4 382c 	str.w	r3, [r4, #2092]	; 0x82c
	RecorderDataPtr->endmarker0 = 0x0A;
   824f6:	220a      	movs	r2, #10
   824f8:	f241 73d4 	movw	r3, #6100	; 0x17d4
   824fc:	54e2      	strb	r2, [r4, r3]
	RecorderDataPtr->endmarker1 = 0x0B;
   824fe:	220b      	movs	r2, #11
   82500:	f241 73d5 	movw	r3, #6101	; 0x17d5
   82504:	54e2      	strb	r2, [r4, r3]
	RecorderDataPtr->endmarker2 = 0x0C;
   82506:	220c      	movs	r2, #12
   82508:	f241 73d6 	movw	r3, #6102	; 0x17d6
   8250c:	54e2      	strb	r2, [r4, r3]
	RecorderDataPtr->endmarker3 = 0x0D;
   8250e:	220d      	movs	r2, #13
   82510:	f241 73d7 	movw	r3, #6103	; 0x17d7
   82514:	54e2      	strb	r2, [r4, r3]
	RecorderDataPtr->endmarker4 = 0x71;
   82516:	f241 73d8 	movw	r3, #6104	; 0x17d8
   8251a:	f804 a003 	strb.w	sl, [r4, r3]
	RecorderDataPtr->endmarker5 = 0x72;
   8251e:	f241 73d9 	movw	r3, #6105	; 0x17d9
   82522:	f804 9003 	strb.w	r9, [r4, r3]
	RecorderDataPtr->endmarker6 = 0x73;
   82526:	f241 73da 	movw	r3, #6106	; 0x17da
   8252a:	f804 8003 	strb.w	r8, [r4, r3]
	RecorderDataPtr->endmarker7 = 0x74;
   8252e:	2274      	movs	r2, #116	; 0x74
   82530:	f241 73db 	movw	r3, #6107	; 0x17db
   82534:	54e2      	strb	r2, [r4, r3]
	RecorderDataPtr->endmarker8 = 0xF1;
   82536:	f241 73dc 	movw	r3, #6108	; 0x17dc
   8253a:	54e7      	strb	r7, [r4, r3]
	RecorderDataPtr->endmarker9 = 0xF2;
   8253c:	f241 73dd 	movw	r3, #6109	; 0x17dd
   82540:	54e6      	strb	r6, [r4, r3]
	RecorderDataPtr->endmarker10 = 0xF3;
   82542:	f241 73de 	movw	r3, #6110	; 0x17de
   82546:	f804 b003 	strb.w	fp, [r4, r3]
	RecorderDataPtr->endmarker11 = 0xF4;
   8254a:	22f4      	movs	r2, #244	; 0xf4
   8254c:	f241 73df 	movw	r3, #6111	; 0x17df
   82550:	54e2      	strb	r2, [r4, r3]
	vTraceInitObjectHandleStack();
   82552:	4b13      	ldr	r3, [pc, #76]	; (825a0 <prvTraceInitTraceData+0x160>)
   82554:	4798      	blx	r3
	uint8_t *ptr = (uint8_t*)&(RecorderDataPtr->startmarker0);
   82556:	6829      	ldr	r1, [r5, #0]
	if ((*ptr) == 0)
   82558:	780b      	ldrb	r3, [r1, #0]
   8255a:	b95b      	cbnz	r3, 82574 <prvTraceInitTraceData+0x134>
   8255c:	1e4b      	subs	r3, r1, #1
   8255e:	310b      	adds	r1, #11
			ptr[i] += 1;
   82560:	785a      	ldrb	r2, [r3, #1]
   82562:	3201      	adds	r2, #1
   82564:	f803 2f01 	strb.w	r2, [r3, #1]!
		for (i = 0; i < 12; i++)
   82568:	428b      	cmp	r3, r1
   8256a:	d1f9      	bne.n	82560 <prvTraceInitTraceData+0x120>
	PORT_SPECIFIC_INIT();
   8256c:	4b0d      	ldr	r3, [pc, #52]	; (825a4 <prvTraceInitTraceData+0x164>)
   8256e:	4798      	blx	r3
   82570:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vTraceError("Trace start markers already initialized!");
   82574:	480c      	ldr	r0, [pc, #48]	; (825a8 <prvTraceInitTraceData+0x168>)
   82576:	4b0d      	ldr	r3, [pc, #52]	; (825ac <prvTraceInitTraceData+0x16c>)
   82578:	4798      	blx	r3
   8257a:	e7f7      	b.n	8256c <prvTraceInitTraceData+0x12c>
   8257c:	e0001004 	.word	0xe0001004
   82580:	2007ad84 	.word	0x2007ad84
   82584:	2007c5c4 	.word	0x2007c5c4
   82588:	2007acd8 	.word	0x2007acd8
   8258c:	2007ade4 	.word	0x2007ade4
   82590:	000837b1 	.word	0x000837b1
   82594:	00083121 	.word	0x00083121
   82598:	00086450 	.word	0x00086450
   8259c:	00083a05 	.word	0x00083a05
   825a0:	000831cd 	.word	0x000831cd
   825a4:	000829d9 	.word	0x000829d9
   825a8:	00086464 	.word	0x00086464
   825ac:	000823ed 	.word	0x000823ed

000825b0 <xTraceNextFreeEventBufferSlot>:
{
   825b0:	b508      	push	{r3, lr}
	if (! RecorderDataPtr->recorderActive)
   825b2:	4b0a      	ldr	r3, [pc, #40]	; (825dc <xTraceNextFreeEventBufferSlot+0x2c>)
   825b4:	6818      	ldr	r0, [r3, #0]
   825b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
   825b8:	b16b      	cbz	r3, 825d6 <xTraceNextFreeEventBufferSlot+0x26>
	if (RecorderDataPtr->nextFreeIndex >= EVENT_BUFFER_SIZE)
   825ba:	69c3      	ldr	r3, [r0, #28]
   825bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   825c0:	d204      	bcs.n	825cc <xTraceNextFreeEventBufferSlot+0x1c>
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   825c2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   825c6:	f500 6003 	add.w	r0, r0, #2096	; 0x830
   825ca:	bd08      	pop	{r3, pc}
		vTraceError("Attempt to index outside event buffer!");
   825cc:	4804      	ldr	r0, [pc, #16]	; (825e0 <xTraceNextFreeEventBufferSlot+0x30>)
   825ce:	4b05      	ldr	r3, [pc, #20]	; (825e4 <xTraceNextFreeEventBufferSlot+0x34>)
   825d0:	4798      	blx	r3
		return NULL;
   825d2:	2000      	movs	r0, #0
   825d4:	bd08      	pop	{r3, pc}
		return NULL;
   825d6:	2000      	movs	r0, #0
}
   825d8:	bd08      	pop	{r3, pc}
   825da:	bf00      	nop
   825dc:	2007acd8 	.word	0x2007acd8
   825e0:	00086638 	.word	0x00086638
   825e4:	000823ed 	.word	0x000823ed

000825e8 <uiIndexOfObject>:
{
   825e8:	b508      	push	{r3, lr}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   825ea:	2906      	cmp	r1, #6
   825ec:	d813      	bhi.n	82616 <uiIndexOfObject+0x2e>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   825ee:	b1b8      	cbz	r0, 82620 <uiIndexOfObject+0x38>
   825f0:	4b0e      	ldr	r3, [pc, #56]	; (8262c <uiIndexOfObject+0x44>)
   825f2:	681b      	ldr	r3, [r3, #0]
   825f4:	185a      	adds	r2, r3, r1
   825f6:	f892 2064 	ldrb.w	r2, [r2, #100]	; 0x64
   825fa:	4282      	cmp	r2, r0
   825fc:	d310      	bcc.n	82620 <uiIndexOfObject+0x38>
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   825fe:	185a      	adds	r2, r3, r1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   82600:	f892 2074 	ldrb.w	r2, [r2, #116]	; 0x74
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   82604:	3801      	subs	r0, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   82606:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   8260a:	f8b1 307c 	ldrh.w	r3, [r1, #124]	; 0x7c
   8260e:	fb02 3000 	mla	r0, r2, r0, r3
   82612:	b280      	uxth	r0, r0
}
   82614:	bd08      	pop	{r3, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   82616:	4806      	ldr	r0, [pc, #24]	; (82630 <uiIndexOfObject+0x48>)
   82618:	4b06      	ldr	r3, [pc, #24]	; (82634 <uiIndexOfObject+0x4c>)
   8261a:	4798      	blx	r3
   8261c:	2000      	movs	r0, #0
   8261e:	bd08      	pop	{r3, pc}
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   82620:	4805      	ldr	r0, [pc, #20]	; (82638 <uiIndexOfObject+0x50>)
   82622:	4b04      	ldr	r3, [pc, #16]	; (82634 <uiIndexOfObject+0x4c>)
   82624:	4798      	blx	r3
   82626:	2000      	movs	r0, #0
   82628:	bd08      	pop	{r3, pc}
   8262a:	bf00      	nop
   8262c:	2007acd8 	.word	0x2007acd8
   82630:	00086490 	.word	0x00086490
   82634:	000823ed 	.word	0x000823ed
   82638:	000864d0 	.word	0x000864d0

0008263c <xTraceGetObjectHandle>:
{
   8263c:	b510      	push	{r4, lr}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   8263e:	2806      	cmp	r0, #6
   82640:	d833      	bhi.n	826aa <xTraceGetObjectHandle+0x6e>
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   82642:	4a46      	ldr	r2, [pc, #280]	; (8275c <xTraceGetObjectHandle+0x120>)
   82644:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   82648:	441a      	add	r2, r3
   8264a:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   8264e:	b942      	cbnz	r2, 82662 <xTraceGetObjectHandle+0x26>
		objectHandleStacks.objectHandles[indexOfHandle] =
   82650:	4942      	ldr	r1, [pc, #264]	; (8275c <xTraceGetObjectHandle+0x120>)
   82652:	18cc      	adds	r4, r1, r3
			(objectHandleType)(1 + indexOfHandle -
   82654:	1c5a      	adds	r2, r3, #1
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   82656:	eb01 0140 	add.w	r1, r1, r0, lsl #1
			(objectHandleType)(1 + indexOfHandle -
   8265a:	7b89      	ldrb	r1, [r1, #14]
   8265c:	1a52      	subs	r2, r2, r1
		objectHandleStacks.objectHandles[indexOfHandle] =
   8265e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
		> objectHandleStacks.highestIndexOfClass[objectclass])
   82662:	4a3e      	ldr	r2, [pc, #248]	; (8275c <xTraceGetObjectHandle+0x120>)
   82664:	eb02 0240 	add.w	r2, r2, r0, lsl #1
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   82668:	8b92      	ldrh	r2, [r2, #28]
   8266a:	429a      	cmp	r2, r3
   8266c:	d323      	bcc.n	826b6 <xTraceGetObjectHandle+0x7a>
	handle = objectHandleStacks.objectHandles[indexOfHandle];
   8266e:	4a3b      	ldr	r2, [pc, #236]	; (8275c <xTraceGetObjectHandle+0x120>)
   82670:	18d1      	adds	r1, r2, r3
   82672:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   82676:	3301      	adds	r3, #1
   82678:	b29b      	uxth	r3, r3
   8267a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
			objectHandleStacks.lowestIndexOfClass[objectclass];
   8267e:	eb02 0440 	add.w	r4, r2, r0, lsl #1
   82682:	89e4      	ldrh	r4, [r4, #14]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   82684:	1b1b      	subs	r3, r3, r4
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   82686:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   8268a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
		if (hndCount >
   8268c:	4293      	cmp	r3, r2
   8268e:	dd04      	ble.n	8269a <xTraceGetObjectHandle+0x5e>
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   82690:	4a32      	ldr	r2, [pc, #200]	; (8275c <xTraceGetObjectHandle+0x120>)
   82692:	eb02 0240 	add.w	r2, r2, r0, lsl #1
				(objectHandleType)hndCount;
   82696:	b2db      	uxtb	r3, r3
   82698:	8553      	strh	r3, [r2, #42]	; 0x2a
		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
   8269a:	2806      	cmp	r0, #6
   8269c:	d809      	bhi.n	826b2 <xTraceGetObjectHandle+0x76>
   8269e:	e8df f000 	tbb	[pc, r0]
   826a2:	1c10      	.short	0x1c10
   826a4:	43083629 	.word	0x43083629
   826a8:	50          	.byte	0x50
   826a9:	00          	.byte	0x00
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   826aa:	482d      	ldr	r0, [pc, #180]	; (82760 <xTraceGetObjectHandle+0x124>)
   826ac:	4b2d      	ldr	r3, [pc, #180]	; (82764 <xTraceGetObjectHandle+0x128>)
   826ae:	4798      	blx	r3
   826b0:	2100      	movs	r1, #0
}
   826b2:	4608      	mov	r0, r1
   826b4:	bd10      	pop	{r4, pc}
		vTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   826b6:	4b2c      	ldr	r3, [pc, #176]	; (82768 <xTraceGetObjectHandle+0x12c>)
   826b8:	4798      	blx	r3
   826ba:	4b2a      	ldr	r3, [pc, #168]	; (82764 <xTraceGetObjectHandle+0x128>)
   826bc:	4798      	blx	r3
		handle = 0; /* an invalid/anonymous handle - but the recorder is stopped now... */
   826be:	2100      	movs	r1, #0
   826c0:	e7f7      	b.n	826b2 <xTraceGetObjectHandle+0x76>
		TRACE_CLEAR_OBJECT_FLAG_ISEXCLUDED(objectclass, handle);
   826c2:	08cb      	lsrs	r3, r1, #3
   826c4:	4c29      	ldr	r4, [pc, #164]	; (8276c <xTraceGetObjectHandle+0x130>)
   826c6:	f001 0007 	and.w	r0, r1, #7
   826ca:	2201      	movs	r2, #1
   826cc:	fa02 f000 	lsl.w	r0, r2, r0
   826d0:	5ce2      	ldrb	r2, [r4, r3]
   826d2:	ea22 0200 	bic.w	r2, r2, r0
   826d6:	54e2      	strb	r2, [r4, r3]
   826d8:	e7eb      	b.n	826b2 <xTraceGetObjectHandle+0x76>
   826da:	f101 030b 	add.w	r3, r1, #11
   826de:	10d8      	asrs	r0, r3, #3
   826e0:	4c22      	ldr	r4, [pc, #136]	; (8276c <xTraceGetObjectHandle+0x130>)
   826e2:	f003 0307 	and.w	r3, r3, #7
   826e6:	2201      	movs	r2, #1
   826e8:	409a      	lsls	r2, r3
   826ea:	5c23      	ldrb	r3, [r4, r0]
   826ec:	ea23 0302 	bic.w	r3, r3, r2
   826f0:	5423      	strb	r3, [r4, r0]
   826f2:	e7de      	b.n	826b2 <xTraceGetObjectHandle+0x76>
   826f4:	f101 0316 	add.w	r3, r1, #22
   826f8:	10d8      	asrs	r0, r3, #3
   826fa:	4c1c      	ldr	r4, [pc, #112]	; (8276c <xTraceGetObjectHandle+0x130>)
   826fc:	f003 0307 	and.w	r3, r3, #7
   82700:	2201      	movs	r2, #1
   82702:	409a      	lsls	r2, r3
   82704:	5c23      	ldrb	r3, [r4, r0]
   82706:	ea23 0302 	bic.w	r3, r3, r2
   8270a:	5423      	strb	r3, [r4, r0]
   8270c:	e7d1      	b.n	826b2 <xTraceGetObjectHandle+0x76>
   8270e:	f101 0321 	add.w	r3, r1, #33	; 0x21
   82712:	10d8      	asrs	r0, r3, #3
   82714:	4c15      	ldr	r4, [pc, #84]	; (8276c <xTraceGetObjectHandle+0x130>)
   82716:	f003 0307 	and.w	r3, r3, #7
   8271a:	2201      	movs	r2, #1
   8271c:	409a      	lsls	r2, r3
   8271e:	5c23      	ldrb	r3, [r4, r0]
   82720:	ea23 0302 	bic.w	r3, r3, r2
   82724:	5423      	strb	r3, [r4, r0]
   82726:	e7c4      	b.n	826b2 <xTraceGetObjectHandle+0x76>
   82728:	f101 0331 	add.w	r3, r1, #49	; 0x31
   8272c:	10d8      	asrs	r0, r3, #3
   8272e:	4c0f      	ldr	r4, [pc, #60]	; (8276c <xTraceGetObjectHandle+0x130>)
   82730:	f003 0307 	and.w	r3, r3, #7
   82734:	2201      	movs	r2, #1
   82736:	409a      	lsls	r2, r3
   82738:	5c23      	ldrb	r3, [r4, r0]
   8273a:	ea23 0302 	bic.w	r3, r3, r2
   8273e:	5423      	strb	r3, [r4, r0]
   82740:	e7b7      	b.n	826b2 <xTraceGetObjectHandle+0x76>
   82742:	f101 0334 	add.w	r3, r1, #52	; 0x34
   82746:	10d8      	asrs	r0, r3, #3
   82748:	4c08      	ldr	r4, [pc, #32]	; (8276c <xTraceGetObjectHandle+0x130>)
   8274a:	f003 0307 	and.w	r3, r3, #7
   8274e:	2201      	movs	r2, #1
   82750:	409a      	lsls	r2, r3
   82752:	5c23      	ldrb	r3, [r4, r0]
   82754:	ea23 0302 	bic.w	r3, r3, r2
   82758:	5423      	strb	r3, [r4, r0]
   8275a:	e7aa      	b.n	826b2 <xTraceGetObjectHandle+0x76>
   8275c:	2007ad08 	.word	0x2007ad08
   82760:	000865f4 	.word	0x000865f4
   82764:	000823ed 	.word	0x000823ed
   82768:	0008321d 	.word	0x0008321d
   8276c:	2007ad00 	.word	0x2007ad00

00082770 <vTraceSetObjectName>:
{
   82770:	b538      	push	{r3, r4, r5, lr}
	TRACE_ASSERT(name != NULL, "vTraceSetObjectName: name == NULL", );
   82772:	b19a      	cbz	r2, 8279c <vTraceSetObjectName+0x2c>
   82774:	4604      	mov	r4, r0
   82776:	4608      	mov	r0, r1
   82778:	4615      	mov	r5, r2
	if (objectclass >= TRACE_NCLASSES)
   8277a:	2c06      	cmp	r4, #6
   8277c:	d812      	bhi.n	827a4 <vTraceSetObjectName+0x34>
	if (handle == 0)
   8277e:	b1a9      	cbz	r1, 827ac <vTraceSetObjectName+0x3c>
	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   82780:	4b15      	ldr	r3, [pc, #84]	; (827d8 <vTraceSetObjectName+0x68>)
   82782:	681b      	ldr	r3, [r3, #0]
   82784:	4423      	add	r3, r4
   82786:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   8278a:	428b      	cmp	r3, r1
   8278c:	d312      	bcc.n	827b4 <vTraceSetObjectName+0x44>
		idx = uiIndexOfObject(handle, objectclass);
   8278e:	4621      	mov	r1, r4
   82790:	4b12      	ldr	r3, [pc, #72]	; (827dc <vTraceSetObjectName+0x6c>)
   82792:	4798      	blx	r3
		if (traceErrorMessage == NULL)
   82794:	4b12      	ldr	r3, [pc, #72]	; (827e0 <vTraceSetObjectName+0x70>)
   82796:	681b      	ldr	r3, [r3, #0]
   82798:	b193      	cbz	r3, 827c0 <vTraceSetObjectName+0x50>
   8279a:	bd38      	pop	{r3, r4, r5, pc}
	TRACE_ASSERT(name != NULL, "vTraceSetObjectName: name == NULL", );
   8279c:	4811      	ldr	r0, [pc, #68]	; (827e4 <vTraceSetObjectName+0x74>)
   8279e:	4b12      	ldr	r3, [pc, #72]	; (827e8 <vTraceSetObjectName+0x78>)
   827a0:	4798      	blx	r3
   827a2:	bd38      	pop	{r3, r4, r5, pc}
		vTraceError("Illegal object class in vTraceSetObjectName");
   827a4:	4811      	ldr	r0, [pc, #68]	; (827ec <vTraceSetObjectName+0x7c>)
   827a6:	4b10      	ldr	r3, [pc, #64]	; (827e8 <vTraceSetObjectName+0x78>)
   827a8:	4798      	blx	r3
		return;
   827aa:	bd38      	pop	{r3, r4, r5, pc}
		vTraceError("Illegal handle (0) in vTraceSetObjectName.");
   827ac:	4810      	ldr	r0, [pc, #64]	; (827f0 <vTraceSetObjectName+0x80>)
   827ae:	4b0e      	ldr	r3, [pc, #56]	; (827e8 <vTraceSetObjectName+0x78>)
   827b0:	4798      	blx	r3
		return;
   827b2:	bd38      	pop	{r3, r4, r5, pc}
		vTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   827b4:	4620      	mov	r0, r4
   827b6:	4b0f      	ldr	r3, [pc, #60]	; (827f4 <vTraceSetObjectName+0x84>)
   827b8:	4798      	blx	r3
   827ba:	4b0b      	ldr	r3, [pc, #44]	; (827e8 <vTraceSetObjectName+0x78>)
   827bc:	4798      	blx	r3
   827be:	bd38      	pop	{r3, r4, r5, pc}
			(void)strncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   827c0:	4b05      	ldr	r3, [pc, #20]	; (827d8 <vTraceSetObjectName+0x68>)
   827c2:	681b      	ldr	r3, [r3, #0]
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   827c4:	441c      	add	r4, r3
			(void)strncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   827c6:	308c      	adds	r0, #140	; 0x8c
   827c8:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
   827cc:	4629      	mov	r1, r5
   827ce:	4418      	add	r0, r3
   827d0:	4b09      	ldr	r3, [pc, #36]	; (827f8 <vTraceSetObjectName+0x88>)
   827d2:	4798      	blx	r3
   827d4:	e7e1      	b.n	8279a <vTraceSetObjectName+0x2a>
   827d6:	bf00      	nop
   827d8:	2007acd8 	.word	0x2007acd8
   827dc:	000825e9 	.word	0x000825e9
   827e0:	2007ad80 	.word	0x2007ad80
   827e4:	0008656c 	.word	0x0008656c
   827e8:	000823ed 	.word	0x000823ed
   827ec:	0008659c 	.word	0x0008659c
   827f0:	000865c8 	.word	0x000865c8
   827f4:	0008321d 	.word	0x0008321d
   827f8:	00083a05 	.word	0x00083a05

000827fc <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 *
 * This is assumed to execute within a critical section...
 *****************************************************************************/

void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   827fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
	unsigned int e = 0;

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   82800:	b148      	cbz	r0, 82816 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1a>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", );

	while (i < nofEntriesToCheck)
   82802:	4605      	mov	r5, r0
   82804:	b128      	cbz	r0, 82812 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x16>
   82806:	2400      	movs	r4, #0
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   82808:	4e20      	ldr	r6, [pc, #128]	; (8288c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x90>)
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   8280a:	4627      	mov	r7, r4
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4 * nDataEvents);
   8280c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 82898 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x9c>
   82810:	e00b      	b.n	8282a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x2e>
   82812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	TRACE_ASSERT(nofEntriesToCheck != 0, 
   82816:	481e      	ldr	r0, [pc, #120]	; (82890 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x94>)
   82818:	4b1e      	ldr	r3, [pc, #120]	; (82894 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x98>)
   8281a:	4798      	blx	r3
   8281c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   82820:	2a01      	cmp	r2, #1
   82822:	d01e      	beq.n	82862 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x66>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
			}
		}
		i++;
   82824:	3401      	adds	r4, #1
	while (i < nofEntriesToCheck)
   82826:	42ac      	cmp	r4, r5
   82828:	d02e      	beq.n	82888 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x8c>
		e = RecorderDataPtr->nextFreeIndex + i;
   8282a:	6830      	ldr	r0, [r6, #0]
   8282c:	69c3      	ldr	r3, [r0, #28]
   8282e:	4423      	add	r3, r4
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   82830:	ea4f 0e83 	mov.w	lr, r3, lsl #2
   82834:	eb00 020e 	add.w	r2, r0, lr
   82838:	f892 2830 	ldrb.w	r2, [r2, #2096]	; 0x830
   8283c:	f102 0167 	add.w	r1, r2, #103	; 0x67
   82840:	b2c9      	uxtb	r1, r1
   82842:	290e      	cmp	r1, #14
   82844:	d8ec      	bhi.n	82820 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x24>
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   82846:	3268      	adds	r2, #104	; 0x68
   82848:	b2d2      	uxtb	r2, r2
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   8284a:	4413      	add	r3, r2
   8284c:	6981      	ldr	r1, [r0, #24]
   8284e:	428b      	cmp	r3, r1
   82850:	d2e8      	bcs.n	82824 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4 * nDataEvents);
   82852:	3201      	adds	r2, #1
   82854:	f50e 6e03 	add.w	lr, lr, #2096	; 0x830
   82858:	0092      	lsls	r2, r2, #2
   8285a:	4639      	mov	r1, r7
   8285c:	4470      	add	r0, lr
   8285e:	47c0      	blx	r8
   82860:	e7e0      	b.n	82824 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
			if ((e + 1) < RecorderDataPtr->maxEvents)
   82862:	3301      	adds	r3, #1
   82864:	6982      	ldr	r2, [r0, #24]
   82866:	4293      	cmp	r3, r2
   82868:	d207      	bcs.n	8287a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x7e>
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   8286a:	f50e 6e03 	add.w	lr, lr, #2096	; 0x830
   8286e:	eb00 030e 	add.w	r3, r0, lr
   82872:	f840 700e 	str.w	r7, [r0, lr]
   82876:	605f      	str	r7, [r3, #4]
   82878:	e7d4      	b.n	82824 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   8287a:	f8c0 7830 	str.w	r7, [r0, #2096]	; 0x830
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   8287e:	f50e 6e03 	add.w	lr, lr, #2096	; 0x830
   82882:	f840 700e 	str.w	r7, [r0, lr]
   82886:	e7cd      	b.n	82824 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
   82888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8288c:	2007acd8 	.word	0x2007acd8
   82890:	00086394 	.word	0x00086394
   82894:	000823ed 	.word	0x000823ed
   82898:	000837b1 	.word	0x000837b1

0008289c <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   8289c:	b508      	push	{r3, lr}
	if (RecorderDataPtr->recorderActive == 0)
   8289e:	4b0a      	ldr	r3, [pc, #40]	; (828c8 <prvTraceUpdateCounters+0x2c>)
   828a0:	681b      	ldr	r3, [r3, #0]
   828a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   828a4:	b17a      	cbz	r2, 828c6 <prvTraceUpdateCounters+0x2a>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   828a6:	695a      	ldr	r2, [r3, #20]
   828a8:	3201      	adds	r2, #1
   828aa:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   828ac:	69da      	ldr	r2, [r3, #28]
   828ae:	3201      	adds	r2, #1
   828b0:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= EVENT_BUFFER_SIZE)
   828b2:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   828b6:	d303      	bcc.n	828c0 <prvTraceUpdateCounters+0x24>
	{
#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   828b8:	2201      	movs	r2, #1
   828ba:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   828bc:	2200      	movs	r2, #0
   828be:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRACE_RECORDER_STORE_MODE == TRACE_STORE_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   828c0:	2001      	movs	r0, #1
   828c2:	4b02      	ldr	r3, [pc, #8]	; (828cc <prvTraceUpdateCounters+0x30>)
   828c4:	4798      	blx	r3
   828c6:	bd08      	pop	{r3, pc}
   828c8:	2007acd8 	.word	0x2007acd8
   828cc:	000827fd 	.word	0x000827fd

000828d0 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   828d0:	b530      	push	{r4, r5, lr}
   828d2:	b083      	sub	sp, #12
   828d4:	4604      	mov	r4, r0
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
	uint32_t dts = 0;
	uint32_t timestamp = 0;
   828d6:	2300      	movs	r3, #0
   828d8:	9301      	str	r3, [sp, #4]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   828da:	28ff      	cmp	r0, #255	; 0xff
   828dc:	d003      	beq.n	828e6 <prvTraceGetDTS+0x16>
   828de:	f64f 73ff 	movw	r3, #65535	; 0xffff
   828e2:	4298      	cmp	r0, r3
   828e4:	d132      	bne.n	8294c <prvTraceGetDTS+0x7c>

	if (RecorderDataPtr->frequency == 0 && init_hwtc_count != HWTC_COUNT)
   828e6:	4b30      	ldr	r3, [pc, #192]	; (829a8 <prvTraceGetDTS+0xd8>)
   828e8:	681b      	ldr	r3, [r3, #0]
   828ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   828ec:	b952      	cbnz	r2, 82904 <prvTraceGetDTS+0x34>
   828ee:	4a2f      	ldr	r2, [pc, #188]	; (829ac <prvTraceGetDTS+0xdc>)
   828f0:	6812      	ldr	r2, [r2, #0]
   828f2:	492f      	ldr	r1, [pc, #188]	; (829b0 <prvTraceGetDTS+0xe0>)
   828f4:	6809      	ldr	r1, [r1, #0]
   828f6:	440a      	add	r2, r1
   828f8:	492e      	ldr	r1, [pc, #184]	; (829b4 <prvTraceGetDTS+0xe4>)
   828fa:	6809      	ldr	r1, [r1, #0]
   828fc:	428a      	cmp	r2, r1
#if (SELECTED_PORT == PORT_Win32)
		RecorderDataPtr->frequency = 100000;
#elif (SELECTED_PORT == PORT_HWIndependent)
		RecorderDataPtr->frequency = TRACE_TICK_RATE_HZ;
#else
		RecorderDataPtr->frequency = TRACE_CPU_CLOCK_HZ / HWTC_DIVISOR;//(HWTC_PERIOD * TRACE_TICK_RATE_HZ) / (uint32_t)HWTC_DIVISOR;
   828fe:	bf1c      	itt	ne
   82900:	4a2d      	ldrne	r2, [pc, #180]	; (829b8 <prvTraceGetDTS+0xe8>)
   82902:	625a      	strne	r2, [r3, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	vTracePortGetTimeStamp(&timestamp);	
   82904:	a801      	add	r0, sp, #4
   82906:	4b2d      	ldr	r3, [pc, #180]	; (829bc <prvTraceGetDTS+0xec>)
   82908:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   8290a:	9a01      	ldr	r2, [sp, #4]
   8290c:	4b2c      	ldr	r3, [pc, #176]	; (829c0 <prvTraceGetDTS+0xf0>)
   8290e:	6818      	ldr	r0, [r3, #0]
   82910:	1a15      	subs	r5, r2, r0
	old_timestamp = timestamp;
   82912:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   82914:	4b24      	ldr	r3, [pc, #144]	; (829a8 <prvTraceGetDTS+0xd8>)
   82916:	681b      	ldr	r3, [r3, #0]
   82918:	6a59      	ldr	r1, [r3, #36]	; 0x24
   8291a:	b301      	cbz	r1, 8295e <prvTraceGetDTS+0x8e>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   8291c:	428d      	cmp	r5, r1
   8291e:	d91a      	bls.n	82956 <prvTraceGetDTS+0x86>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   82920:	fbb5 f2f1 	udiv	r2, r5, r1
   82924:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   82926:	4410      	add	r0, r2
   82928:	62d8      	str	r0, [r3, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   8292a:	fb01 5112 	mls	r1, r1, r2, r5
   8292e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   82930:	4411      	add	r1, r2
   82932:	6299      	str	r1, [r3, #40]	; 0x28
		{
			RecorderDataPtr->absTimeLastEvent += dts;
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   82934:	4b1c      	ldr	r3, [pc, #112]	; (829a8 <prvTraceGetDTS+0xd8>)
   82936:	681b      	ldr	r3, [r3, #0]
   82938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   8293a:	6a59      	ldr	r1, [r3, #36]	; 0x24
   8293c:	428a      	cmp	r2, r1
   8293e:	d30f      	bcc.n	82960 <prvTraceGetDTS+0x90>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   82940:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   82942:	3001      	adds	r0, #1
   82944:	62d8      	str	r0, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   82946:	1a52      	subs	r2, r2, r1
   82948:	629a      	str	r2, [r3, #40]	; 0x28
   8294a:	e009      	b.n	82960 <prvTraceGetDTS+0x90>
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   8294c:	481d      	ldr	r0, [pc, #116]	; (829c4 <prvTraceGetDTS+0xf4>)
   8294e:	4b1e      	ldr	r3, [pc, #120]	; (829c8 <prvTraceGetDTS+0xf8>)
   82950:	4798      	blx	r3
   82952:	2000      	movs	r0, #0
   82954:	e008      	b.n	82968 <prvTraceGetDTS+0x98>
			RecorderDataPtr->absTimeLastEvent += dts;
   82956:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   82958:	442a      	add	r2, r5
   8295a:	629a      	str	r2, [r3, #40]	; 0x28
   8295c:	e7ea      	b.n	82934 <prvTraceGetDTS+0x64>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   8295e:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   82960:	42a5      	cmp	r5, r4
   82962:	d803      	bhi.n	8296c <prvTraceGetDTS+0x9c>
			}
			prvTraceUpdateCounters();
		}
	}

	return (uint16_t)dts & param_maxDTS;
   82964:	ea04 0005 	and.w	r0, r4, r5
}
   82968:	b003      	add	sp, #12
   8296a:	bd30      	pop	{r4, r5, pc}
		xts = (XTSEvent*) xTraceNextFreeEventBufferSlot();
   8296c:	4b17      	ldr	r3, [pc, #92]	; (829cc <prvTraceGetDTS+0xfc>)
   8296e:	4798      	blx	r3
		if (xts != NULL)
   82970:	2800      	cmp	r0, #0
   82972:	d0f7      	beq.n	82964 <prvTraceGetDTS+0x94>
			if (param_maxDTS == 0xFFFF)
   82974:	f64f 72ff 	movw	r2, #65535	; 0xffff
   82978:	4294      	cmp	r4, r2
   8297a:	d007      	beq.n	8298c <prvTraceGetDTS+0xbc>
			else if (param_maxDTS == 0xFF)
   8297c:	2cff      	cmp	r4, #255	; 0xff
   8297e:	d00c      	beq.n	8299a <prvTraceGetDTS+0xca>
				vTraceError("Bad param_maxDTS in prvTraceGetDTS");
   82980:	4813      	ldr	r0, [pc, #76]	; (829d0 <prvTraceGetDTS+0x100>)
   82982:	4b11      	ldr	r3, [pc, #68]	; (829c8 <prvTraceGetDTS+0xf8>)
   82984:	4798      	blx	r3
			prvTraceUpdateCounters();
   82986:	4b13      	ldr	r3, [pc, #76]	; (829d4 <prvTraceGetDTS+0x104>)
   82988:	4798      	blx	r3
   8298a:	e7eb      	b.n	82964 <prvTraceGetDTS+0x94>
				xts->type = XTS16;
   8298c:	22a9      	movs	r2, #169	; 0xa9
   8298e:	7002      	strb	r2, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   82990:	0c2a      	lsrs	r2, r5, #16
   82992:	8042      	strh	r2, [r0, #2]
				xts->xts_8 = 0;
   82994:	2200      	movs	r2, #0
   82996:	7042      	strb	r2, [r0, #1]
   82998:	e7f5      	b.n	82986 <prvTraceGetDTS+0xb6>
				xts->type = XTS8;
   8299a:	22a8      	movs	r2, #168	; 0xa8
   8299c:	7002      	strb	r2, [r0, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   8299e:	0a2a      	lsrs	r2, r5, #8
   829a0:	8042      	strh	r2, [r0, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   829a2:	0e2a      	lsrs	r2, r5, #24
   829a4:	7042      	strb	r2, [r0, #1]
   829a6:	e7ee      	b.n	82986 <prvTraceGetDTS+0xb6>
   829a8:	2007acd8 	.word	0x2007acd8
   829ac:	e0001004 	.word	0xe0001004
   829b0:	2007ad84 	.word	0x2007ad84
   829b4:	2007c5c4 	.word	0x2007c5c4
   829b8:	01406f40 	.word	0x01406f40
   829bc:	00082a2d 	.word	0x00082a2d
   829c0:	2007ad78 	.word	0x2007ad78
   829c4:	000863ec 	.word	0x000863ec
   829c8:	000823ed 	.word	0x000823ed
   829cc:	000825b1 	.word	0x000825b1
   829d0:	0008642c 	.word	0x0008642c
   829d4:	0008289d 	.word	0x0008289d

000829d8 <prvTraceInitCortexM>:
uint32_t DWT_CYCLES_ADDED = 0; /* Used on ARM Cortex-M only */

#if (SELECTED_PORT == PORT_ARM_CortexM) /* ONLY DWT PORT SHOULD BE HERE */

void prvTraceInitCortexM()
{
   829d8:	b508      	push	{r3, lr}
	/* Make sure DWT is enabled is enabled, if supported */
	REG_DEMCR |= DEMCR_TRCENA;
   829da:	4b0e      	ldr	r3, [pc, #56]	; (82a14 <prvTraceInitCortexM+0x3c>)
   829dc:	681a      	ldr	r2, [r3, #0]
   829de:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   829e2:	601a      	str	r2, [r3, #0]

	do{
		/* Verify that DWT is supported */
		if (REG_DEMCR == 0)
   829e4:	681b      	ldr	r3, [r3, #0]
   829e6:	b16b      	cbz	r3, 82a04 <prvTraceInitCortexM+0x2c>
			vTraceError("DWT not supported by this chip!");
			break;
		}

		/* Verify that DWT_CYCCNT is supported */
		if (REG_DWT_CTRL & DWT_CTRL_NOCYCCNT)
   829e8:	4b0b      	ldr	r3, [pc, #44]	; (82a18 <prvTraceInitCortexM+0x40>)
   829ea:	681b      	ldr	r3, [r3, #0]
   829ec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   829f0:	d10c      	bne.n	82a0c <prvTraceInitCortexM+0x34>
			vTraceError("DWT_CYCCNT not supported by this chip!");
			break;
		}

		/* Reset the cycle counter */
		REG_DWT_CYCCNT = 0;
   829f2:	2200      	movs	r2, #0
   829f4:	4b09      	ldr	r3, [pc, #36]	; (82a1c <prvTraceInitCortexM+0x44>)
   829f6:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		REG_DWT_CTRL |= DWT_CTRL_CYCCNTENA;
   829f8:	4a07      	ldr	r2, [pc, #28]	; (82a18 <prvTraceInitCortexM+0x40>)
   829fa:	6813      	ldr	r3, [r2, #0]
   829fc:	f043 0301 	orr.w	r3, r3, #1
   82a00:	6013      	str	r3, [r2, #0]
   82a02:	bd08      	pop	{r3, pc}
			vTraceError("DWT not supported by this chip!");
   82a04:	4806      	ldr	r0, [pc, #24]	; (82a20 <prvTraceInitCortexM+0x48>)
   82a06:	4b07      	ldr	r3, [pc, #28]	; (82a24 <prvTraceInitCortexM+0x4c>)
   82a08:	4798      	blx	r3
			break;
   82a0a:	bd08      	pop	{r3, pc}
			vTraceError("DWT_CYCCNT not supported by this chip!");
   82a0c:	4806      	ldr	r0, [pc, #24]	; (82a28 <prvTraceInitCortexM+0x50>)
   82a0e:	4b05      	ldr	r3, [pc, #20]	; (82a24 <prvTraceInitCortexM+0x4c>)
   82a10:	4798      	blx	r3
			break;
   82a12:	bd08      	pop	{r3, pc}
   82a14:	e000edfc 	.word	0xe000edfc
   82a18:	e0001000 	.word	0xe0001000
   82a1c:	e0001004 	.word	0xe0001004
   82a20:	00086660 	.word	0x00086660
   82a24:	000823ed 	.word	0x000823ed
   82a28:	00086680 	.word	0x00086680

00082a2c <vTracePortGetTimeStamp>:
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*HWTC_TYPE == HWTC_TYPE_SYSTICK*/

	if (trace_disable_timestamp == 1)
   82a2c:	4b11      	ldr	r3, [pc, #68]	; (82a74 <vTracePortGetTimeStamp+0x48>)
   82a2e:	681b      	ldr	r3, [r3, #0]
   82a30:	2b01      	cmp	r3, #1
   82a32:	d019      	beq.n	82a68 <vTracePortGetTimeStamp+0x3c>
{
   82a34:	b410      	push	{r4}
	}

	/* Retrieve HWTC_COUNT only once since the same value should be used all throughout this function. */
#if (HWTC_COUNT_DIRECTION == DIRECTION_INCREMENTING)
	/* Get the increasing tick count */
	hwtc_count = HWTC_COUNT;
   82a36:	4b10      	ldr	r3, [pc, #64]	; (82a78 <vTracePortGetTimeStamp+0x4c>)
   82a38:	681a      	ldr	r2, [r3, #0]
   82a3a:	4b10      	ldr	r3, [pc, #64]	; (82a7c <vTracePortGetTimeStamp+0x50>)
   82a3c:	681b      	ldr	r3, [r3, #0]
   82a3e:	441a      	add	r2, r3
	/* This seemingly unnecessarily complicated code will handle free running clocks that can be scaled down to avoid too large DTS values.
	Without this, the scaled timestamp will wrap at (2^32 / HWTC_DIVISOR) ticks.
	The scaled timestamp returned from this function is supposed to go from 0 -> 2^32, which in real time would represent (0 -> 2^32 * HWTC_DIVISOR) ticks. */
	
	/* First we see how long time has passed since the last timestamp call, and we also add the ticks that went missing when we scaled down the last time. */
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
   82a40:	4b0f      	ldr	r3, [pc, #60]	; (82a80 <vTracePortGetTimeStamp+0x54>)
   82a42:	681b      	ldr	r3, [r3, #0]
   82a44:	1ad3      	subs	r3, r2, r3
   82a46:	490f      	ldr	r1, [pc, #60]	; (82a84 <vTracePortGetTimeStamp+0x58>)
   82a48:	680c      	ldr	r4, [r1, #0]
   82a4a:	4423      	add	r3, r4
	
	/* Scale down the diff */
    diff_scaled = diff / HWTC_DIVISOR;
	
	/* Find out how many ticks were lost when scaling down, so we can add them the next time */
    last_hwtc_rest = diff % HWTC_DIVISOR;
   82a4c:	f003 0403 	and.w	r4, r3, #3
   82a50:	600c      	str	r4, [r1, #0]

	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
   82a52:	4c0d      	ldr	r4, [pc, #52]	; (82a88 <vTracePortGetTimeStamp+0x5c>)
   82a54:	6821      	ldr	r1, [r4, #0]
   82a56:	eb01 0393 	add.w	r3, r1, r3, lsr #2
   82a5a:	6023      	str	r3, [r4, #0]
#endif /*HWTC_TYPE == HWTC_TYPE_SYSTICK*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   82a5c:	b100      	cbz	r0, 82a60 <vTracePortGetTimeStamp+0x34>
		*pTimestamp = last_timestamp;
   82a5e:	6003      	str	r3, [r0, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   82a60:	4b07      	ldr	r3, [pc, #28]	; (82a80 <vTracePortGetTimeStamp+0x54>)
   82a62:	601a      	str	r2, [r3, #0]
}
   82a64:	bc10      	pop	{r4}
   82a66:	4770      	bx	lr
		if (pTimestamp)
   82a68:	2800      	cmp	r0, #0
   82a6a:	d0fc      	beq.n	82a66 <vTracePortGetTimeStamp+0x3a>
			*pTimestamp = last_timestamp;
   82a6c:	4b06      	ldr	r3, [pc, #24]	; (82a88 <vTracePortGetTimeStamp+0x5c>)
   82a6e:	681b      	ldr	r3, [r3, #0]
   82a70:	6003      	str	r3, [r0, #0]
   82a72:	4770      	bx	lr
   82a74:	2007ad94 	.word	0x2007ad94
   82a78:	e0001004 	.word	0xe0001004
   82a7c:	2007ad84 	.word	0x2007ad84
   82a80:	2007ad88 	.word	0x2007ad88
   82a84:	2007ad8c 	.word	0x2007ad8c
   82a88:	2007ad90 	.word	0x2007ad90

00082a8c <prvTraceGetParam>:
 * Used for storing extra bytes for kernel calls with numeric parameters.
 *
 * May only be called within a critical section!
 ******************************************************************************/
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   82a8c:	b538      	push	{r3, r4, r5, lr}
   82a8e:	4604      	mov	r4, r0
   82a90:	460d      	mov	r5, r1
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   82a92:	28ff      	cmp	r0, #255	; 0xff
   82a94:	d003      	beq.n	82a9e <prvTraceGetParam+0x12>
   82a96:	f64f 73ff 	movw	r3, #65535	; 0xffff
   82a9a:	4298      	cmp	r0, r3
   82a9c:	d103      	bne.n	82aa6 <prvTraceGetParam+0x1a>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   82a9e:	42ac      	cmp	r4, r5
   82aa0:	d305      	bcc.n	82aae <prvTraceGetParam+0x22>
			prvTraceUpdateCounters();
		}

		return param & param_max;
	}
}
   82aa2:	4628      	mov	r0, r5
   82aa4:	bd38      	pop	{r3, r4, r5, pc}
	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   82aa6:	4809      	ldr	r0, [pc, #36]	; (82acc <prvTraceGetParam+0x40>)
   82aa8:	4b09      	ldr	r3, [pc, #36]	; (82ad0 <prvTraceGetParam+0x44>)
   82aaa:	4798      	blx	r3
   82aac:	e7f9      	b.n	82aa2 <prvTraceGetParam+0x16>
		xps = (XPSEvent*) xTraceNextFreeEventBufferSlot();
   82aae:	4b09      	ldr	r3, [pc, #36]	; (82ad4 <prvTraceGetParam+0x48>)
   82ab0:	4798      	blx	r3
		if (xps != NULL)
   82ab2:	b148      	cbz	r0, 82ac8 <prvTraceGetParam+0x3c>
			xps->type = DIV_XPS;
   82ab4:	2301      	movs	r3, #1
   82ab6:	7003      	strb	r3, [r0, #0]
			xps->xps_8 = (param & (0xFF00 & ~param_max)) >> 8;
   82ab8:	ea25 0304 	bic.w	r3, r5, r4
   82abc:	0a19      	lsrs	r1, r3, #8
   82abe:	7041      	strb	r1, [r0, #1]
			xps->xps_16 = (param & (0xFFFF0000 & ~param_max)) >> 16;
   82ac0:	0c1b      	lsrs	r3, r3, #16
   82ac2:	8043      	strh	r3, [r0, #2]
			prvTraceUpdateCounters();
   82ac4:	4b04      	ldr	r3, [pc, #16]	; (82ad8 <prvTraceGetParam+0x4c>)
   82ac6:	4798      	blx	r3
		return param & param_max;
   82ac8:	4025      	ands	r5, r4
   82aca:	e7ea      	b.n	82aa2 <prvTraceGetParam+0x16>
   82acc:	000866a8 	.word	0x000866a8
   82ad0:	000823ed 	.word	0x000823ed
   82ad4:	000825b1 	.word	0x000825b1
   82ad8:	0008289d 	.word	0x0008289d

00082adc <vTraceStoreTaskReady>:
	if (handle == 0)
   82adc:	2800      	cmp	r0, #0
   82ade:	d041      	beq.n	82b64 <vTraceStoreTaskReady+0x88>
{
   82ae0:	b570      	push	{r4, r5, r6, lr}
   82ae2:	4604      	mov	r4, r0
	if (! readyEventsEnabled)
   82ae4:	4a20      	ldr	r2, [pc, #128]	; (82b68 <vTraceStoreTaskReady+0x8c>)
   82ae6:	6812      	ldr	r2, [r2, #0]
   82ae8:	b31a      	cbz	r2, 82b32 <vTraceStoreTaskReady+0x56>
	TRACE_ASSERT(handle <= NTask, "vTraceStoreTaskReady: Invalid value for handle", );
   82aea:	280f      	cmp	r0, #15
   82aec:	d822      	bhi.n	82b34 <vTraceStoreTaskReady+0x58>
	if (recorder_busy)
   82aee:	4b1f      	ldr	r3, [pc, #124]	; (82b6c <vTraceStoreTaskReady+0x90>)
   82af0:	681b      	ldr	r3, [r3, #0]
   82af2:	bb1b      	cbnz	r3, 82b3c <vTraceStoreTaskReady+0x60>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82af4:	f3ef 8510 	mrs	r5, PRIMASK

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   82af8:	2301      	movs	r3, #1
   82afa:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   82afe:	4a1b      	ldr	r2, [pc, #108]	; (82b6c <vTraceStoreTaskReady+0x90>)
   82b00:	6813      	ldr	r3, [r2, #0]
   82b02:	3301      	adds	r3, #1
   82b04:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   82b06:	4b1a      	ldr	r3, [pc, #104]	; (82b70 <vTraceStoreTaskReady+0x94>)
   82b08:	681b      	ldr	r3, [r3, #0]
   82b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82b0c:	b15b      	cbz	r3, 82b26 <vTraceStoreTaskReady+0x4a>
		if (!TRACE_GET_TASK_FLAG_ISEXCLUDED(handle))
   82b0e:	f100 0321 	add.w	r3, r0, #33	; 0x21
   82b12:	10da      	asrs	r2, r3, #3
   82b14:	4917      	ldr	r1, [pc, #92]	; (82b74 <vTraceStoreTaskReady+0x98>)
   82b16:	5c8a      	ldrb	r2, [r1, r2]
   82b18:	f003 0307 	and.w	r3, r3, #7
   82b1c:	fa42 f303 	asr.w	r3, r2, r3
   82b20:	f013 0f01 	tst.w	r3, #1
   82b24:	d00e      	beq.n	82b44 <vTraceStoreTaskReady+0x68>
	trcCRITICAL_SECTION_END();
   82b26:	4a11      	ldr	r2, [pc, #68]	; (82b6c <vTraceStoreTaskReady+0x90>)
   82b28:	6813      	ldr	r3, [r2, #0]
   82b2a:	3b01      	subs	r3, #1
   82b2c:	6013      	str	r3, [r2, #0]
   82b2e:	f385 8810 	msr	PRIMASK, r5
   82b32:	bd70      	pop	{r4, r5, r6, pc}
	TRACE_ASSERT(handle <= NTask, "vTraceStoreTaskReady: Invalid value for handle", );
   82b34:	4810      	ldr	r0, [pc, #64]	; (82b78 <vTraceStoreTaskReady+0x9c>)
   82b36:	4b11      	ldr	r3, [pc, #68]	; (82b7c <vTraceStoreTaskReady+0xa0>)
   82b38:	4798      	blx	r3
   82b3a:	bd70      	pop	{r4, r5, r6, pc}
	 vTraceError("Recorder busy - high priority ISR using syscall? (1)");
   82b3c:	4810      	ldr	r0, [pc, #64]	; (82b80 <vTraceStoreTaskReady+0xa4>)
   82b3e:	4b0f      	ldr	r3, [pc, #60]	; (82b7c <vTraceStoreTaskReady+0xa0>)
   82b40:	4798      	blx	r3
	 return;
   82b42:	bd70      	pop	{r4, r5, r6, pc}
			dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   82b44:	f64f 70ff 	movw	r0, #65535	; 0xffff
   82b48:	4b0e      	ldr	r3, [pc, #56]	; (82b84 <vTraceStoreTaskReady+0xa8>)
   82b4a:	4798      	blx	r3
   82b4c:	4606      	mov	r6, r0
			tr = (TREvent*)xTraceNextFreeEventBufferSlot();
   82b4e:	4b0e      	ldr	r3, [pc, #56]	; (82b88 <vTraceStoreTaskReady+0xac>)
   82b50:	4798      	blx	r3
			if (tr != NULL)
   82b52:	2800      	cmp	r0, #0
   82b54:	d0e7      	beq.n	82b26 <vTraceStoreTaskReady+0x4a>
				tr->type = DIV_TASK_READY;
   82b56:	2202      	movs	r2, #2
   82b58:	7002      	strb	r2, [r0, #0]
				tr->dts = dts3;
   82b5a:	8046      	strh	r6, [r0, #2]
				tr->objHandle = hnd8;
   82b5c:	7044      	strb	r4, [r0, #1]
				prvTraceUpdateCounters();
   82b5e:	4b0b      	ldr	r3, [pc, #44]	; (82b8c <vTraceStoreTaskReady+0xb0>)
   82b60:	4798      	blx	r3
   82b62:	e7e0      	b.n	82b26 <vTraceStoreTaskReady+0x4a>
   82b64:	4770      	bx	lr
   82b66:	bf00      	nop
   82b68:	2007013c 	.word	0x2007013c
   82b6c:	2007ad7c 	.word	0x2007ad7c
   82b70:	2007acd8 	.word	0x2007acd8
   82b74:	2007ad00 	.word	0x2007ad00
   82b78:	00086bc8 	.word	0x00086bc8
   82b7c:	000823ed 	.word	0x000823ed
   82b80:	00086c08 	.word	0x00086c08
   82b84:	000828d1 	.word	0x000828d1
   82b88:	000825b1 	.word	0x000825b1
   82b8c:	0008289d 	.word	0x0008289d

00082b90 <vTraceStoreKernelCall>:
{
   82b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82b92:	4604      	mov	r4, r0
	TRACE_ASSERT(ecode < 0xFF, "vTraceStoreKernelCall: ecode >= 0xFF", );
   82b94:	28fe      	cmp	r0, #254	; 0xfe
   82b96:	d839      	bhi.n	82c0c <vTraceStoreKernelCall+0x7c>
   82b98:	4608      	mov	r0, r1
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "vTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", );
   82b9a:	2906      	cmp	r1, #6
   82b9c:	d83a      	bhi.n	82c14 <vTraceStoreKernelCall+0x84>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "vTraceStoreKernelCall: Invalid value for objectNumber", );
   82b9e:	4b2b      	ldr	r3, [pc, #172]	; (82c4c <vTraceStoreKernelCall+0xbc>)
   82ba0:	681b      	ldr	r3, [r3, #0]
   82ba2:	440b      	add	r3, r1
   82ba4:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   82ba8:	4293      	cmp	r3, r2
   82baa:	d337      	bcc.n	82c1c <vTraceStoreKernelCall+0x8c>
	if (recorder_busy)
   82bac:	4b28      	ldr	r3, [pc, #160]	; (82c50 <vTraceStoreKernelCall+0xc0>)
   82bae:	681b      	ldr	r3, [r3, #0]
   82bb0:	2b00      	cmp	r3, #0
   82bb2:	d137      	bne.n	82c24 <vTraceStoreKernelCall+0x94>
	if (handle_of_last_logged_task == 0)
   82bb4:	4b27      	ldr	r3, [pc, #156]	; (82c54 <vTraceStoreKernelCall+0xc4>)
   82bb6:	781b      	ldrb	r3, [r3, #0]
   82bb8:	b33b      	cbz	r3, 82c0a <vTraceStoreKernelCall+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82bba:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   82bbe:	2301      	movs	r3, #1
   82bc0:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   82bc4:	4922      	ldr	r1, [pc, #136]	; (82c50 <vTraceStoreKernelCall+0xc0>)
   82bc6:	680b      	ldr	r3, [r1, #0]
   82bc8:	3301      	adds	r3, #1
   82bca:	600b      	str	r3, [r1, #0]
	if (RecorderDataPtr->recorderActive)
   82bcc:	4b1f      	ldr	r3, [pc, #124]	; (82c4c <vTraceStoreKernelCall+0xbc>)
   82bce:	681b      	ldr	r3, [r3, #0]
   82bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82bd2:	b1a3      	cbz	r3, 82bfe <vTraceStoreKernelCall+0x6e>
		if (nISRactive || !inExcludedTask)
   82bd4:	4b20      	ldr	r3, [pc, #128]	; (82c58 <vTraceStoreKernelCall+0xc8>)
   82bd6:	f993 3000 	ldrsb.w	r3, [r3]
   82bda:	b913      	cbnz	r3, 82be2 <vTraceStoreKernelCall+0x52>
   82bdc:	4b1f      	ldr	r3, [pc, #124]	; (82c5c <vTraceStoreKernelCall+0xcc>)
   82bde:	781b      	ldrb	r3, [r3, #0]
   82be0:	b96b      	cbnz	r3, 82bfe <vTraceStoreKernelCall+0x6e>
			if (!uiTraceIsObjectExcluded(objectClass, (objectHandleType)objectNumber) && !TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(ecode))
   82be2:	b2d6      	uxtb	r6, r2
   82be4:	4631      	mov	r1, r6
   82be6:	4b1e      	ldr	r3, [pc, #120]	; (82c60 <vTraceStoreKernelCall+0xd0>)
   82be8:	4798      	blx	r3
   82bea:	b940      	cbnz	r0, 82bfe <vTraceStoreKernelCall+0x6e>
   82bec:	08e3      	lsrs	r3, r4, #3
   82bee:	4a1d      	ldr	r2, [pc, #116]	; (82c64 <vTraceStoreKernelCall+0xd4>)
   82bf0:	5cd3      	ldrb	r3, [r2, r3]
   82bf2:	f004 0207 	and.w	r2, r4, #7
   82bf6:	4113      	asrs	r3, r2
   82bf8:	f013 0f01 	tst.w	r3, #1
   82bfc:	d016      	beq.n	82c2c <vTraceStoreKernelCall+0x9c>
	trcCRITICAL_SECTION_END();
   82bfe:	4a14      	ldr	r2, [pc, #80]	; (82c50 <vTraceStoreKernelCall+0xc0>)
   82c00:	6813      	ldr	r3, [r2, #0]
   82c02:	3b01      	subs	r3, #1
   82c04:	6013      	str	r3, [r2, #0]
   82c06:	f385 8810 	msr	PRIMASK, r5
   82c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(ecode < 0xFF, "vTraceStoreKernelCall: ecode >= 0xFF", );
   82c0c:	4816      	ldr	r0, [pc, #88]	; (82c68 <vTraceStoreKernelCall+0xd8>)
   82c0e:	4b17      	ldr	r3, [pc, #92]	; (82c6c <vTraceStoreKernelCall+0xdc>)
   82c10:	4798      	blx	r3
   82c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "vTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", );
   82c14:	4816      	ldr	r0, [pc, #88]	; (82c70 <vTraceStoreKernelCall+0xe0>)
   82c16:	4b15      	ldr	r3, [pc, #84]	; (82c6c <vTraceStoreKernelCall+0xdc>)
   82c18:	4798      	blx	r3
   82c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "vTraceStoreKernelCall: Invalid value for objectNumber", );
   82c1c:	4815      	ldr	r0, [pc, #84]	; (82c74 <vTraceStoreKernelCall+0xe4>)
   82c1e:	4b13      	ldr	r3, [pc, #76]	; (82c6c <vTraceStoreKernelCall+0xdc>)
   82c20:	4798      	blx	r3
   82c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vTraceError("Recorder busy - high priority ISR using syscall? (2)");
   82c24:	4814      	ldr	r0, [pc, #80]	; (82c78 <vTraceStoreKernelCall+0xe8>)
   82c26:	4b11      	ldr	r3, [pc, #68]	; (82c6c <vTraceStoreKernelCall+0xdc>)
   82c28:	4798      	blx	r3
		return;
   82c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   82c2c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   82c30:	4b12      	ldr	r3, [pc, #72]	; (82c7c <vTraceStoreKernelCall+0xec>)
   82c32:	4798      	blx	r3
   82c34:	4607      	mov	r7, r0
				kse = (KernelCall*) xTraceNextFreeEventBufferSlot();
   82c36:	4b12      	ldr	r3, [pc, #72]	; (82c80 <vTraceStoreKernelCall+0xf0>)
   82c38:	4798      	blx	r3
				if (kse != NULL)
   82c3a:	2800      	cmp	r0, #0
   82c3c:	d0df      	beq.n	82bfe <vTraceStoreKernelCall+0x6e>
					kse->dts = dts1;
   82c3e:	8047      	strh	r7, [r0, #2]
					kse->type = (uint8_t)ecode;
   82c40:	7004      	strb	r4, [r0, #0]
					kse->objHandle = hnd8;
   82c42:	7046      	strb	r6, [r0, #1]
					prvTraceUpdateCounters();
   82c44:	4b0f      	ldr	r3, [pc, #60]	; (82c84 <vTraceStoreKernelCall+0xf4>)
   82c46:	4798      	blx	r3
   82c48:	e7d9      	b.n	82bfe <vTraceStoreKernelCall+0x6e>
   82c4a:	bf00      	nop
   82c4c:	2007acd8 	.word	0x2007acd8
   82c50:	2007ad7c 	.word	0x2007ad7c
   82c54:	2007ad9c 	.word	0x2007ad9c
   82c58:	2007ad9e 	.word	0x2007ad9e
   82c5c:	2007ad9d 	.word	0x2007ad9d
   82c60:	0008326d 	.word	0x0008326d
   82c64:	2007acdc 	.word	0x2007acdc
   82c68:	0008693c 	.word	0x0008693c
   82c6c:	000823ed 	.word	0x000823ed
   82c70:	00086970 	.word	0x00086970
   82c74:	000869b4 	.word	0x000869b4
   82c78:	000869f8 	.word	0x000869f8
   82c7c:	000828d1 	.word	0x000828d1
   82c80:	000825b1 	.word	0x000825b1
   82c84:	0008289d 	.word	0x0008289d

00082c88 <vTraceStoreKernelCallWithParam>:
{
   82c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82c8c:	4604      	mov	r4, r0
	TRACE_ASSERT(evtcode < 0xFF, "vTraceStoreKernelCall: evtcode >= 0xFF", );
   82c8e:	28fe      	cmp	r0, #254	; 0xfe
   82c90:	d83b      	bhi.n	82d0a <vTraceStoreKernelCallWithParam+0x82>
   82c92:	4608      	mov	r0, r1
   82c94:	461d      	mov	r5, r3
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "vTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", );
   82c96:	2906      	cmp	r1, #6
   82c98:	d83c      	bhi.n	82d14 <vTraceStoreKernelCallWithParam+0x8c>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "vTraceStoreKernelCallWithParam: Invalid value for objectNumber", );
   82c9a:	4b30      	ldr	r3, [pc, #192]	; (82d5c <vTraceStoreKernelCallWithParam+0xd4>)
   82c9c:	681b      	ldr	r3, [r3, #0]
   82c9e:	440b      	add	r3, r1
   82ca0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   82ca4:	4293      	cmp	r3, r2
   82ca6:	d33a      	bcc.n	82d1e <vTraceStoreKernelCallWithParam+0x96>
	if (recorder_busy)
   82ca8:	4b2d      	ldr	r3, [pc, #180]	; (82d60 <vTraceStoreKernelCallWithParam+0xd8>)
   82caa:	681b      	ldr	r3, [r3, #0]
   82cac:	2b00      	cmp	r3, #0
   82cae:	d13b      	bne.n	82d28 <vTraceStoreKernelCallWithParam+0xa0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82cb0:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   82cb4:	2301      	movs	r3, #1
   82cb6:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN();
   82cba:	4929      	ldr	r1, [pc, #164]	; (82d60 <vTraceStoreKernelCallWithParam+0xd8>)
   82cbc:	680b      	ldr	r3, [r1, #0]
   82cbe:	3301      	adds	r3, #1
   82cc0:	600b      	str	r3, [r1, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task && (! inExcludedTask || nISRactive))
   82cc2:	4b26      	ldr	r3, [pc, #152]	; (82d5c <vTraceStoreKernelCallWithParam+0xd4>)
   82cc4:	681b      	ldr	r3, [r3, #0]
   82cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82cc8:	b1bb      	cbz	r3, 82cfa <vTraceStoreKernelCallWithParam+0x72>
   82cca:	4b26      	ldr	r3, [pc, #152]	; (82d64 <vTraceStoreKernelCallWithParam+0xdc>)
   82ccc:	781b      	ldrb	r3, [r3, #0]
   82cce:	b1a3      	cbz	r3, 82cfa <vTraceStoreKernelCallWithParam+0x72>
   82cd0:	4b25      	ldr	r3, [pc, #148]	; (82d68 <vTraceStoreKernelCallWithParam+0xe0>)
   82cd2:	781b      	ldrb	r3, [r3, #0]
   82cd4:	b11b      	cbz	r3, 82cde <vTraceStoreKernelCallWithParam+0x56>
   82cd6:	4b25      	ldr	r3, [pc, #148]	; (82d6c <vTraceStoreKernelCallWithParam+0xe4>)
   82cd8:	f993 3000 	ldrsb.w	r3, [r3]
   82cdc:	b16b      	cbz	r3, 82cfa <vTraceStoreKernelCallWithParam+0x72>
		if (!uiTraceIsObjectExcluded(objectClass, (objectHandleType)objectNumber) &&
   82cde:	b2d7      	uxtb	r7, r2
   82ce0:	4639      	mov	r1, r7
   82ce2:	4b23      	ldr	r3, [pc, #140]	; (82d70 <vTraceStoreKernelCallWithParam+0xe8>)
   82ce4:	4798      	blx	r3
   82ce6:	b940      	cbnz	r0, 82cfa <vTraceStoreKernelCallWithParam+0x72>
			!TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(evtcode))
   82ce8:	08e3      	lsrs	r3, r4, #3
   82cea:	4a22      	ldr	r2, [pc, #136]	; (82d74 <vTraceStoreKernelCallWithParam+0xec>)
   82cec:	5cd3      	ldrb	r3, [r2, r3]
   82cee:	f004 0207 	and.w	r2, r4, #7
   82cf2:	4113      	asrs	r3, r2
		if (!uiTraceIsObjectExcluded(objectClass, (objectHandleType)objectNumber) &&
   82cf4:	f013 0f01 	tst.w	r3, #1
   82cf8:	d01b      	beq.n	82d32 <vTraceStoreKernelCallWithParam+0xaa>
	trcCRITICAL_SECTION_END();
   82cfa:	4a19      	ldr	r2, [pc, #100]	; (82d60 <vTraceStoreKernelCallWithParam+0xd8>)
   82cfc:	6813      	ldr	r3, [r2, #0]
   82cfe:	3b01      	subs	r3, #1
   82d00:	6013      	str	r3, [r2, #0]
   82d02:	f386 8810 	msr	PRIMASK, r6
   82d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	TRACE_ASSERT(evtcode < 0xFF, "vTraceStoreKernelCall: evtcode >= 0xFF", );
   82d0a:	481b      	ldr	r0, [pc, #108]	; (82d78 <vTraceStoreKernelCallWithParam+0xf0>)
   82d0c:	4b1b      	ldr	r3, [pc, #108]	; (82d7c <vTraceStoreKernelCallWithParam+0xf4>)
   82d0e:	4798      	blx	r3
   82d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "vTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", );
   82d14:	481a      	ldr	r0, [pc, #104]	; (82d80 <vTraceStoreKernelCallWithParam+0xf8>)
   82d16:	4b19      	ldr	r3, [pc, #100]	; (82d7c <vTraceStoreKernelCallWithParam+0xf4>)
   82d18:	4798      	blx	r3
   82d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "vTraceStoreKernelCallWithParam: Invalid value for objectNumber", );
   82d1e:	4819      	ldr	r0, [pc, #100]	; (82d84 <vTraceStoreKernelCallWithParam+0xfc>)
   82d20:	4b16      	ldr	r3, [pc, #88]	; (82d7c <vTraceStoreKernelCallWithParam+0xf4>)
   82d22:	4798      	blx	r3
   82d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		vTraceError("Recorder busy - high priority ISR using syscall? (3)");
   82d28:	4817      	ldr	r0, [pc, #92]	; (82d88 <vTraceStoreKernelCallWithParam+0x100>)
   82d2a:	4b14      	ldr	r3, [pc, #80]	; (82d7c <vTraceStoreKernelCallWithParam+0xf4>)
   82d2c:	4798      	blx	r3
		return;
   82d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   82d32:	20ff      	movs	r0, #255	; 0xff
   82d34:	4b15      	ldr	r3, [pc, #84]	; (82d8c <vTraceStoreKernelCallWithParam+0x104>)
   82d36:	4798      	blx	r3
   82d38:	4680      	mov	r8, r0
			p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   82d3a:	4629      	mov	r1, r5
   82d3c:	20ff      	movs	r0, #255	; 0xff
   82d3e:	4b14      	ldr	r3, [pc, #80]	; (82d90 <vTraceStoreKernelCallWithParam+0x108>)
   82d40:	4798      	blx	r3
   82d42:	4605      	mov	r5, r0
			kse = (KernelCallWithParamAndHandle*) xTraceNextFreeEventBufferSlot();
   82d44:	4b13      	ldr	r3, [pc, #76]	; (82d94 <vTraceStoreKernelCallWithParam+0x10c>)
   82d46:	4798      	blx	r3
			if (kse != NULL)
   82d48:	2800      	cmp	r0, #0
   82d4a:	d0d6      	beq.n	82cfa <vTraceStoreKernelCallWithParam+0x72>
			dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   82d4c:	f880 8003 	strb.w	r8, [r0, #3]
				kse->type = (uint8_t)evtcode;
   82d50:	7004      	strb	r4, [r0, #0]
				kse->objHandle = hnd8;
   82d52:	7047      	strb	r7, [r0, #1]
			p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   82d54:	7085      	strb	r5, [r0, #2]
				prvTraceUpdateCounters();
   82d56:	4b10      	ldr	r3, [pc, #64]	; (82d98 <vTraceStoreKernelCallWithParam+0x110>)
   82d58:	4798      	blx	r3
   82d5a:	e7ce      	b.n	82cfa <vTraceStoreKernelCallWithParam+0x72>
   82d5c:	2007acd8 	.word	0x2007acd8
   82d60:	2007ad7c 	.word	0x2007ad7c
   82d64:	2007ad9c 	.word	0x2007ad9c
   82d68:	2007ad9d 	.word	0x2007ad9d
   82d6c:	2007ad9e 	.word	0x2007ad9e
   82d70:	0008326d 	.word	0x0008326d
   82d74:	2007acdc 	.word	0x2007acdc
   82d78:	00086abc 	.word	0x00086abc
   82d7c:	000823ed 	.word	0x000823ed
   82d80:	00086af4 	.word	0x00086af4
   82d84:	00086b40 	.word	0x00086b40
   82d88:	00086b90 	.word	0x00086b90
   82d8c:	000828d1 	.word	0x000828d1
   82d90:	00082a8d 	.word	0x00082a8d
   82d94:	000825b1 	.word	0x000825b1
   82d98:	0008289d 	.word	0x0008289d

00082d9c <vTraceStoreKernelCallWithNumericParamOnly>:
 *
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
void vTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   82d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t restParam;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	restParam = 0;

	TRACE_ASSERT(evtcode < 0xFF,
   82d9e:	28fe      	cmp	r0, #254	; 0xfe
   82da0:	d82b      	bhi.n	82dfa <vTraceStoreKernelCallWithNumericParamOnly+0x5e>
   82da2:	4604      	mov	r4, r0
   82da4:	460e      	mov	r6, r1
		"vTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", );

	if (recorder_busy)
   82da6:	4b23      	ldr	r3, [pc, #140]	; (82e34 <vTraceStoreKernelCallWithNumericParamOnly+0x98>)
   82da8:	681b      	ldr	r3, [r3, #0]
   82daa:	bb53      	cbnz	r3, 82e02 <vTraceStoreKernelCallWithNumericParamOnly+0x66>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82dac:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   82db0:	2301      	movs	r3, #1
   82db2:	f383 8810 	msr	PRIMASK, r3

		vTraceError("Recorder busy - high priority ISR using syscall? (4)");
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   82db6:	4a1f      	ldr	r2, [pc, #124]	; (82e34 <vTraceStoreKernelCallWithNumericParamOnly+0x98>)
   82db8:	6813      	ldr	r3, [r2, #0]
   82dba:	3301      	adds	r3, #1
   82dbc:	6013      	str	r3, [r2, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task
   82dbe:	4b1e      	ldr	r3, [pc, #120]	; (82e38 <vTraceStoreKernelCallWithNumericParamOnly+0x9c>)
   82dc0:	681b      	ldr	r3, [r3, #0]
   82dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82dc4:	b193      	cbz	r3, 82dec <vTraceStoreKernelCallWithNumericParamOnly+0x50>
   82dc6:	4b1d      	ldr	r3, [pc, #116]	; (82e3c <vTraceStoreKernelCallWithNumericParamOnly+0xa0>)
   82dc8:	781b      	ldrb	r3, [r3, #0]
   82dca:	b17b      	cbz	r3, 82dec <vTraceStoreKernelCallWithNumericParamOnly+0x50>
		&& (! inExcludedTask || nISRactive))
   82dcc:	4b1c      	ldr	r3, [pc, #112]	; (82e40 <vTraceStoreKernelCallWithNumericParamOnly+0xa4>)
   82dce:	781b      	ldrb	r3, [r3, #0]
   82dd0:	b11b      	cbz	r3, 82dda <vTraceStoreKernelCallWithNumericParamOnly+0x3e>
   82dd2:	4b1c      	ldr	r3, [pc, #112]	; (82e44 <vTraceStoreKernelCallWithNumericParamOnly+0xa8>)
   82dd4:	f993 3000 	ldrsb.w	r3, [r3]
   82dd8:	b143      	cbz	r3, 82dec <vTraceStoreKernelCallWithNumericParamOnly+0x50>
	{
		/* Check if the event code is excluded */
		if (!TRACE_GET_EVENT_CODE_FLAG_ISEXCLUDED(evtcode))
   82dda:	08e3      	lsrs	r3, r4, #3
   82ddc:	4a1a      	ldr	r2, [pc, #104]	; (82e48 <vTraceStoreKernelCallWithNumericParamOnly+0xac>)
   82dde:	5cd3      	ldrb	r3, [r2, r3]
   82de0:	f004 0207 	and.w	r2, r4, #7
   82de4:	4113      	asrs	r3, r2
   82de6:	f013 0f01 	tst.w	r3, #1
   82dea:	d00e      	beq.n	82e0a <vTraceStoreKernelCallWithNumericParamOnly+0x6e>
				kse->param = restParam;
				prvTraceUpdateCounters();
			}
		}
	}
	trcCRITICAL_SECTION_END();
   82dec:	4a11      	ldr	r2, [pc, #68]	; (82e34 <vTraceStoreKernelCallWithNumericParamOnly+0x98>)
   82dee:	6813      	ldr	r3, [r2, #0]
   82df0:	3b01      	subs	r3, #1
   82df2:	6013      	str	r3, [r2, #0]
   82df4:	f385 8810 	msr	PRIMASK, r5
   82df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(evtcode < 0xFF,
   82dfa:	4814      	ldr	r0, [pc, #80]	; (82e4c <vTraceStoreKernelCallWithNumericParamOnly+0xb0>)
   82dfc:	4b14      	ldr	r3, [pc, #80]	; (82e50 <vTraceStoreKernelCallWithNumericParamOnly+0xb4>)
   82dfe:	4798      	blx	r3
   82e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vTraceError("Recorder busy - high priority ISR using syscall? (4)");
   82e02:	4814      	ldr	r0, [pc, #80]	; (82e54 <vTraceStoreKernelCallWithNumericParamOnly+0xb8>)
   82e04:	4b12      	ldr	r3, [pc, #72]	; (82e50 <vTraceStoreKernelCallWithNumericParamOnly+0xb4>)
   82e06:	4798      	blx	r3
		return;
   82e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   82e0a:	20ff      	movs	r0, #255	; 0xff
   82e0c:	4b12      	ldr	r3, [pc, #72]	; (82e58 <vTraceStoreKernelCallWithNumericParamOnly+0xbc>)
   82e0e:	4798      	blx	r3
   82e10:	4607      	mov	r7, r0
			restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   82e12:	4631      	mov	r1, r6
   82e14:	f64f 70ff 	movw	r0, #65535	; 0xffff
   82e18:	4b10      	ldr	r3, [pc, #64]	; (82e5c <vTraceStoreKernelCallWithNumericParamOnly+0xc0>)
   82e1a:	4798      	blx	r3
   82e1c:	4606      	mov	r6, r0
			kse = (KernelCallWithParam16*) xTraceNextFreeEventBufferSlot();
   82e1e:	4b10      	ldr	r3, [pc, #64]	; (82e60 <vTraceStoreKernelCallWithNumericParamOnly+0xc4>)
   82e20:	4798      	blx	r3
			if (kse != NULL)
   82e22:	2800      	cmp	r0, #0
   82e24:	d0e2      	beq.n	82dec <vTraceStoreKernelCallWithNumericParamOnly+0x50>
			dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   82e26:	7047      	strb	r7, [r0, #1]
				kse->type = (uint8_t)evtcode;
   82e28:	7004      	strb	r4, [r0, #0]
			restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   82e2a:	8046      	strh	r6, [r0, #2]
				prvTraceUpdateCounters();
   82e2c:	4b0d      	ldr	r3, [pc, #52]	; (82e64 <vTraceStoreKernelCallWithNumericParamOnly+0xc8>)
   82e2e:	4798      	blx	r3
   82e30:	e7dc      	b.n	82dec <vTraceStoreKernelCallWithNumericParamOnly+0x50>
   82e32:	bf00      	nop
   82e34:	2007ad7c 	.word	0x2007ad7c
   82e38:	2007acd8 	.word	0x2007acd8
   82e3c:	2007ad9c 	.word	0x2007ad9c
   82e40:	2007ad9d 	.word	0x2007ad9d
   82e44:	2007ad9e 	.word	0x2007ad9e
   82e48:	2007acdc 	.word	0x2007acdc
   82e4c:	00086a30 	.word	0x00086a30
   82e50:	000823ed 	.word	0x000823ed
   82e54:	00086a84 	.word	0x00086a84
   82e58:	000828d1 	.word	0x000828d1
   82e5c:	00082a8d 	.word	0x00082a8d
   82e60:	000825b1 	.word	0x000825b1
   82e64:	0008289d 	.word	0x0008289d

00082e68 <vTraceSetPriorityProperty>:
	}
}
#endif

void vTraceSetPriorityProperty(uint8_t objectclass, objectHandleType id, uint8_t value)
{
   82e68:	b538      	push	{r3, r4, r5, lr}
   82e6a:	4604      	mov	r4, r0
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   82e6c:	2806      	cmp	r0, #6
   82e6e:	d815      	bhi.n	82e9c <vTraceSetPriorityProperty+0x34>
   82e70:	4608      	mov	r0, r1
   82e72:	4615      	mov	r5, r2
		"vTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", );
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   82e74:	4b0d      	ldr	r3, [pc, #52]	; (82eac <vTraceSetPriorityProperty+0x44>)
   82e76:	681b      	ldr	r3, [r3, #0]
   82e78:	4423      	add	r3, r4
   82e7a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   82e7e:	428b      	cmp	r3, r1
   82e80:	d310      	bcc.n	82ea4 <vTraceSetPriorityProperty+0x3c>
		"vTraceSetPriorityProperty: Invalid value for id", );

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   82e82:	4621      	mov	r1, r4
   82e84:	4b0a      	ldr	r3, [pc, #40]	; (82eb0 <vTraceSetPriorityProperty+0x48>)
   82e86:	4798      	blx	r3
   82e88:	4b08      	ldr	r3, [pc, #32]	; (82eac <vTraceSetPriorityProperty+0x44>)
   82e8a:	681b      	ldr	r3, [r3, #0]
   82e8c:	441c      	add	r4, r3
   82e8e:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
   82e92:	4418      	add	r0, r3
   82e94:	4410      	add	r0, r2
   82e96:	f880 508d 	strb.w	r5, [r0, #141]	; 0x8d
   82e9a:	bd38      	pop	{r3, r4, r5, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   82e9c:	4805      	ldr	r0, [pc, #20]	; (82eb4 <vTraceSetPriorityProperty+0x4c>)
   82e9e:	4b06      	ldr	r3, [pc, #24]	; (82eb8 <vTraceSetPriorityProperty+0x50>)
   82ea0:	4798      	blx	r3
   82ea2:	bd38      	pop	{r3, r4, r5, pc}
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   82ea4:	4805      	ldr	r0, [pc, #20]	; (82ebc <vTraceSetPriorityProperty+0x54>)
   82ea6:	4b04      	ldr	r3, [pc, #16]	; (82eb8 <vTraceSetPriorityProperty+0x50>)
   82ea8:	4798      	blx	r3
   82eaa:	bd38      	pop	{r3, r4, r5, pc}
   82eac:	2007acd8 	.word	0x2007acd8
   82eb0:	000825e9 	.word	0x000825e9
   82eb4:	0008686c 	.word	0x0008686c
   82eb8:	000823ed 	.word	0x000823ed
   82ebc:	000868b4 	.word	0x000868b4

00082ec0 <uiTraceGetPriorityProperty>:
}

uint8_t uiTraceGetPriorityProperty(uint8_t objectclass, objectHandleType id)
{
   82ec0:	b510      	push	{r4, lr}
   82ec2:	4604      	mov	r4, r0
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   82ec4:	2806      	cmp	r0, #6
   82ec6:	d814      	bhi.n	82ef2 <uiTraceGetPriorityProperty+0x32>
   82ec8:	4608      	mov	r0, r1
		"uiTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   82eca:	4b0f      	ldr	r3, [pc, #60]	; (82f08 <uiTraceGetPriorityProperty+0x48>)
   82ecc:	681b      	ldr	r3, [r3, #0]
   82ece:	4423      	add	r3, r4
   82ed0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   82ed4:	428b      	cmp	r3, r1
   82ed6:	d311      	bcc.n	82efc <uiTraceGetPriorityProperty+0x3c>
		"uiTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   82ed8:	4621      	mov	r1, r4
   82eda:	4b0c      	ldr	r3, [pc, #48]	; (82f0c <uiTraceGetPriorityProperty+0x4c>)
   82edc:	4798      	blx	r3
   82ede:	4b0a      	ldr	r3, [pc, #40]	; (82f08 <uiTraceGetPriorityProperty+0x48>)
   82ee0:	681b      	ldr	r3, [r3, #0]
   82ee2:	441c      	add	r4, r3
   82ee4:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
   82ee8:	4418      	add	r0, r3
   82eea:	4410      	add	r0, r2
   82eec:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
}
   82ef0:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   82ef2:	4807      	ldr	r0, [pc, #28]	; (82f10 <uiTraceGetPriorityProperty+0x50>)
   82ef4:	4b07      	ldr	r3, [pc, #28]	; (82f14 <uiTraceGetPriorityProperty+0x54>)
   82ef6:	4798      	blx	r3
   82ef8:	2000      	movs	r0, #0
   82efa:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   82efc:	4806      	ldr	r0, [pc, #24]	; (82f18 <uiTraceGetPriorityProperty+0x58>)
   82efe:	4b05      	ldr	r3, [pc, #20]	; (82f14 <uiTraceGetPriorityProperty+0x54>)
   82f00:	4798      	blx	r3
   82f02:	2000      	movs	r0, #0
   82f04:	bd10      	pop	{r4, pc}
   82f06:	bf00      	nop
   82f08:	2007acd8 	.word	0x2007acd8
   82f0c:	000825e9 	.word	0x000825e9
   82f10:	00086764 	.word	0x00086764
   82f14:	000823ed 	.word	0x000823ed
   82f18:	000867ac 	.word	0x000867ac

00082f1c <vTraceSetObjectState>:

void vTraceSetObjectState(uint8_t objectclass, objectHandleType id, uint8_t value)
{
   82f1c:	b538      	push	{r3, r4, r5, lr}
   82f1e:	4604      	mov	r4, r0
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   82f20:	2806      	cmp	r0, #6
   82f22:	d815      	bhi.n	82f50 <vTraceSetObjectState+0x34>
   82f24:	4608      	mov	r0, r1
   82f26:	4615      	mov	r5, r2
		"vTraceSetObjectState: objectclass >= TRACE_NCLASSES", );
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   82f28:	4b0d      	ldr	r3, [pc, #52]	; (82f60 <vTraceSetObjectState+0x44>)
   82f2a:	681b      	ldr	r3, [r3, #0]
   82f2c:	4423      	add	r3, r4
   82f2e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   82f32:	428b      	cmp	r3, r1
   82f34:	d310      	bcc.n	82f58 <vTraceSetObjectState+0x3c>
		"vTraceSetObjectState: Invalid value for id", );

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   82f36:	4621      	mov	r1, r4
   82f38:	4b0a      	ldr	r3, [pc, #40]	; (82f64 <vTraceSetObjectState+0x48>)
   82f3a:	4798      	blx	r3
   82f3c:	4b08      	ldr	r3, [pc, #32]	; (82f60 <vTraceSetObjectState+0x44>)
   82f3e:	681b      	ldr	r3, [r3, #0]
   82f40:	441c      	add	r4, r3
   82f42:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
   82f46:	4418      	add	r0, r3
   82f48:	4410      	add	r0, r2
   82f4a:	f880 508c 	strb.w	r5, [r0, #140]	; 0x8c
   82f4e:	bd38      	pop	{r3, r4, r5, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   82f50:	4805      	ldr	r0, [pc, #20]	; (82f68 <vTraceSetObjectState+0x4c>)
   82f52:	4b06      	ldr	r3, [pc, #24]	; (82f6c <vTraceSetObjectState+0x50>)
   82f54:	4798      	blx	r3
   82f56:	bd38      	pop	{r3, r4, r5, pc}
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   82f58:	4805      	ldr	r0, [pc, #20]	; (82f70 <vTraceSetObjectState+0x54>)
   82f5a:	4b04      	ldr	r3, [pc, #16]	; (82f6c <vTraceSetObjectState+0x50>)
   82f5c:	4798      	blx	r3
   82f5e:	bd38      	pop	{r3, r4, r5, pc}
   82f60:	2007acd8 	.word	0x2007acd8
   82f64:	000825e9 	.word	0x000825e9
   82f68:	000867ec 	.word	0x000867ec
   82f6c:	000823ed 	.word	0x000823ed
   82f70:	00086830 	.word	0x00086830

00082f74 <uiTraceGetObjectState>:
}

uint8_t uiTraceGetObjectState(uint8_t objectclass, objectHandleType id)
{
   82f74:	b510      	push	{r4, lr}
   82f76:	4604      	mov	r4, r0
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   82f78:	2806      	cmp	r0, #6
   82f7a:	d814      	bhi.n	82fa6 <uiTraceGetObjectState+0x32>
   82f7c:	4608      	mov	r0, r1
		"uiTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   82f7e:	4b0f      	ldr	r3, [pc, #60]	; (82fbc <uiTraceGetObjectState+0x48>)
   82f80:	681b      	ldr	r3, [r3, #0]
   82f82:	4423      	add	r3, r4
   82f84:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   82f88:	428b      	cmp	r3, r1
   82f8a:	d311      	bcc.n	82fb0 <uiTraceGetObjectState+0x3c>
		"uiTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   82f8c:	4621      	mov	r1, r4
   82f8e:	4b0c      	ldr	r3, [pc, #48]	; (82fc0 <uiTraceGetObjectState+0x4c>)
   82f90:	4798      	blx	r3
   82f92:	4b0a      	ldr	r3, [pc, #40]	; (82fbc <uiTraceGetObjectState+0x48>)
   82f94:	681b      	ldr	r3, [r3, #0]
   82f96:	441c      	add	r4, r3
   82f98:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
   82f9c:	4418      	add	r0, r3
   82f9e:	4410      	add	r0, r2
   82fa0:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
}
   82fa4:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   82fa6:	4807      	ldr	r0, [pc, #28]	; (82fc4 <uiTraceGetObjectState+0x50>)
   82fa8:	4b07      	ldr	r3, [pc, #28]	; (82fc8 <uiTraceGetObjectState+0x54>)
   82faa:	4798      	blx	r3
   82fac:	2000      	movs	r0, #0
   82fae:	bd10      	pop	{r4, pc}
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   82fb0:	4806      	ldr	r0, [pc, #24]	; (82fcc <uiTraceGetObjectState+0x58>)
   82fb2:	4b05      	ldr	r3, [pc, #20]	; (82fc8 <uiTraceGetObjectState+0x54>)
   82fb4:	4798      	blx	r3
   82fb6:	2000      	movs	r0, #0
   82fb8:	bd10      	pop	{r4, pc}
   82fba:	bf00      	nop
   82fbc:	2007acd8 	.word	0x2007acd8
   82fc0:	000825e9 	.word	0x000825e9
   82fc4:	000866e4 	.word	0x000866e4
   82fc8:	000823ed 	.word	0x000823ed
   82fcc:	00086728 	.word	0x00086728

00082fd0 <vTraceStoreTaskswitch>:
{
   82fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TRACE_ASSERT(task_handle <= NTask,
   82fd2:	280f      	cmp	r0, #15
   82fd4:	d84b      	bhi.n	8306e <vTraceStoreTaskswitch+0x9e>
   82fd6:	4604      	mov	r4, r0
	if (TRACE_GET_TASK_FLAG_ISEXCLUDED(task_handle))
   82fd8:	f100 0321 	add.w	r3, r0, #33	; 0x21
   82fdc:	10da      	asrs	r2, r3, #3
   82fde:	4926      	ldr	r1, [pc, #152]	; (83078 <vTraceStoreTaskswitch+0xa8>)
   82fe0:	5c8a      	ldrb	r2, [r1, r2]
   82fe2:	f003 0307 	and.w	r3, r3, #7
   82fe6:	fa42 f303 	asr.w	r3, r2, r3
   82fea:	f013 0f01 	tst.w	r3, #1
		inExcludedTask = 1;
   82fee:	bf14      	ite	ne
   82ff0:	2301      	movne	r3, #1
		inExcludedTask = 0;
   82ff2:	2300      	moveq	r3, #0
   82ff4:	4a21      	ldr	r2, [pc, #132]	; (8307c <vTraceStoreTaskswitch+0xac>)
   82ff6:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82ff8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   82ffc:	2201      	movs	r2, #1
   82ffe:	f382 8810 	msr	PRIMASK, r2
	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   83002:	491f      	ldr	r1, [pc, #124]	; (83080 <vTraceStoreTaskswitch+0xb0>)
   83004:	680a      	ldr	r2, [r1, #0]
   83006:	3201      	adds	r2, #1
   83008:	600a      	str	r2, [r1, #0]
	if (task_handle == handle_of_last_logged_task)
   8300a:	4a1e      	ldr	r2, [pc, #120]	; (83084 <vTraceStoreTaskswitch+0xb4>)
   8300c:	7812      	ldrb	r2, [r2, #0]
   8300e:	4282      	cmp	r2, r0
   83010:	d026      	beq.n	83060 <vTraceStoreTaskswitch+0x90>
	if (!RecorderDataPtr->recorderActive)
   83012:	4a1d      	ldr	r2, [pc, #116]	; (83088 <vTraceStoreTaskswitch+0xb8>)
   83014:	6812      	ldr	r2, [r2, #0]
   83016:	6b12      	ldr	r2, [r2, #48]	; 0x30
   83018:	b312      	cbz	r2, 83060 <vTraceStoreTaskswitch+0x90>
	if (skipEvent == 0)
   8301a:	bb0b      	cbnz	r3, 83060 <vTraceStoreTaskswitch+0x90>
		isPendingContextSwitch = 0;
   8301c:	2200      	movs	r2, #0
   8301e:	4b1b      	ldr	r3, [pc, #108]	; (8308c <vTraceStoreTaskswitch+0xbc>)
   83020:	601a      	str	r2, [r3, #0]
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   83022:	f64f 70ff 	movw	r0, #65535	; 0xffff
   83026:	4b1a      	ldr	r3, [pc, #104]	; (83090 <vTraceStoreTaskswitch+0xc0>)
   83028:	4798      	blx	r3
   8302a:	4607      	mov	r7, r0
		handle_of_last_logged_task = task_handle;
   8302c:	4b15      	ldr	r3, [pc, #84]	; (83084 <vTraceStoreTaskswitch+0xb4>)
   8302e:	701c      	strb	r4, [r3, #0]
		ts = (TSEvent*)xTraceNextFreeEventBufferSlot();
   83030:	4b18      	ldr	r3, [pc, #96]	; (83094 <vTraceStoreTaskswitch+0xc4>)
   83032:	4798      	blx	r3
		if (ts != NULL)
   83034:	4606      	mov	r6, r0
   83036:	b198      	cbz	r0, 83060 <vTraceStoreTaskswitch+0x90>
			if (uiTraceGetObjectState(TRACE_CLASS_TASK,
   83038:	4b12      	ldr	r3, [pc, #72]	; (83084 <vTraceStoreTaskswitch+0xb4>)
   8303a:	7819      	ldrb	r1, [r3, #0]
   8303c:	2003      	movs	r0, #3
   8303e:	4b16      	ldr	r3, [pc, #88]	; (83098 <vTraceStoreTaskswitch+0xc8>)
   83040:	4798      	blx	r3
   83042:	2801      	cmp	r0, #1
				ts->type = TS_TASK_RESUME;
   83044:	bf0c      	ite	eq
   83046:	2307      	moveq	r3, #7
				ts->type = TS_TASK_BEGIN;
   83048:	2306      	movne	r3, #6
   8304a:	7033      	strb	r3, [r6, #0]
			ts->dts = dts3;
   8304c:	8077      	strh	r7, [r6, #2]
			ts->objHandle = hnd8;
   8304e:	7074      	strb	r4, [r6, #1]
			vTraceSetObjectState(TRACE_CLASS_TASK,
   83050:	2201      	movs	r2, #1
   83052:	4b0c      	ldr	r3, [pc, #48]	; (83084 <vTraceStoreTaskswitch+0xb4>)
   83054:	7819      	ldrb	r1, [r3, #0]
   83056:	2003      	movs	r0, #3
   83058:	4b10      	ldr	r3, [pc, #64]	; (8309c <vTraceStoreTaskswitch+0xcc>)
   8305a:	4798      	blx	r3
			prvTraceUpdateCounters();
   8305c:	4b10      	ldr	r3, [pc, #64]	; (830a0 <vTraceStoreTaskswitch+0xd0>)
   8305e:	4798      	blx	r3
	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   83060:	4a07      	ldr	r2, [pc, #28]	; (83080 <vTraceStoreTaskswitch+0xb0>)
   83062:	6813      	ldr	r3, [r2, #0]
   83064:	3b01      	subs	r3, #1
   83066:	6013      	str	r3, [r2, #0]
   83068:	f385 8810 	msr	PRIMASK, r5
   8306c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	TRACE_ASSERT(task_handle <= NTask,
   8306e:	480d      	ldr	r0, [pc, #52]	; (830a4 <vTraceStoreTaskswitch+0xd4>)
   83070:	4b0d      	ldr	r3, [pc, #52]	; (830a8 <vTraceStoreTaskswitch+0xd8>)
   83072:	4798      	blx	r3
   83074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83076:	bf00      	nop
   83078:	2007ad00 	.word	0x2007ad00
   8307c:	2007ad9d 	.word	0x2007ad9d
   83080:	2007ad7c 	.word	0x2007ad7c
   83084:	2007ad9c 	.word	0x2007ad9c
   83088:	2007acd8 	.word	0x2007acd8
   8308c:	2007ada0 	.word	0x2007ada0
   83090:	000828d1 	.word	0x000828d1
   83094:	000825b1 	.word	0x000825b1
   83098:	00082f75 	.word	0x00082f75
   8309c:	00082f1d 	.word	0x00082f1d
   830a0:	0008289d 	.word	0x0008289d
   830a4:	00086c40 	.word	0x00086c40
   830a8:	000823ed 	.word	0x000823ed

000830ac <vTraceSetTaskInstanceFinished>:

void vTraceSetTaskInstanceFinished(objectHandleType handle)
{
   830ac:	b508      	push	{r3, lr}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   830ae:	4b0b      	ldr	r3, [pc, #44]	; (830dc <vTraceSetTaskInstanceFinished+0x30>)
   830b0:	681b      	ldr	r3, [r3, #0]
   830b2:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
   830b6:	4283      	cmp	r3, r0
   830b8:	d30c      	bcc.n	830d4 <vTraceSetTaskInstanceFinished+0x28>
		"vTraceSetTaskInstanceFinished: Invalid value for handle", );

#if (USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   830ba:	2103      	movs	r1, #3
   830bc:	4b08      	ldr	r3, [pc, #32]	; (830e0 <vTraceSetTaskInstanceFinished+0x34>)
   830be:	4798      	blx	r3
   830c0:	4b06      	ldr	r3, [pc, #24]	; (830dc <vTraceSetTaskInstanceFinished+0x30>)
   830c2:	681b      	ldr	r3, [r3, #0]
   830c4:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
   830c8:	4418      	add	r0, r3
   830ca:	4410      	add	r0, r2
   830cc:	2300      	movs	r3, #0
   830ce:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
   830d2:	bd08      	pop	{r3, pc}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   830d4:	4803      	ldr	r0, [pc, #12]	; (830e4 <vTraceSetTaskInstanceFinished+0x38>)
   830d6:	4b04      	ldr	r3, [pc, #16]	; (830e8 <vTraceSetTaskInstanceFinished+0x3c>)
   830d8:	4798      	blx	r3
   830da:	bd08      	pop	{r3, pc}
   830dc:	2007acd8 	.word	0x2007acd8
   830e0:	000825e9 	.word	0x000825e9
   830e4:	000868f4 	.word	0x000868f4
   830e8:	000823ed 	.word	0x000823ed

000830ec <prvTraceGetObjectNumber>:
int uiInEventGroupSetBitsFromISR = 0;

#if (FREERTOS_VERSION < FREERTOS_VERSION_8_X)

objectHandleType prvTraceGetObjectNumber(void* handle)
{
   830ec:	b508      	push	{r3, lr}
	return (objectHandleType) ucQueueGetQueueNumber(handle);
   830ee:	4b01      	ldr	r3, [pc, #4]	; (830f4 <prvTraceGetObjectNumber+0x8>)
   830f0:	4798      	blx	r3
}
   830f2:	bd08      	pop	{r3, pc}
   830f4:	00080d59 	.word	0x00080d59

000830f8 <prvTraceGetObjectType>:
}

#endif

unsigned char prvTraceGetObjectType(void* handle)
{
   830f8:	b508      	push	{r3, lr}
	return ucQueueGetQueueType(handle);
   830fa:	4b01      	ldr	r3, [pc, #4]	; (83100 <prvTraceGetObjectType+0x8>)
   830fc:	4798      	blx	r3
}
   830fe:	bd08      	pop	{r3, pc}
   83100:	00080d5f 	.word	0x00080d5f

00083104 <prvTraceGetTaskNumber>:

objectHandleType prvTraceGetTaskNumber(void* handle)
{
   83104:	b508      	push	{r3, lr}
	return (objectHandleType)uxTaskGetTaskNumber(handle);
   83106:	4b02      	ldr	r3, [pc, #8]	; (83110 <prvTraceGetTaskNumber+0xc>)
   83108:	4798      	blx	r3
}
   8310a:	b2c0      	uxtb	r0, r0
   8310c:	bd08      	pop	{r3, pc}
   8310e:	bf00      	nop
   83110:	00081755 	.word	0x00081755

00083114 <prvTraceGetCurrentTaskHandle>:
{
	return xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED;
}

void* prvTraceGetCurrentTaskHandle()
{
   83114:	b508      	push	{r3, lr}
	return xTaskGetCurrentTaskHandle();
   83116:	4b01      	ldr	r3, [pc, #4]	; (8311c <prvTraceGetCurrentTaskHandle+0x8>)
   83118:	4798      	blx	r3
}
   8311a:	bd08      	pop	{r3, pc}
   8311c:	00081761 	.word	0x00081761

00083120 <vTraceInitObjectPropertyTable>:

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   83120:	4b29      	ldr	r3, [pc, #164]	; (831c8 <vTraceInitObjectPropertyTable+0xa8>)
   83122:	681b      	ldr	r3, [r3, #0]
   83124:	2207      	movs	r2, #7
   83126:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = NQueue;
   83128:	220a      	movs	r2, #10
   8312a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = NSemaphore;
   8312e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = NMutex;
   83132:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = NTask;
   83136:	220f      	movs	r2, #15
   83138:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = NISR;
   8313c:	2105      	movs	r1, #5
   8313e:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = NTimer;
   83142:	2102      	movs	r1, #2
   83144:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = NEventGroup;	
   83148:	f883 106a 	strb.w	r1, [r3, #106]	; 0x6a
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = NameLenQueue;
   8314c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = NameLenSemaphore;
   83150:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = NameLenMutex;
   83154:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = NameLenTask;
   83158:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = NameLenISR;
   8315c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = NameLenTimer;
   83160:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = NameLenEventGroup;	
   83164:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   83168:	2210      	movs	r2, #16
   8316a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   8316e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   83172:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   83176:	2113      	movs	r1, #19
   83178:	f883 1077 	strb.w	r1, [r3, #119]	; 0x77
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   8317c:	2011      	movs	r0, #17
   8317e:	f883 0078 	strb.w	r0, [r3, #120]	; 0x78
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   83182:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   83186:	f883 107a 	strb.w	r1, [r3, #122]	; 0x7a
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   8318a:	2200      	movs	r2, #0
   8318c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   83190:	22a0      	movs	r2, #160	; 0xa0
   83192:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   83196:	f44f 72a0 	mov.w	r2, #320	; 0x140
   8319a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   8319e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   831a2:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   831a6:	f240 22fd 	movw	r2, #765	; 0x2fd
   831aa:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   831ae:	f240 3252 	movw	r2, #850	; 0x352
   831b2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   831b6:	f240 3272 	movw	r2, #882	; 0x372
   831ba:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   831be:	f44f 7266 	mov.w	r2, #920	; 0x398
   831c2:	661a      	str	r2, [r3, #96]	; 0x60
   831c4:	4770      	bx	lr
   831c6:	bf00      	nop
   831c8:	2007acd8 	.word	0x2007acd8

000831cc <vTraceInitObjectHandleStack>:
}

/* Initialization of the handle mechanism, see e.g, xTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   831cc:	4b12      	ldr	r3, [pc, #72]	; (83218 <vTraceInitObjectHandleStack+0x4c>)
   831ce:	2200      	movs	r2, #0
   831d0:	81da      	strh	r2, [r3, #14]
   831d2:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = NQueue;
   831d4:	220a      	movs	r2, #10
   831d6:	821a      	strh	r2, [r3, #16]
   831d8:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = NQueue + NSemaphore;
   831da:	2214      	movs	r2, #20
   831dc:	825a      	strh	r2, [r3, #18]
   831de:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = NQueue + NSemaphore + NMutex;
   831e0:	221e      	movs	r2, #30
   831e2:	829a      	strh	r2, [r3, #20]
   831e4:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = NQueue + NSemaphore + NMutex + NTask;
   831e6:	222d      	movs	r2, #45	; 0x2d
   831e8:	82da      	strh	r2, [r3, #22]
   831ea:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = NQueue + NSemaphore + NMutex + NTask + NISR;
   831ec:	2232      	movs	r2, #50	; 0x32
   831ee:	831a      	strh	r2, [r3, #24]
   831f0:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = NQueue + NSemaphore + NMutex + NTask + NISR + NTimer;
   831f2:	2234      	movs	r2, #52	; 0x34
   831f4:	835a      	strh	r2, [r3, #26]
   831f6:	819a      	strh	r2, [r3, #12]

	objectHandleStacks.highestIndexOfClass[0] = NQueue - 1;
   831f8:	2209      	movs	r2, #9
   831fa:	839a      	strh	r2, [r3, #28]
	objectHandleStacks.highestIndexOfClass[1] = NQueue + NSemaphore - 1;
   831fc:	2213      	movs	r2, #19
   831fe:	83da      	strh	r2, [r3, #30]
	objectHandleStacks.highestIndexOfClass[2] = NQueue + NSemaphore + NMutex - 1;
   83200:	221d      	movs	r2, #29
   83202:	841a      	strh	r2, [r3, #32]
	objectHandleStacks.highestIndexOfClass[3] = NQueue + NSemaphore + NMutex + NTask - 1;
   83204:	222c      	movs	r2, #44	; 0x2c
   83206:	845a      	strh	r2, [r3, #34]	; 0x22
	objectHandleStacks.highestIndexOfClass[4] = NQueue + NSemaphore + NMutex + NTask + NISR - 1;
   83208:	2231      	movs	r2, #49	; 0x31
   8320a:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[5] = NQueue + NSemaphore + NMutex + NTask + NISR + NTimer - 1;
   8320c:	2233      	movs	r2, #51	; 0x33
   8320e:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[6] = NQueue + NSemaphore + NMutex + NTask + NISR + NTimer + NEventGroup - 1;
   83210:	2235      	movs	r2, #53	; 0x35
   83212:	851a      	strh	r2, [r3, #40]	; 0x28
   83214:	4770      	bx	lr
   83216:	bf00      	nop
   83218:	2007ad08 	.word	0x2007ad08

0008321c <pszTraceGetErrorNotEnoughHandles>:
}
	
/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
	switch(objectclass)
   8321c:	2806      	cmp	r0, #6
   8321e:	d811      	bhi.n	83244 <pszTraceGetErrorNotEnoughHandles+0x28>
   83220:	e8df f000 	tbb	[pc, r0]
   83224:	1208060a 	.word	0x1208060a
   83228:	0c04      	.short	0x0c04
   8322a:	0e          	.byte	0x0e
   8322b:	00          	.byte	0x00
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase NTask in trcConfig.h";
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase NISR in trcConfig.h";
   8322c:	4807      	ldr	r0, [pc, #28]	; (8324c <pszTraceGetErrorNotEnoughHandles+0x30>)
   8322e:	4770      	bx	lr
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase NSemaphore in trcConfig.h";
   83230:	4807      	ldr	r0, [pc, #28]	; (83250 <pszTraceGetErrorNotEnoughHandles+0x34>)
   83232:	4770      	bx	lr
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase NMutex in trcConfig.h";
   83234:	4807      	ldr	r0, [pc, #28]	; (83254 <pszTraceGetErrorNotEnoughHandles+0x38>)
   83236:	4770      	bx	lr
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase NQueue in trcConfig.h";
   83238:	4807      	ldr	r0, [pc, #28]	; (83258 <pszTraceGetErrorNotEnoughHandles+0x3c>)
   8323a:	4770      	bx	lr
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase NTimer in trcConfig.h";
   8323c:	4807      	ldr	r0, [pc, #28]	; (8325c <pszTraceGetErrorNotEnoughHandles+0x40>)
   8323e:	4770      	bx	lr
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase NEventGroup in trcConfig.h";		
   83240:	4807      	ldr	r0, [pc, #28]	; (83260 <pszTraceGetErrorNotEnoughHandles+0x44>)
   83242:	4770      	bx	lr
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   83244:	4807      	ldr	r0, [pc, #28]	; (83264 <pszTraceGetErrorNotEnoughHandles+0x48>)
   83246:	4770      	bx	lr
		return "Not enough TASK handles - increase NTask in trcConfig.h";
   83248:	4807      	ldr	r0, [pc, #28]	; (83268 <pszTraceGetErrorNotEnoughHandles+0x4c>)
	}
}
   8324a:	4770      	bx	lr
   8324c:	00086cbc 	.word	0x00086cbc
   83250:	00086cf4 	.word	0x00086cf4
   83254:	00086d38 	.word	0x00086d38
   83258:	00086d74 	.word	0x00086d74
   8325c:	00086db0 	.word	0x00086db0
   83260:	00086dec 	.word	0x00086dec
   83264:	00086e30 	.word	0x00086e30
   83268:	00086c84 	.word	0x00086c84

0008326c <uiTraceIsObjectExcluded>:

/* Returns the exclude state of the object */
uint8_t uiTraceIsObjectExcluded(traceObjectClass objectclass, objectHandleType handle)
{
   8326c:	b508      	push	{r3, lr}
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, "prvTraceIsObjectExcluded: objectclass >= TRACE_NCLASSES", 1);
   8326e:	2806      	cmp	r0, #6
   83270:	d80e      	bhi.n	83290 <uiTraceIsObjectExcluded+0x24>
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], "uiTraceIsObjectExcluded: Invalid value for handle", 1);
   83272:	4b2c      	ldr	r3, [pc, #176]	; (83324 <uiTraceIsObjectExcluded+0xb8>)
   83274:	681b      	ldr	r3, [r3, #0]
   83276:	4403      	add	r3, r0
   83278:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   8327c:	428b      	cmp	r3, r1
   8327e:	d30c      	bcc.n	8329a <uiTraceIsObjectExcluded+0x2e>
	
	switch(objectclass)
   83280:	2806      	cmp	r0, #6
   83282:	d84a      	bhi.n	8331a <uiTraceIsObjectExcluded+0xae>
   83284:	e8df f000 	tbb	[pc, r0]
   83288:	0e22182c 	.word	0x0e22182c
   8328c:	3549      	.short	0x3549
   8328e:	3f          	.byte	0x3f
   8328f:	00          	.byte	0x00
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, "prvTraceIsObjectExcluded: objectclass >= TRACE_NCLASSES", 1);
   83290:	4825      	ldr	r0, [pc, #148]	; (83328 <uiTraceIsObjectExcluded+0xbc>)
   83292:	4b26      	ldr	r3, [pc, #152]	; (8332c <uiTraceIsObjectExcluded+0xc0>)
   83294:	4798      	blx	r3
   83296:	2001      	movs	r0, #1
   83298:	bd08      	pop	{r3, pc}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], "uiTraceIsObjectExcluded: Invalid value for handle", 1);
   8329a:	4825      	ldr	r0, [pc, #148]	; (83330 <uiTraceIsObjectExcluded+0xc4>)
   8329c:	4b23      	ldr	r3, [pc, #140]	; (8332c <uiTraceIsObjectExcluded+0xc0>)
   8329e:	4798      	blx	r3
   832a0:	2001      	movs	r0, #1
   832a2:	bd08      	pop	{r3, pc}
	{
	case TRACE_CLASS_TASK:
		return TRACE_GET_TASK_FLAG_ISEXCLUDED(handle);
   832a4:	3121      	adds	r1, #33	; 0x21
   832a6:	10cb      	asrs	r3, r1, #3
   832a8:	f001 0107 	and.w	r1, r1, #7
   832ac:	2001      	movs	r0, #1
   832ae:	4088      	lsls	r0, r1
   832b0:	4a20      	ldr	r2, [pc, #128]	; (83334 <uiTraceIsObjectExcluded+0xc8>)
   832b2:	5cd1      	ldrb	r1, [r2, r3]
   832b4:	4008      	ands	r0, r1
   832b6:	bd08      	pop	{r3, pc}
	case TRACE_CLASS_SEMAPHORE:
		return TRACE_GET_SEMAPHORE_FLAG_ISEXCLUDED(handle);
   832b8:	310b      	adds	r1, #11
   832ba:	10cb      	asrs	r3, r1, #3
   832bc:	f001 0107 	and.w	r1, r1, #7
   832c0:	2001      	movs	r0, #1
   832c2:	4088      	lsls	r0, r1
   832c4:	4a1b      	ldr	r2, [pc, #108]	; (83334 <uiTraceIsObjectExcluded+0xc8>)
   832c6:	5cd1      	ldrb	r1, [r2, r3]
   832c8:	4008      	ands	r0, r1
   832ca:	bd08      	pop	{r3, pc}
	case TRACE_CLASS_MUTEX:
		return TRACE_GET_MUTEX_FLAG_ISEXCLUDED(handle);
   832cc:	3116      	adds	r1, #22
   832ce:	10cb      	asrs	r3, r1, #3
   832d0:	f001 0107 	and.w	r1, r1, #7
   832d4:	2001      	movs	r0, #1
   832d6:	4088      	lsls	r0, r1
   832d8:	4a16      	ldr	r2, [pc, #88]	; (83334 <uiTraceIsObjectExcluded+0xc8>)
   832da:	5cd1      	ldrb	r1, [r2, r3]
   832dc:	4008      	ands	r0, r1
   832de:	bd08      	pop	{r3, pc}
	case TRACE_CLASS_QUEUE:
		return TRACE_GET_QUEUE_FLAG_ISEXCLUDED(handle);
   832e0:	08cb      	lsrs	r3, r1, #3
   832e2:	f001 0107 	and.w	r1, r1, #7
   832e6:	2001      	movs	r0, #1
   832e8:	4088      	lsls	r0, r1
   832ea:	4a12      	ldr	r2, [pc, #72]	; (83334 <uiTraceIsObjectExcluded+0xc8>)
   832ec:	5cd1      	ldrb	r1, [r2, r3]
   832ee:	4008      	ands	r0, r1
   832f0:	bd08      	pop	{r3, pc}
	case TRACE_CLASS_TIMER:
		return TRACE_GET_TIMER_FLAG_ISEXCLUDED(handle);		
   832f2:	3131      	adds	r1, #49	; 0x31
   832f4:	10cb      	asrs	r3, r1, #3
   832f6:	f001 0107 	and.w	r1, r1, #7
   832fa:	2001      	movs	r0, #1
   832fc:	4088      	lsls	r0, r1
   832fe:	4a0d      	ldr	r2, [pc, #52]	; (83334 <uiTraceIsObjectExcluded+0xc8>)
   83300:	5cd1      	ldrb	r1, [r2, r3]
   83302:	4008      	ands	r0, r1
   83304:	bd08      	pop	{r3, pc}
	case TRACE_CLASS_EVENTGROUP:
		return TRACE_GET_EVENTGROUP_FLAG_ISEXCLUDED(handle);				
   83306:	3134      	adds	r1, #52	; 0x34
   83308:	10cb      	asrs	r3, r1, #3
   8330a:	f001 0107 	and.w	r1, r1, #7
   8330e:	2001      	movs	r0, #1
   83310:	4088      	lsls	r0, r1
   83312:	4a08      	ldr	r2, [pc, #32]	; (83334 <uiTraceIsObjectExcluded+0xc8>)
   83314:	5cd1      	ldrb	r1, [r2, r3]
   83316:	4008      	ands	r0, r1
   83318:	bd08      	pop	{r3, pc}
	}
	
	vTraceError("Invalid object class ID in uiTraceIsObjectExcluded!");
   8331a:	4807      	ldr	r0, [pc, #28]	; (83338 <uiTraceIsObjectExcluded+0xcc>)
   8331c:	4b03      	ldr	r3, [pc, #12]	; (8332c <uiTraceIsObjectExcluded+0xc0>)
   8331e:	4798      	blx	r3
	
	/* Must never reach */
	return 1;
   83320:	2001      	movs	r0, #1
}
   83322:	bd08      	pop	{r3, pc}
   83324:	2007acd8 	.word	0x2007acd8
   83328:	00086e60 	.word	0x00086e60
   8332c:	000823ed 	.word	0x000823ed
   83330:	00086ea8 	.word	0x00086ea8
   83334:	2007ad00 	.word	0x2007ad00
   83338:	00086ee8 	.word	0x00086ee8

0008333c <vTraceInitTraceData>:
 *
 * Allocates, if necessary, and initializes the recorder data structure, based
 * on the constants in trcConfig.h.
 ******************************************************************************/
void vTraceInitTraceData(void)
{
   8333c:	b508      	push	{r3, lr}
	prvTraceInitTraceData();
   8333e:	4b01      	ldr	r3, [pc, #4]	; (83344 <vTraceInitTraceData+0x8>)
   83340:	4798      	blx	r3
   83342:	bd08      	pop	{r3, pc}
   83344:	00082441 	.word	0x00082441

00083348 <uiTraceStart>:
 * error. In that case, check vTraceGetLastError to get the error message.
 * Any error message is also presented when opening a trace file.
 ******************************************************************************/

uint32_t uiTraceStart(void)
{
   83348:	b538      	push	{r3, r4, r5, lr}
	objectHandleType handle;
	TRACE_SR_ALLOC_CRITICAL_SECTION();

	handle = 0;

	if (RecorderDataPtr == NULL)
   8334a:	4b1d      	ldr	r3, [pc, #116]	; (833c0 <uiTraceStart+0x78>)
   8334c:	681b      	ldr	r3, [r3, #0]
   8334e:	b133      	cbz	r3, 8335e <uiTraceStart+0x16>
	{
		vTraceError("RecorderDataPtr is NULL. Call vTraceInitTraceData() before starting trace.");
		return 0;
	}

	if (traceErrorMessage == NULL)
   83350:	4b1c      	ldr	r3, [pc, #112]	; (833c4 <uiTraceStart+0x7c>)
   83352:	681b      	ldr	r3, [r3, #0]
   83354:	b143      	cbz	r3, 83368 <uiTraceStart+0x20>

		vTraceStoreTaskswitch(handle); /* Register the currently running task */
		trcCRITICAL_SECTION_END();
	}

	return RecorderDataPtr->recorderActive;
   83356:	4b1a      	ldr	r3, [pc, #104]	; (833c0 <uiTraceStart+0x78>)
   83358:	681b      	ldr	r3, [r3, #0]
   8335a:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
   8335c:	bd38      	pop	{r3, r4, r5, pc}
		vTraceError("RecorderDataPtr is NULL. Call vTraceInitTraceData() before starting trace.");
   8335e:	481a      	ldr	r0, [pc, #104]	; (833c8 <uiTraceStart+0x80>)
   83360:	4b1a      	ldr	r3, [pc, #104]	; (833cc <uiTraceStart+0x84>)
   83362:	4798      	blx	r3
		return 0;
   83364:	2000      	movs	r0, #0
   83366:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   83368:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   8336c:	2201      	movs	r2, #1
   8336e:	f382 8810 	msr	PRIMASK, r2
		trcCRITICAL_SECTION_BEGIN();
   83372:	4917      	ldr	r1, [pc, #92]	; (833d0 <uiTraceStart+0x88>)
   83374:	680b      	ldr	r3, [r1, #0]
   83376:	4413      	add	r3, r2
   83378:	600b      	str	r3, [r1, #0]
		RecorderDataPtr->recorderActive = 1;
   8337a:	4b11      	ldr	r3, [pc, #68]	; (833c0 <uiTraceStart+0x78>)
   8337c:	681b      	ldr	r3, [r3, #0]
   8337e:	631a      	str	r2, [r3, #48]	; 0x30
		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   83380:	4b14      	ldr	r3, [pc, #80]	; (833d4 <uiTraceStart+0x8c>)
   83382:	4798      	blx	r3
   83384:	4b14      	ldr	r3, [pc, #80]	; (833d8 <uiTraceStart+0x90>)
   83386:	4798      	blx	r3
		if (handle == 0)
   83388:	4605      	mov	r5, r0
   8338a:	b148      	cbz	r0, 833a0 <uiTraceStart+0x58>
		vTraceStoreTaskswitch(handle); /* Register the currently running task */
   8338c:	4628      	mov	r0, r5
   8338e:	4b13      	ldr	r3, [pc, #76]	; (833dc <uiTraceStart+0x94>)
   83390:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   83392:	4a0f      	ldr	r2, [pc, #60]	; (833d0 <uiTraceStart+0x88>)
   83394:	6813      	ldr	r3, [r2, #0]
   83396:	3b01      	subs	r3, #1
   83398:	6013      	str	r3, [r2, #0]
   8339a:	f384 8810 	msr	PRIMASK, r4
   8339e:	e7da      	b.n	83356 <uiTraceStart+0xe>
			handle = xTraceGetObjectHandle(TRACE_CLASS_TASK);
   833a0:	2003      	movs	r0, #3
   833a2:	4b0f      	ldr	r3, [pc, #60]	; (833e0 <uiTraceStart+0x98>)
   833a4:	4798      	blx	r3
   833a6:	4605      	mov	r5, r0
			vTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   833a8:	4a0e      	ldr	r2, [pc, #56]	; (833e4 <uiTraceStart+0x9c>)
   833aa:	4601      	mov	r1, r0
   833ac:	2003      	movs	r0, #3
   833ae:	4b0e      	ldr	r3, [pc, #56]	; (833e8 <uiTraceStart+0xa0>)
   833b0:	4798      	blx	r3
			vTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   833b2:	2200      	movs	r2, #0
   833b4:	4629      	mov	r1, r5
   833b6:	2003      	movs	r0, #3
   833b8:	4b0c      	ldr	r3, [pc, #48]	; (833ec <uiTraceStart+0xa4>)
   833ba:	4798      	blx	r3
   833bc:	e7e6      	b.n	8338c <uiTraceStart+0x44>
   833be:	bf00      	nop
   833c0:	2007acd8 	.word	0x2007acd8
   833c4:	2007ad80 	.word	0x2007ad80
   833c8:	00086f1c 	.word	0x00086f1c
   833cc:	000823ed 	.word	0x000823ed
   833d0:	2007ad7c 	.word	0x2007ad7c
   833d4:	00083115 	.word	0x00083115
   833d8:	00083105 	.word	0x00083105
   833dc:	00082fd1 	.word	0x00082fd1
   833e0:	0008263d 	.word	0x0008263d
   833e4:	00086f68 	.word	0x00086f68
   833e8:	00082771 	.word	0x00082771
   833ec:	00082e69 	.word	0x00082e69

000833f0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   833f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   833f2:	b083      	sub	sp, #12
   833f4:	4604      	mov	r4, r0
   833f6:	460d      	mov	r5, r1
	uint32_t val = 0;
   833f8:	2300      	movs	r3, #0
   833fa:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   833fc:	4b20      	ldr	r3, [pc, #128]	; (83480 <usart_serial_getchar+0x90>)
   833fe:	4298      	cmp	r0, r3
   83400:	d00d      	beq.n	8341e <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   83402:	4b20      	ldr	r3, [pc, #128]	; (83484 <usart_serial_getchar+0x94>)
   83404:	4298      	cmp	r0, r3
   83406:	d012      	beq.n	8342e <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   83408:	4b1f      	ldr	r3, [pc, #124]	; (83488 <usart_serial_getchar+0x98>)
   8340a:	4298      	cmp	r0, r3
   8340c:	d019      	beq.n	83442 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8340e:	4b1f      	ldr	r3, [pc, #124]	; (8348c <usart_serial_getchar+0x9c>)
   83410:	429c      	cmp	r4, r3
   83412:	d020      	beq.n	83456 <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   83414:	4b1e      	ldr	r3, [pc, #120]	; (83490 <usart_serial_getchar+0xa0>)
   83416:	429c      	cmp	r4, r3
   83418:	d027      	beq.n	8346a <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8341a:	b003      	add	sp, #12
   8341c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   8341e:	461f      	mov	r7, r3
   83420:	4e1c      	ldr	r6, [pc, #112]	; (83494 <usart_serial_getchar+0xa4>)
   83422:	4629      	mov	r1, r5
   83424:	4638      	mov	r0, r7
   83426:	47b0      	blx	r6
   83428:	2800      	cmp	r0, #0
   8342a:	d1fa      	bne.n	83422 <usart_serial_getchar+0x32>
   8342c:	e7ef      	b.n	8340e <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   8342e:	461f      	mov	r7, r3
   83430:	4e19      	ldr	r6, [pc, #100]	; (83498 <usart_serial_getchar+0xa8>)
   83432:	a901      	add	r1, sp, #4
   83434:	4638      	mov	r0, r7
   83436:	47b0      	blx	r6
   83438:	2800      	cmp	r0, #0
   8343a:	d1fa      	bne.n	83432 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   8343c:	9b01      	ldr	r3, [sp, #4]
   8343e:	702b      	strb	r3, [r5, #0]
   83440:	e7e8      	b.n	83414 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   83442:	461e      	mov	r6, r3
   83444:	4c14      	ldr	r4, [pc, #80]	; (83498 <usart_serial_getchar+0xa8>)
   83446:	a901      	add	r1, sp, #4
   83448:	4630      	mov	r0, r6
   8344a:	47a0      	blx	r4
   8344c:	2800      	cmp	r0, #0
   8344e:	d1fa      	bne.n	83446 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   83450:	9b01      	ldr	r3, [sp, #4]
   83452:	702b      	strb	r3, [r5, #0]
   83454:	e7e1      	b.n	8341a <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   83456:	461e      	mov	r6, r3
   83458:	4c0f      	ldr	r4, [pc, #60]	; (83498 <usart_serial_getchar+0xa8>)
   8345a:	a901      	add	r1, sp, #4
   8345c:	4630      	mov	r0, r6
   8345e:	47a0      	blx	r4
   83460:	2800      	cmp	r0, #0
   83462:	d1fa      	bne.n	8345a <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   83464:	9b01      	ldr	r3, [sp, #4]
   83466:	702b      	strb	r3, [r5, #0]
   83468:	e7d7      	b.n	8341a <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   8346a:	461e      	mov	r6, r3
   8346c:	4c0a      	ldr	r4, [pc, #40]	; (83498 <usart_serial_getchar+0xa8>)
   8346e:	a901      	add	r1, sp, #4
   83470:	4630      	mov	r0, r6
   83472:	47a0      	blx	r4
   83474:	2800      	cmp	r0, #0
   83476:	d1fa      	bne.n	8346e <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   83478:	9b01      	ldr	r3, [sp, #4]
   8347a:	702b      	strb	r3, [r5, #0]
}
   8347c:	e7cd      	b.n	8341a <usart_serial_getchar+0x2a>
   8347e:	bf00      	nop
   83480:	400e0800 	.word	0x400e0800
   83484:	40098000 	.word	0x40098000
   83488:	4009c000 	.word	0x4009c000
   8348c:	400a0000 	.word	0x400a0000
   83490:	400a4000 	.word	0x400a4000
   83494:	00081d0b 	.word	0x00081d0b
   83498:	000801b1 	.word	0x000801b1

0008349c <usart_serial_putchar>:
{
   8349c:	b570      	push	{r4, r5, r6, lr}
   8349e:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   834a0:	4b1e      	ldr	r3, [pc, #120]	; (8351c <usart_serial_putchar+0x80>)
   834a2:	4298      	cmp	r0, r3
   834a4:	d00d      	beq.n	834c2 <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   834a6:	4b1e      	ldr	r3, [pc, #120]	; (83520 <usart_serial_putchar+0x84>)
   834a8:	4298      	cmp	r0, r3
   834aa:	d013      	beq.n	834d4 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   834ac:	4b1d      	ldr	r3, [pc, #116]	; (83524 <usart_serial_putchar+0x88>)
   834ae:	4298      	cmp	r0, r3
   834b0:	d019      	beq.n	834e6 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   834b2:	4b1d      	ldr	r3, [pc, #116]	; (83528 <usart_serial_putchar+0x8c>)
   834b4:	4298      	cmp	r0, r3
   834b6:	d01f      	beq.n	834f8 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   834b8:	4b1c      	ldr	r3, [pc, #112]	; (8352c <usart_serial_putchar+0x90>)
   834ba:	4298      	cmp	r0, r3
   834bc:	d025      	beq.n	8350a <usart_serial_putchar+0x6e>
	return 0;
   834be:	2000      	movs	r0, #0
}
   834c0:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   834c2:	461e      	mov	r6, r3
   834c4:	4d1a      	ldr	r5, [pc, #104]	; (83530 <usart_serial_putchar+0x94>)
   834c6:	4621      	mov	r1, r4
   834c8:	4630      	mov	r0, r6
   834ca:	47a8      	blx	r5
   834cc:	2800      	cmp	r0, #0
   834ce:	d1fa      	bne.n	834c6 <usart_serial_putchar+0x2a>
		return 1;
   834d0:	2001      	movs	r0, #1
   834d2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   834d4:	461e      	mov	r6, r3
   834d6:	4d17      	ldr	r5, [pc, #92]	; (83534 <usart_serial_putchar+0x98>)
   834d8:	4621      	mov	r1, r4
   834da:	4630      	mov	r0, r6
   834dc:	47a8      	blx	r5
   834de:	2800      	cmp	r0, #0
   834e0:	d1fa      	bne.n	834d8 <usart_serial_putchar+0x3c>
		return 1;
   834e2:	2001      	movs	r0, #1
   834e4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   834e6:	461e      	mov	r6, r3
   834e8:	4d12      	ldr	r5, [pc, #72]	; (83534 <usart_serial_putchar+0x98>)
   834ea:	4621      	mov	r1, r4
   834ec:	4630      	mov	r0, r6
   834ee:	47a8      	blx	r5
   834f0:	2800      	cmp	r0, #0
   834f2:	d1fa      	bne.n	834ea <usart_serial_putchar+0x4e>
		return 1;
   834f4:	2001      	movs	r0, #1
   834f6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   834f8:	461e      	mov	r6, r3
   834fa:	4d0e      	ldr	r5, [pc, #56]	; (83534 <usart_serial_putchar+0x98>)
   834fc:	4621      	mov	r1, r4
   834fe:	4630      	mov	r0, r6
   83500:	47a8      	blx	r5
   83502:	2800      	cmp	r0, #0
   83504:	d1fa      	bne.n	834fc <usart_serial_putchar+0x60>
		return 1;
   83506:	2001      	movs	r0, #1
   83508:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8350a:	461e      	mov	r6, r3
   8350c:	4d09      	ldr	r5, [pc, #36]	; (83534 <usart_serial_putchar+0x98>)
   8350e:	4621      	mov	r1, r4
   83510:	4630      	mov	r0, r6
   83512:	47a8      	blx	r5
   83514:	2800      	cmp	r0, #0
   83516:	d1fa      	bne.n	8350e <usart_serial_putchar+0x72>
		return 1;
   83518:	2001      	movs	r0, #1
   8351a:	bd70      	pop	{r4, r5, r6, pc}
   8351c:	400e0800 	.word	0x400e0800
   83520:	40098000 	.word	0x40098000
   83524:	4009c000 	.word	0x4009c000
   83528:	400a0000 	.word	0x400a0000
   8352c:	400a4000 	.word	0x400a4000
   83530:	00081cfb 	.word	0x00081cfb
   83534:	0008019d 	.word	0x0008019d

00083538 <vTaskFunction>:
	for( ;; );
}
/*-----------------------------------------------------------*/

void vTaskFunction( void *pvParameters )
{
   83538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8353a:	4607      	mov	r7, r0

	/* As per most tasks, this task is implemented in an infinite loop. */
	for( ;; )
	{
		/* Print out the name of this task. */
		printf( "%s\n",pcTaskName );
   8353c:	4e04      	ldr	r6, [pc, #16]	; (83550 <vTaskFunction+0x18>)
   8353e:	4d05      	ldr	r5, [pc, #20]	; (83554 <vTaskFunction+0x1c>)

		/* Delay for a period.  This time we use a call to vTaskDelay() which
		puts the task into the Blocked state until the delay period has expired.
		The delay period is specified in 'ticks'. */
		vTaskDelay( 1000 / portTICK_RATE_MS );
   83540:	4c05      	ldr	r4, [pc, #20]	; (83558 <vTaskFunction+0x20>)
		printf( "%s\n",pcTaskName );
   83542:	4639      	mov	r1, r7
   83544:	4630      	mov	r0, r6
   83546:	47a8      	blx	r5
		vTaskDelay( 1000 / portTICK_RATE_MS );
   83548:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   8354c:	47a0      	blx	r4
   8354e:	e7f8      	b.n	83542 <vTaskFunction+0xa>
   83550:	00086fac 	.word	0x00086fac
   83554:	0008369d 	.word	0x0008369d
   83558:	0008137d 	.word	0x0008137d

0008355c <main>:
{
   8355c:	b500      	push	{lr}
   8355e:	b089      	sub	sp, #36	; 0x24
	sysclk_init();
   83560:	4b23      	ldr	r3, [pc, #140]	; (835f0 <main+0x94>)
   83562:	4798      	blx	r3
	board_init();
   83564:	4b23      	ldr	r3, [pc, #140]	; (835f4 <main+0x98>)
   83566:	4798      	blx	r3
   83568:	2008      	movs	r0, #8
   8356a:	4d23      	ldr	r5, [pc, #140]	; (835f8 <main+0x9c>)
   8356c:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8356e:	4c23      	ldr	r4, [pc, #140]	; (835fc <main+0xa0>)
   83570:	4b23      	ldr	r3, [pc, #140]	; (83600 <main+0xa4>)
   83572:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   83574:	4a23      	ldr	r2, [pc, #140]	; (83604 <main+0xa8>)
   83576:	4b24      	ldr	r3, [pc, #144]	; (83608 <main+0xac>)
   83578:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8357a:	4a24      	ldr	r2, [pc, #144]	; (8360c <main+0xb0>)
   8357c:	4b24      	ldr	r3, [pc, #144]	; (83610 <main+0xb4>)
   8357e:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   83580:	4b24      	ldr	r3, [pc, #144]	; (83614 <main+0xb8>)
   83582:	9305      	str	r3, [sp, #20]
	uart_settings.ul_baudrate = opt->baudrate;
   83584:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   83588:	9306      	str	r3, [sp, #24]
	uart_settings.ul_mode = opt->paritytype;
   8358a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8358e:	9307      	str	r3, [sp, #28]
   83590:	2008      	movs	r0, #8
   83592:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   83594:	a905      	add	r1, sp, #20
   83596:	4620      	mov	r0, r4
   83598:	4b1f      	ldr	r3, [pc, #124]	; (83618 <main+0xbc>)
   8359a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   8359c:	4d1f      	ldr	r5, [pc, #124]	; (8361c <main+0xc0>)
   8359e:	682b      	ldr	r3, [r5, #0]
   835a0:	2100      	movs	r1, #0
   835a2:	6898      	ldr	r0, [r3, #8]
   835a4:	4c1e      	ldr	r4, [pc, #120]	; (83620 <main+0xc4>)
   835a6:	47a0      	blx	r4
	setbuf(stdin, NULL);
   835a8:	682b      	ldr	r3, [r5, #0]
   835aa:	2100      	movs	r1, #0
   835ac:	6858      	ldr	r0, [r3, #4]
   835ae:	47a0      	blx	r4
	vTraceInitTraceData();
   835b0:	4b1c      	ldr	r3, [pc, #112]	; (83624 <main+0xc8>)
   835b2:	4798      	blx	r3
	uiTraceStart();
   835b4:	4b1c      	ldr	r3, [pc, #112]	; (83628 <main+0xcc>)
   835b6:	4798      	blx	r3
	xTaskCreate( vTaskFunction, "Task 1", 240, (void*)pcTextForTask1, 1, NULL );
   835b8:	4b1c      	ldr	r3, [pc, #112]	; (8362c <main+0xd0>)
   835ba:	681b      	ldr	r3, [r3, #0]
   835bc:	4e1c      	ldr	r6, [pc, #112]	; (83630 <main+0xd4>)
   835be:	2400      	movs	r4, #0
   835c0:	9403      	str	r4, [sp, #12]
   835c2:	9402      	str	r4, [sp, #8]
   835c4:	9401      	str	r4, [sp, #4]
   835c6:	2201      	movs	r2, #1
   835c8:	9200      	str	r2, [sp, #0]
   835ca:	22f0      	movs	r2, #240	; 0xf0
   835cc:	4919      	ldr	r1, [pc, #100]	; (83634 <main+0xd8>)
   835ce:	4630      	mov	r0, r6
   835d0:	4d19      	ldr	r5, [pc, #100]	; (83638 <main+0xdc>)
   835d2:	47a8      	blx	r5
	xTaskCreate( vTaskFunction, "Task 2", 240, (void*)pcTextForTask2, 2, NULL );
   835d4:	4b19      	ldr	r3, [pc, #100]	; (8363c <main+0xe0>)
   835d6:	681b      	ldr	r3, [r3, #0]
   835d8:	9403      	str	r4, [sp, #12]
   835da:	9402      	str	r4, [sp, #8]
   835dc:	9401      	str	r4, [sp, #4]
   835de:	2202      	movs	r2, #2
   835e0:	9200      	str	r2, [sp, #0]
   835e2:	22f0      	movs	r2, #240	; 0xf0
   835e4:	4916      	ldr	r1, [pc, #88]	; (83640 <main+0xe4>)
   835e6:	4630      	mov	r0, r6
   835e8:	47a8      	blx	r5
	vTaskStartScheduler();	
   835ea:	4b16      	ldr	r3, [pc, #88]	; (83644 <main+0xe8>)
   835ec:	4798      	blx	r3
   835ee:	e7fe      	b.n	835ee <main+0x92>
   835f0:	00081d1d 	.word	0x00081d1d
   835f4:	00081d81 	.word	0x00081d81
   835f8:	00082195 	.word	0x00082195
   835fc:	400e0800 	.word	0x400e0800
   83600:	2007ade0 	.word	0x2007ade0
   83604:	0008349d 	.word	0x0008349d
   83608:	2007addc 	.word	0x2007addc
   8360c:	000833f1 	.word	0x000833f1
   83610:	2007add8 	.word	0x2007add8
   83614:	0501bd00 	.word	0x0501bd00
   83618:	00081cc5 	.word	0x00081cc5
   8361c:	20070150 	.word	0x20070150
   83620:	0008384d 	.word	0x0008384d
   83624:	0008333d 	.word	0x0008333d
   83628:	00083349 	.word	0x00083349
   8362c:	20070148 	.word	0x20070148
   83630:	00083539 	.word	0x00083539
   83634:	00086f74 	.word	0x00086f74
   83638:	00080e0d 	.word	0x00080e0d
   8363c:	2007014c 	.word	0x2007014c
   83640:	00086f7c 	.word	0x00086f7c
   83644:	00081075 	.word	0x00081075

00083648 <vApplicationMallocFailedHook>:
	}
}
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
   83648:	e7fe      	b.n	83648 <vApplicationMallocFailedHook>
	...

0008364c <__libc_init_array>:
   8364c:	b570      	push	{r4, r5, r6, lr}
   8364e:	4e0f      	ldr	r6, [pc, #60]	; (8368c <__libc_init_array+0x40>)
   83650:	4d0f      	ldr	r5, [pc, #60]	; (83690 <__libc_init_array+0x44>)
   83652:	1b76      	subs	r6, r6, r5
   83654:	10b6      	asrs	r6, r6, #2
   83656:	bf18      	it	ne
   83658:	2400      	movne	r4, #0
   8365a:	d005      	beq.n	83668 <__libc_init_array+0x1c>
   8365c:	3401      	adds	r4, #1
   8365e:	f855 3b04 	ldr.w	r3, [r5], #4
   83662:	4798      	blx	r3
   83664:	42a6      	cmp	r6, r4
   83666:	d1f9      	bne.n	8365c <__libc_init_array+0x10>
   83668:	4e0a      	ldr	r6, [pc, #40]	; (83694 <__libc_init_array+0x48>)
   8366a:	4d0b      	ldr	r5, [pc, #44]	; (83698 <__libc_init_array+0x4c>)
   8366c:	f003 fd54 	bl	87118 <_init>
   83670:	1b76      	subs	r6, r6, r5
   83672:	10b6      	asrs	r6, r6, #2
   83674:	bf18      	it	ne
   83676:	2400      	movne	r4, #0
   83678:	d006      	beq.n	83688 <__libc_init_array+0x3c>
   8367a:	3401      	adds	r4, #1
   8367c:	f855 3b04 	ldr.w	r3, [r5], #4
   83680:	4798      	blx	r3
   83682:	42a6      	cmp	r6, r4
   83684:	d1f9      	bne.n	8367a <__libc_init_array+0x2e>
   83686:	bd70      	pop	{r4, r5, r6, pc}
   83688:	bd70      	pop	{r4, r5, r6, pc}
   8368a:	bf00      	nop
   8368c:	00087124 	.word	0x00087124
   83690:	00087124 	.word	0x00087124
   83694:	0008712c 	.word	0x0008712c
   83698:	00087124 	.word	0x00087124

0008369c <iprintf>:
   8369c:	b40f      	push	{r0, r1, r2, r3}
   8369e:	b510      	push	{r4, lr}
   836a0:	4b07      	ldr	r3, [pc, #28]	; (836c0 <iprintf+0x24>)
   836a2:	b082      	sub	sp, #8
   836a4:	ac04      	add	r4, sp, #16
   836a6:	f854 2b04 	ldr.w	r2, [r4], #4
   836aa:	6818      	ldr	r0, [r3, #0]
   836ac:	4623      	mov	r3, r4
   836ae:	6881      	ldr	r1, [r0, #8]
   836b0:	9401      	str	r4, [sp, #4]
   836b2:	f000 fa19 	bl	83ae8 <_vfiprintf_r>
   836b6:	b002      	add	sp, #8
   836b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   836bc:	b004      	add	sp, #16
   836be:	4770      	bx	lr
   836c0:	20070150 	.word	0x20070150

000836c4 <memcpy>:
   836c4:	4684      	mov	ip, r0
   836c6:	ea41 0300 	orr.w	r3, r1, r0
   836ca:	f013 0303 	ands.w	r3, r3, #3
   836ce:	d149      	bne.n	83764 <memcpy+0xa0>
   836d0:	3a40      	subs	r2, #64	; 0x40
   836d2:	d323      	bcc.n	8371c <memcpy+0x58>
   836d4:	680b      	ldr	r3, [r1, #0]
   836d6:	6003      	str	r3, [r0, #0]
   836d8:	684b      	ldr	r3, [r1, #4]
   836da:	6043      	str	r3, [r0, #4]
   836dc:	688b      	ldr	r3, [r1, #8]
   836de:	6083      	str	r3, [r0, #8]
   836e0:	68cb      	ldr	r3, [r1, #12]
   836e2:	60c3      	str	r3, [r0, #12]
   836e4:	690b      	ldr	r3, [r1, #16]
   836e6:	6103      	str	r3, [r0, #16]
   836e8:	694b      	ldr	r3, [r1, #20]
   836ea:	6143      	str	r3, [r0, #20]
   836ec:	698b      	ldr	r3, [r1, #24]
   836ee:	6183      	str	r3, [r0, #24]
   836f0:	69cb      	ldr	r3, [r1, #28]
   836f2:	61c3      	str	r3, [r0, #28]
   836f4:	6a0b      	ldr	r3, [r1, #32]
   836f6:	6203      	str	r3, [r0, #32]
   836f8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   836fa:	6243      	str	r3, [r0, #36]	; 0x24
   836fc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   836fe:	6283      	str	r3, [r0, #40]	; 0x28
   83700:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   83702:	62c3      	str	r3, [r0, #44]	; 0x2c
   83704:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83706:	6303      	str	r3, [r0, #48]	; 0x30
   83708:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8370a:	6343      	str	r3, [r0, #52]	; 0x34
   8370c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8370e:	6383      	str	r3, [r0, #56]	; 0x38
   83710:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   83712:	63c3      	str	r3, [r0, #60]	; 0x3c
   83714:	3040      	adds	r0, #64	; 0x40
   83716:	3140      	adds	r1, #64	; 0x40
   83718:	3a40      	subs	r2, #64	; 0x40
   8371a:	d2db      	bcs.n	836d4 <memcpy+0x10>
   8371c:	3230      	adds	r2, #48	; 0x30
   8371e:	d30b      	bcc.n	83738 <memcpy+0x74>
   83720:	680b      	ldr	r3, [r1, #0]
   83722:	6003      	str	r3, [r0, #0]
   83724:	684b      	ldr	r3, [r1, #4]
   83726:	6043      	str	r3, [r0, #4]
   83728:	688b      	ldr	r3, [r1, #8]
   8372a:	6083      	str	r3, [r0, #8]
   8372c:	68cb      	ldr	r3, [r1, #12]
   8372e:	60c3      	str	r3, [r0, #12]
   83730:	3010      	adds	r0, #16
   83732:	3110      	adds	r1, #16
   83734:	3a10      	subs	r2, #16
   83736:	d2f3      	bcs.n	83720 <memcpy+0x5c>
   83738:	320c      	adds	r2, #12
   8373a:	d305      	bcc.n	83748 <memcpy+0x84>
   8373c:	f851 3b04 	ldr.w	r3, [r1], #4
   83740:	f840 3b04 	str.w	r3, [r0], #4
   83744:	3a04      	subs	r2, #4
   83746:	d2f9      	bcs.n	8373c <memcpy+0x78>
   83748:	3204      	adds	r2, #4
   8374a:	d008      	beq.n	8375e <memcpy+0x9a>
   8374c:	07d2      	lsls	r2, r2, #31
   8374e:	bf1c      	itt	ne
   83750:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83754:	f800 3b01 	strbne.w	r3, [r0], #1
   83758:	d301      	bcc.n	8375e <memcpy+0x9a>
   8375a:	880b      	ldrh	r3, [r1, #0]
   8375c:	8003      	strh	r3, [r0, #0]
   8375e:	4660      	mov	r0, ip
   83760:	4770      	bx	lr
   83762:	bf00      	nop
   83764:	2a08      	cmp	r2, #8
   83766:	d313      	bcc.n	83790 <memcpy+0xcc>
   83768:	078b      	lsls	r3, r1, #30
   8376a:	d0b1      	beq.n	836d0 <memcpy+0xc>
   8376c:	f010 0303 	ands.w	r3, r0, #3
   83770:	d0ae      	beq.n	836d0 <memcpy+0xc>
   83772:	f1c3 0304 	rsb	r3, r3, #4
   83776:	1ad2      	subs	r2, r2, r3
   83778:	07db      	lsls	r3, r3, #31
   8377a:	bf1c      	itt	ne
   8377c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83780:	f800 3b01 	strbne.w	r3, [r0], #1
   83784:	d3a4      	bcc.n	836d0 <memcpy+0xc>
   83786:	f831 3b02 	ldrh.w	r3, [r1], #2
   8378a:	f820 3b02 	strh.w	r3, [r0], #2
   8378e:	e79f      	b.n	836d0 <memcpy+0xc>
   83790:	3a04      	subs	r2, #4
   83792:	d3d9      	bcc.n	83748 <memcpy+0x84>
   83794:	3a01      	subs	r2, #1
   83796:	f811 3b01 	ldrb.w	r3, [r1], #1
   8379a:	f800 3b01 	strb.w	r3, [r0], #1
   8379e:	d2f9      	bcs.n	83794 <memcpy+0xd0>
   837a0:	780b      	ldrb	r3, [r1, #0]
   837a2:	7003      	strb	r3, [r0, #0]
   837a4:	784b      	ldrb	r3, [r1, #1]
   837a6:	7043      	strb	r3, [r0, #1]
   837a8:	788b      	ldrb	r3, [r1, #2]
   837aa:	7083      	strb	r3, [r0, #2]
   837ac:	4660      	mov	r0, ip
   837ae:	4770      	bx	lr

000837b0 <memset>:
   837b0:	b470      	push	{r4, r5, r6}
   837b2:	0786      	lsls	r6, r0, #30
   837b4:	d046      	beq.n	83844 <memset+0x94>
   837b6:	1e54      	subs	r4, r2, #1
   837b8:	2a00      	cmp	r2, #0
   837ba:	d041      	beq.n	83840 <memset+0x90>
   837bc:	b2ca      	uxtb	r2, r1
   837be:	4603      	mov	r3, r0
   837c0:	e002      	b.n	837c8 <memset+0x18>
   837c2:	f114 34ff 	adds.w	r4, r4, #4294967295
   837c6:	d33b      	bcc.n	83840 <memset+0x90>
   837c8:	f803 2b01 	strb.w	r2, [r3], #1
   837cc:	079d      	lsls	r5, r3, #30
   837ce:	d1f8      	bne.n	837c2 <memset+0x12>
   837d0:	2c03      	cmp	r4, #3
   837d2:	d92e      	bls.n	83832 <memset+0x82>
   837d4:	b2cd      	uxtb	r5, r1
   837d6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   837da:	2c0f      	cmp	r4, #15
   837dc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   837e0:	d919      	bls.n	83816 <memset+0x66>
   837e2:	4626      	mov	r6, r4
   837e4:	f103 0210 	add.w	r2, r3, #16
   837e8:	3e10      	subs	r6, #16
   837ea:	2e0f      	cmp	r6, #15
   837ec:	f842 5c10 	str.w	r5, [r2, #-16]
   837f0:	f842 5c0c 	str.w	r5, [r2, #-12]
   837f4:	f842 5c08 	str.w	r5, [r2, #-8]
   837f8:	f842 5c04 	str.w	r5, [r2, #-4]
   837fc:	f102 0210 	add.w	r2, r2, #16
   83800:	d8f2      	bhi.n	837e8 <memset+0x38>
   83802:	f1a4 0210 	sub.w	r2, r4, #16
   83806:	f022 020f 	bic.w	r2, r2, #15
   8380a:	f004 040f 	and.w	r4, r4, #15
   8380e:	3210      	adds	r2, #16
   83810:	2c03      	cmp	r4, #3
   83812:	4413      	add	r3, r2
   83814:	d90d      	bls.n	83832 <memset+0x82>
   83816:	461e      	mov	r6, r3
   83818:	4622      	mov	r2, r4
   8381a:	3a04      	subs	r2, #4
   8381c:	2a03      	cmp	r2, #3
   8381e:	f846 5b04 	str.w	r5, [r6], #4
   83822:	d8fa      	bhi.n	8381a <memset+0x6a>
   83824:	1f22      	subs	r2, r4, #4
   83826:	f022 0203 	bic.w	r2, r2, #3
   8382a:	3204      	adds	r2, #4
   8382c:	4413      	add	r3, r2
   8382e:	f004 0403 	and.w	r4, r4, #3
   83832:	b12c      	cbz	r4, 83840 <memset+0x90>
   83834:	b2c9      	uxtb	r1, r1
   83836:	441c      	add	r4, r3
   83838:	f803 1b01 	strb.w	r1, [r3], #1
   8383c:	429c      	cmp	r4, r3
   8383e:	d1fb      	bne.n	83838 <memset+0x88>
   83840:	bc70      	pop	{r4, r5, r6}
   83842:	4770      	bx	lr
   83844:	4614      	mov	r4, r2
   83846:	4603      	mov	r3, r0
   83848:	e7c2      	b.n	837d0 <memset+0x20>
   8384a:	bf00      	nop

0008384c <setbuf>:
   8384c:	2900      	cmp	r1, #0
   8384e:	bf0c      	ite	eq
   83850:	2202      	moveq	r2, #2
   83852:	2200      	movne	r2, #0
   83854:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83858:	f000 b800 	b.w	8385c <setvbuf>

0008385c <setvbuf>:
   8385c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83860:	4d50      	ldr	r5, [pc, #320]	; (839a4 <setvbuf+0x148>)
   83862:	b083      	sub	sp, #12
   83864:	682d      	ldr	r5, [r5, #0]
   83866:	4604      	mov	r4, r0
   83868:	460f      	mov	r7, r1
   8386a:	4690      	mov	r8, r2
   8386c:	461e      	mov	r6, r3
   8386e:	b115      	cbz	r5, 83876 <setvbuf+0x1a>
   83870:	6bab      	ldr	r3, [r5, #56]	; 0x38
   83872:	2b00      	cmp	r3, #0
   83874:	d077      	beq.n	83966 <setvbuf+0x10a>
   83876:	f1b8 0f02 	cmp.w	r8, #2
   8387a:	d004      	beq.n	83886 <setvbuf+0x2a>
   8387c:	f1b8 0f01 	cmp.w	r8, #1
   83880:	d87d      	bhi.n	8397e <setvbuf+0x122>
   83882:	2e00      	cmp	r6, #0
   83884:	db7b      	blt.n	8397e <setvbuf+0x122>
   83886:	4621      	mov	r1, r4
   83888:	4628      	mov	r0, r5
   8388a:	f001 f86d 	bl	84968 <_fflush_r>
   8388e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83890:	b141      	cbz	r1, 838a4 <setvbuf+0x48>
   83892:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83896:	4299      	cmp	r1, r3
   83898:	d002      	beq.n	838a0 <setvbuf+0x44>
   8389a:	4628      	mov	r0, r5
   8389c:	f001 f9ca 	bl	84c34 <_free_r>
   838a0:	2300      	movs	r3, #0
   838a2:	6323      	str	r3, [r4, #48]	; 0x30
   838a4:	2200      	movs	r2, #0
   838a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   838aa:	61a2      	str	r2, [r4, #24]
   838ac:	6062      	str	r2, [r4, #4]
   838ae:	061a      	lsls	r2, r3, #24
   838b0:	d452      	bmi.n	83958 <setvbuf+0xfc>
   838b2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   838b6:	f023 0303 	bic.w	r3, r3, #3
   838ba:	f1b8 0f02 	cmp.w	r8, #2
   838be:	81a3      	strh	r3, [r4, #12]
   838c0:	d037      	beq.n	83932 <setvbuf+0xd6>
   838c2:	ab01      	add	r3, sp, #4
   838c4:	466a      	mov	r2, sp
   838c6:	4621      	mov	r1, r4
   838c8:	4628      	mov	r0, r5
   838ca:	f001 fc49 	bl	85160 <__swhatbuf_r>
   838ce:	89a3      	ldrh	r3, [r4, #12]
   838d0:	4318      	orrs	r0, r3
   838d2:	81a0      	strh	r0, [r4, #12]
   838d4:	b316      	cbz	r6, 8391c <setvbuf+0xc0>
   838d6:	b317      	cbz	r7, 8391e <setvbuf+0xc2>
   838d8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   838da:	2b00      	cmp	r3, #0
   838dc:	d04b      	beq.n	83976 <setvbuf+0x11a>
   838de:	9b00      	ldr	r3, [sp, #0]
   838e0:	6027      	str	r7, [r4, #0]
   838e2:	429e      	cmp	r6, r3
   838e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   838e8:	6127      	str	r7, [r4, #16]
   838ea:	bf1c      	itt	ne
   838ec:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
   838f0:	81a3      	strhne	r3, [r4, #12]
   838f2:	f1b8 0f01 	cmp.w	r8, #1
   838f6:	bf04      	itt	eq
   838f8:	f043 0301 	orreq.w	r3, r3, #1
   838fc:	81a3      	strheq	r3, [r4, #12]
   838fe:	b29b      	uxth	r3, r3
   83900:	f013 0008 	ands.w	r0, r3, #8
   83904:	6166      	str	r6, [r4, #20]
   83906:	d023      	beq.n	83950 <setvbuf+0xf4>
   83908:	f013 0001 	ands.w	r0, r3, #1
   8390c:	d02f      	beq.n	8396e <setvbuf+0x112>
   8390e:	2000      	movs	r0, #0
   83910:	4276      	negs	r6, r6
   83912:	61a6      	str	r6, [r4, #24]
   83914:	60a0      	str	r0, [r4, #8]
   83916:	b003      	add	sp, #12
   83918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8391c:	9e00      	ldr	r6, [sp, #0]
   8391e:	4630      	mov	r0, r6
   83920:	f001 fc90 	bl	85244 <malloc>
   83924:	4607      	mov	r7, r0
   83926:	b368      	cbz	r0, 83984 <setvbuf+0x128>
   83928:	89a3      	ldrh	r3, [r4, #12]
   8392a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8392e:	81a3      	strh	r3, [r4, #12]
   83930:	e7d2      	b.n	838d8 <setvbuf+0x7c>
   83932:	2000      	movs	r0, #0
   83934:	2500      	movs	r5, #0
   83936:	2101      	movs	r1, #1
   83938:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8393c:	f043 0302 	orr.w	r3, r3, #2
   83940:	81a3      	strh	r3, [r4, #12]
   83942:	60a5      	str	r5, [r4, #8]
   83944:	6161      	str	r1, [r4, #20]
   83946:	6022      	str	r2, [r4, #0]
   83948:	6122      	str	r2, [r4, #16]
   8394a:	b003      	add	sp, #12
   8394c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83950:	60a0      	str	r0, [r4, #8]
   83952:	b003      	add	sp, #12
   83954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83958:	6921      	ldr	r1, [r4, #16]
   8395a:	4628      	mov	r0, r5
   8395c:	f001 f96a 	bl	84c34 <_free_r>
   83960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83964:	e7a5      	b.n	838b2 <setvbuf+0x56>
   83966:	4628      	mov	r0, r5
   83968:	f001 f892 	bl	84a90 <__sinit>
   8396c:	e783      	b.n	83876 <setvbuf+0x1a>
   8396e:	60a6      	str	r6, [r4, #8]
   83970:	b003      	add	sp, #12
   83972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83976:	4628      	mov	r0, r5
   83978:	f001 f88a 	bl	84a90 <__sinit>
   8397c:	e7af      	b.n	838de <setvbuf+0x82>
   8397e:	f04f 30ff 	mov.w	r0, #4294967295
   83982:	e7e2      	b.n	8394a <setvbuf+0xee>
   83984:	f8dd 9000 	ldr.w	r9, [sp]
   83988:	45b1      	cmp	r9, r6
   8398a:	d006      	beq.n	8399a <setvbuf+0x13e>
   8398c:	4648      	mov	r0, r9
   8398e:	f001 fc59 	bl	85244 <malloc>
   83992:	4607      	mov	r7, r0
   83994:	b108      	cbz	r0, 8399a <setvbuf+0x13e>
   83996:	464e      	mov	r6, r9
   83998:	e7c6      	b.n	83928 <setvbuf+0xcc>
   8399a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8399e:	f04f 30ff 	mov.w	r0, #4294967295
   839a2:	e7c7      	b.n	83934 <setvbuf+0xd8>
   839a4:	20070150 	.word	0x20070150

000839a8 <strlen>:
   839a8:	f020 0103 	bic.w	r1, r0, #3
   839ac:	f010 0003 	ands.w	r0, r0, #3
   839b0:	f1c0 0000 	rsb	r0, r0, #0
   839b4:	f851 3b04 	ldr.w	r3, [r1], #4
   839b8:	f100 0c04 	add.w	ip, r0, #4
   839bc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   839c0:	f06f 0200 	mvn.w	r2, #0
   839c4:	bf1c      	itt	ne
   839c6:	fa22 f20c 	lsrne.w	r2, r2, ip
   839ca:	4313      	orrne	r3, r2
   839cc:	f04f 0c01 	mov.w	ip, #1
   839d0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   839d4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   839d8:	eba3 020c 	sub.w	r2, r3, ip
   839dc:	ea22 0203 	bic.w	r2, r2, r3
   839e0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   839e4:	bf04      	itt	eq
   839e6:	f851 3b04 	ldreq.w	r3, [r1], #4
   839ea:	3004      	addeq	r0, #4
   839ec:	d0f4      	beq.n	839d8 <strlen+0x30>
   839ee:	f1c2 0100 	rsb	r1, r2, #0
   839f2:	ea02 0201 	and.w	r2, r2, r1
   839f6:	fab2 f282 	clz	r2, r2
   839fa:	f1c2 021f 	rsb	r2, r2, #31
   839fe:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   83a02:	4770      	bx	lr

00083a04 <strncpy>:
   83a04:	ea40 0301 	orr.w	r3, r0, r1
   83a08:	f013 0f03 	tst.w	r3, #3
   83a0c:	b470      	push	{r4, r5, r6}
   83a0e:	4603      	mov	r3, r0
   83a10:	d024      	beq.n	83a5c <strncpy+0x58>
   83a12:	b1a2      	cbz	r2, 83a3e <strncpy+0x3a>
   83a14:	780c      	ldrb	r4, [r1, #0]
   83a16:	3a01      	subs	r2, #1
   83a18:	701c      	strb	r4, [r3, #0]
   83a1a:	3101      	adds	r1, #1
   83a1c:	3301      	adds	r3, #1
   83a1e:	b13c      	cbz	r4, 83a30 <strncpy+0x2c>
   83a20:	b16a      	cbz	r2, 83a3e <strncpy+0x3a>
   83a22:	f811 4b01 	ldrb.w	r4, [r1], #1
   83a26:	3a01      	subs	r2, #1
   83a28:	f803 4b01 	strb.w	r4, [r3], #1
   83a2c:	2c00      	cmp	r4, #0
   83a2e:	d1f7      	bne.n	83a20 <strncpy+0x1c>
   83a30:	b12a      	cbz	r2, 83a3e <strncpy+0x3a>
   83a32:	2100      	movs	r1, #0
   83a34:	441a      	add	r2, r3
   83a36:	f803 1b01 	strb.w	r1, [r3], #1
   83a3a:	429a      	cmp	r2, r3
   83a3c:	d1fb      	bne.n	83a36 <strncpy+0x32>
   83a3e:	bc70      	pop	{r4, r5, r6}
   83a40:	4770      	bx	lr
   83a42:	460e      	mov	r6, r1
   83a44:	f851 5b04 	ldr.w	r5, [r1], #4
   83a48:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   83a4c:	ea24 0405 	bic.w	r4, r4, r5
   83a50:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   83a54:	d105      	bne.n	83a62 <strncpy+0x5e>
   83a56:	3a04      	subs	r2, #4
   83a58:	f843 5b04 	str.w	r5, [r3], #4
   83a5c:	2a03      	cmp	r2, #3
   83a5e:	d8f0      	bhi.n	83a42 <strncpy+0x3e>
   83a60:	e7d7      	b.n	83a12 <strncpy+0xe>
   83a62:	4631      	mov	r1, r6
   83a64:	e7d6      	b.n	83a14 <strncpy+0x10>
   83a66:	bf00      	nop

00083a68 <__sprint_r.part.0>:
   83a68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83a6c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   83a6e:	4693      	mov	fp, r2
   83a70:	049c      	lsls	r4, r3, #18
   83a72:	d52f      	bpl.n	83ad4 <__sprint_r.part.0+0x6c>
   83a74:	6893      	ldr	r3, [r2, #8]
   83a76:	6812      	ldr	r2, [r2, #0]
   83a78:	b353      	cbz	r3, 83ad0 <__sprint_r.part.0+0x68>
   83a7a:	460e      	mov	r6, r1
   83a7c:	4607      	mov	r7, r0
   83a7e:	f102 0908 	add.w	r9, r2, #8
   83a82:	e919 0420 	ldmdb	r9, {r5, sl}
   83a86:	ea5f 089a 	movs.w	r8, sl, lsr #2
   83a8a:	d017      	beq.n	83abc <__sprint_r.part.0+0x54>
   83a8c:	2400      	movs	r4, #0
   83a8e:	3d04      	subs	r5, #4
   83a90:	e001      	b.n	83a96 <__sprint_r.part.0+0x2e>
   83a92:	45a0      	cmp	r8, r4
   83a94:	d010      	beq.n	83ab8 <__sprint_r.part.0+0x50>
   83a96:	4632      	mov	r2, r6
   83a98:	f855 1f04 	ldr.w	r1, [r5, #4]!
   83a9c:	4638      	mov	r0, r7
   83a9e:	f001 f867 	bl	84b70 <_fputwc_r>
   83aa2:	1c43      	adds	r3, r0, #1
   83aa4:	f104 0401 	add.w	r4, r4, #1
   83aa8:	d1f3      	bne.n	83a92 <__sprint_r.part.0+0x2a>
   83aaa:	2300      	movs	r3, #0
   83aac:	f8cb 3008 	str.w	r3, [fp, #8]
   83ab0:	f8cb 3004 	str.w	r3, [fp, #4]
   83ab4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83ab8:	f8db 3008 	ldr.w	r3, [fp, #8]
   83abc:	f02a 0a03 	bic.w	sl, sl, #3
   83ac0:	eba3 030a 	sub.w	r3, r3, sl
   83ac4:	f8cb 3008 	str.w	r3, [fp, #8]
   83ac8:	f109 0908 	add.w	r9, r9, #8
   83acc:	2b00      	cmp	r3, #0
   83ace:	d1d8      	bne.n	83a82 <__sprint_r.part.0+0x1a>
   83ad0:	2000      	movs	r0, #0
   83ad2:	e7ea      	b.n	83aaa <__sprint_r.part.0+0x42>
   83ad4:	f001 f994 	bl	84e00 <__sfvwrite_r>
   83ad8:	2300      	movs	r3, #0
   83ada:	f8cb 3008 	str.w	r3, [fp, #8]
   83ade:	f8cb 3004 	str.w	r3, [fp, #4]
   83ae2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83ae6:	bf00      	nop

00083ae8 <_vfiprintf_r>:
   83ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83aec:	b0ad      	sub	sp, #180	; 0xb4
   83aee:	461d      	mov	r5, r3
   83af0:	9101      	str	r1, [sp, #4]
   83af2:	4691      	mov	r9, r2
   83af4:	9308      	str	r3, [sp, #32]
   83af6:	9006      	str	r0, [sp, #24]
   83af8:	b118      	cbz	r0, 83b02 <_vfiprintf_r+0x1a>
   83afa:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83afc:	2b00      	cmp	r3, #0
   83afe:	f000 80e0 	beq.w	83cc2 <_vfiprintf_r+0x1da>
   83b02:	9c01      	ldr	r4, [sp, #4]
   83b04:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   83b08:	b281      	uxth	r1, r0
   83b0a:	048b      	lsls	r3, r1, #18
   83b0c:	d407      	bmi.n	83b1e <_vfiprintf_r+0x36>
   83b0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83b10:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   83b14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   83b18:	81a1      	strh	r1, [r4, #12]
   83b1a:	6663      	str	r3, [r4, #100]	; 0x64
   83b1c:	b289      	uxth	r1, r1
   83b1e:	070f      	lsls	r7, r1, #28
   83b20:	f140 80b1 	bpl.w	83c86 <_vfiprintf_r+0x19e>
   83b24:	9b01      	ldr	r3, [sp, #4]
   83b26:	691b      	ldr	r3, [r3, #16]
   83b28:	2b00      	cmp	r3, #0
   83b2a:	f000 80ac 	beq.w	83c86 <_vfiprintf_r+0x19e>
   83b2e:	f001 011a 	and.w	r1, r1, #26
   83b32:	290a      	cmp	r1, #10
   83b34:	f000 80b5 	beq.w	83ca2 <_vfiprintf_r+0x1ba>
   83b38:	2300      	movs	r3, #0
   83b3a:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   83b3e:	46d3      	mov	fp, sl
   83b40:	930b      	str	r3, [sp, #44]	; 0x2c
   83b42:	9304      	str	r3, [sp, #16]
   83b44:	9311      	str	r3, [sp, #68]	; 0x44
   83b46:	9310      	str	r3, [sp, #64]	; 0x40
   83b48:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   83b4c:	f899 3000 	ldrb.w	r3, [r9]
   83b50:	464c      	mov	r4, r9
   83b52:	b1fb      	cbz	r3, 83b94 <_vfiprintf_r+0xac>
   83b54:	2b25      	cmp	r3, #37	; 0x25
   83b56:	d102      	bne.n	83b5e <_vfiprintf_r+0x76>
   83b58:	e01c      	b.n	83b94 <_vfiprintf_r+0xac>
   83b5a:	2b25      	cmp	r3, #37	; 0x25
   83b5c:	d003      	beq.n	83b66 <_vfiprintf_r+0x7e>
   83b5e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   83b62:	2b00      	cmp	r3, #0
   83b64:	d1f9      	bne.n	83b5a <_vfiprintf_r+0x72>
   83b66:	eba4 0509 	sub.w	r5, r4, r9
   83b6a:	b19d      	cbz	r5, 83b94 <_vfiprintf_r+0xac>
   83b6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   83b6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83b70:	3301      	adds	r3, #1
   83b72:	442a      	add	r2, r5
   83b74:	2b07      	cmp	r3, #7
   83b76:	f8cb 9000 	str.w	r9, [fp]
   83b7a:	f8cb 5004 	str.w	r5, [fp, #4]
   83b7e:	9211      	str	r2, [sp, #68]	; 0x44
   83b80:	9310      	str	r3, [sp, #64]	; 0x40
   83b82:	dd7a      	ble.n	83c7a <_vfiprintf_r+0x192>
   83b84:	2a00      	cmp	r2, #0
   83b86:	f040 8493 	bne.w	844b0 <_vfiprintf_r+0x9c8>
   83b8a:	46d3      	mov	fp, sl
   83b8c:	9b04      	ldr	r3, [sp, #16]
   83b8e:	9210      	str	r2, [sp, #64]	; 0x40
   83b90:	442b      	add	r3, r5
   83b92:	9304      	str	r3, [sp, #16]
   83b94:	7823      	ldrb	r3, [r4, #0]
   83b96:	2b00      	cmp	r3, #0
   83b98:	f000 83b6 	beq.w	84308 <_vfiprintf_r+0x820>
   83b9c:	2000      	movs	r0, #0
   83b9e:	f04f 0300 	mov.w	r3, #0
   83ba2:	f104 0901 	add.w	r9, r4, #1
   83ba6:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   83baa:	7862      	ldrb	r2, [r4, #1]
   83bac:	4606      	mov	r6, r0
   83bae:	4605      	mov	r5, r0
   83bb0:	4603      	mov	r3, r0
   83bb2:	f04f 34ff 	mov.w	r4, #4294967295
   83bb6:	f109 0901 	add.w	r9, r9, #1
   83bba:	f1a2 0120 	sub.w	r1, r2, #32
   83bbe:	2958      	cmp	r1, #88	; 0x58
   83bc0:	f200 830a 	bhi.w	841d8 <_vfiprintf_r+0x6f0>
   83bc4:	e8df f011 	tbh	[pc, r1, lsl #1]
   83bc8:	0308023f 	.word	0x0308023f
   83bcc:	02e70308 	.word	0x02e70308
   83bd0:	03080308 	.word	0x03080308
   83bd4:	03080308 	.word	0x03080308
   83bd8:	03080308 	.word	0x03080308
   83bdc:	02ec0080 	.word	0x02ec0080
   83be0:	00880308 	.word	0x00880308
   83be4:	0308027f 	.word	0x0308027f
   83be8:	01db01d6 	.word	0x01db01d6
   83bec:	01db01db 	.word	0x01db01db
   83bf0:	01db01db 	.word	0x01db01db
   83bf4:	01db01db 	.word	0x01db01db
   83bf8:	01db01db 	.word	0x01db01db
   83bfc:	03080308 	.word	0x03080308
   83c00:	03080308 	.word	0x03080308
   83c04:	03080308 	.word	0x03080308
   83c08:	03080308 	.word	0x03080308
   83c0c:	03080308 	.word	0x03080308
   83c10:	03080247 	.word	0x03080247
   83c14:	03080308 	.word	0x03080308
   83c18:	03080308 	.word	0x03080308
   83c1c:	03080308 	.word	0x03080308
   83c20:	03080308 	.word	0x03080308
   83c24:	024e0308 	.word	0x024e0308
   83c28:	03080308 	.word	0x03080308
   83c2c:	03080308 	.word	0x03080308
   83c30:	02520308 	.word	0x02520308
   83c34:	03080308 	.word	0x03080308
   83c38:	0308025a 	.word	0x0308025a
   83c3c:	03080308 	.word	0x03080308
   83c40:	03080308 	.word	0x03080308
   83c44:	03080308 	.word	0x03080308
   83c48:	03080308 	.word	0x03080308
   83c4c:	01e90308 	.word	0x01e90308
   83c50:	030801fe 	.word	0x030801fe
   83c54:	03080308 	.word	0x03080308
   83c58:	01fe0303 	.word	0x01fe0303
   83c5c:	03080308 	.word	0x03080308
   83c60:	03080299 	.word	0x03080299
   83c64:	008d02f1 	.word	0x008d02f1
   83c68:	02bf02ad 	.word	0x02bf02ad
   83c6c:	02c40308 	.word	0x02c40308
   83c70:	01c40308 	.word	0x01c40308
   83c74:	03080308 	.word	0x03080308
   83c78:	02a6      	.short	0x02a6
   83c7a:	f10b 0b08 	add.w	fp, fp, #8
   83c7e:	9b04      	ldr	r3, [sp, #16]
   83c80:	442b      	add	r3, r5
   83c82:	9304      	str	r3, [sp, #16]
   83c84:	e786      	b.n	83b94 <_vfiprintf_r+0xac>
   83c86:	9c01      	ldr	r4, [sp, #4]
   83c88:	9806      	ldr	r0, [sp, #24]
   83c8a:	4621      	mov	r1, r4
   83c8c:	f000 fd5c 	bl	84748 <__swsetup_r>
   83c90:	2800      	cmp	r0, #0
   83c92:	f040 8345 	bne.w	84320 <_vfiprintf_r+0x838>
   83c96:	89a1      	ldrh	r1, [r4, #12]
   83c98:	f001 011a 	and.w	r1, r1, #26
   83c9c:	290a      	cmp	r1, #10
   83c9e:	f47f af4b 	bne.w	83b38 <_vfiprintf_r+0x50>
   83ca2:	9901      	ldr	r1, [sp, #4]
   83ca4:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   83ca8:	2b00      	cmp	r3, #0
   83caa:	f6ff af45 	blt.w	83b38 <_vfiprintf_r+0x50>
   83cae:	462b      	mov	r3, r5
   83cb0:	464a      	mov	r2, r9
   83cb2:	9806      	ldr	r0, [sp, #24]
   83cb4:	f000 fd12 	bl	846dc <__sbprintf>
   83cb8:	9004      	str	r0, [sp, #16]
   83cba:	9804      	ldr	r0, [sp, #16]
   83cbc:	b02d      	add	sp, #180	; 0xb4
   83cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83cc2:	f000 fee5 	bl	84a90 <__sinit>
   83cc6:	e71c      	b.n	83b02 <_vfiprintf_r+0x1a>
   83cc8:	9908      	ldr	r1, [sp, #32]
   83cca:	460a      	mov	r2, r1
   83ccc:	680d      	ldr	r5, [r1, #0]
   83cce:	3204      	adds	r2, #4
   83cd0:	2d00      	cmp	r5, #0
   83cd2:	9208      	str	r2, [sp, #32]
   83cd4:	da02      	bge.n	83cdc <_vfiprintf_r+0x1f4>
   83cd6:	426d      	negs	r5, r5
   83cd8:	f043 0304 	orr.w	r3, r3, #4
   83cdc:	f899 2000 	ldrb.w	r2, [r9]
   83ce0:	e769      	b.n	83bb6 <_vfiprintf_r+0xce>
   83ce2:	9507      	str	r5, [sp, #28]
   83ce4:	f013 0220 	ands.w	r2, r3, #32
   83ce8:	f040 843d 	bne.w	84566 <_vfiprintf_r+0xa7e>
   83cec:	f013 0110 	ands.w	r1, r3, #16
   83cf0:	f040 83e9 	bne.w	844c6 <_vfiprintf_r+0x9de>
   83cf4:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   83cf8:	f000 83e5 	beq.w	844c6 <_vfiprintf_r+0x9de>
   83cfc:	9808      	ldr	r0, [sp, #32]
   83cfe:	460a      	mov	r2, r1
   83d00:	4601      	mov	r1, r0
   83d02:	2700      	movs	r7, #0
   83d04:	3104      	adds	r1, #4
   83d06:	8806      	ldrh	r6, [r0, #0]
   83d08:	9108      	str	r1, [sp, #32]
   83d0a:	f04f 0100 	mov.w	r1, #0
   83d0e:	2500      	movs	r5, #0
   83d10:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   83d14:	1c61      	adds	r1, r4, #1
   83d16:	f000 8177 	beq.w	84008 <_vfiprintf_r+0x520>
   83d1a:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   83d1e:	9103      	str	r1, [sp, #12]
   83d20:	ea56 0107 	orrs.w	r1, r6, r7
   83d24:	f040 8175 	bne.w	84012 <_vfiprintf_r+0x52a>
   83d28:	2c00      	cmp	r4, #0
   83d2a:	f040 8354 	bne.w	843d6 <_vfiprintf_r+0x8ee>
   83d2e:	2a00      	cmp	r2, #0
   83d30:	f040 8393 	bne.w	8445a <_vfiprintf_r+0x972>
   83d34:	f013 0301 	ands.w	r3, r3, #1
   83d38:	9305      	str	r3, [sp, #20]
   83d3a:	f000 8442 	beq.w	845c2 <_vfiprintf_r+0xada>
   83d3e:	2330      	movs	r3, #48	; 0x30
   83d40:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
   83d44:	f808 3d41 	strb.w	r3, [r8, #-65]!
   83d48:	9b05      	ldr	r3, [sp, #20]
   83d4a:	42a3      	cmp	r3, r4
   83d4c:	bfb8      	it	lt
   83d4e:	4623      	movlt	r3, r4
   83d50:	9302      	str	r3, [sp, #8]
   83d52:	b10d      	cbz	r5, 83d58 <_vfiprintf_r+0x270>
   83d54:	3301      	adds	r3, #1
   83d56:	9302      	str	r3, [sp, #8]
   83d58:	9b03      	ldr	r3, [sp, #12]
   83d5a:	f013 0302 	ands.w	r3, r3, #2
   83d5e:	9309      	str	r3, [sp, #36]	; 0x24
   83d60:	d002      	beq.n	83d68 <_vfiprintf_r+0x280>
   83d62:	9b02      	ldr	r3, [sp, #8]
   83d64:	3302      	adds	r3, #2
   83d66:	9302      	str	r3, [sp, #8]
   83d68:	9b03      	ldr	r3, [sp, #12]
   83d6a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   83d6e:	930a      	str	r3, [sp, #40]	; 0x28
   83d70:	f040 8261 	bne.w	84236 <_vfiprintf_r+0x74e>
   83d74:	9b07      	ldr	r3, [sp, #28]
   83d76:	9a02      	ldr	r2, [sp, #8]
   83d78:	1a9d      	subs	r5, r3, r2
   83d7a:	2d00      	cmp	r5, #0
   83d7c:	f340 825b 	ble.w	84236 <_vfiprintf_r+0x74e>
   83d80:	2d10      	cmp	r5, #16
   83d82:	f340 8468 	ble.w	84656 <_vfiprintf_r+0xb6e>
   83d86:	9b10      	ldr	r3, [sp, #64]	; 0x40
   83d88:	46de      	mov	lr, fp
   83d8a:	2710      	movs	r7, #16
   83d8c:	46a3      	mov	fp, r4
   83d8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83d90:	4eb8      	ldr	r6, [pc, #736]	; (84074 <_vfiprintf_r+0x58c>)
   83d92:	4619      	mov	r1, r3
   83d94:	9c06      	ldr	r4, [sp, #24]
   83d96:	e007      	b.n	83da8 <_vfiprintf_r+0x2c0>
   83d98:	f101 0c02 	add.w	ip, r1, #2
   83d9c:	4601      	mov	r1, r0
   83d9e:	f10e 0e08 	add.w	lr, lr, #8
   83da2:	3d10      	subs	r5, #16
   83da4:	2d10      	cmp	r5, #16
   83da6:	dd11      	ble.n	83dcc <_vfiprintf_r+0x2e4>
   83da8:	1c48      	adds	r0, r1, #1
   83daa:	3210      	adds	r2, #16
   83dac:	2807      	cmp	r0, #7
   83dae:	9211      	str	r2, [sp, #68]	; 0x44
   83db0:	e88e 00c0 	stmia.w	lr, {r6, r7}
   83db4:	9010      	str	r0, [sp, #64]	; 0x40
   83db6:	ddef      	ble.n	83d98 <_vfiprintf_r+0x2b0>
   83db8:	2a00      	cmp	r2, #0
   83dba:	f040 8227 	bne.w	8420c <_vfiprintf_r+0x724>
   83dbe:	3d10      	subs	r5, #16
   83dc0:	2d10      	cmp	r5, #16
   83dc2:	4611      	mov	r1, r2
   83dc4:	f04f 0c01 	mov.w	ip, #1
   83dc8:	46d6      	mov	lr, sl
   83dca:	dced      	bgt.n	83da8 <_vfiprintf_r+0x2c0>
   83dcc:	465c      	mov	r4, fp
   83dce:	4661      	mov	r1, ip
   83dd0:	46f3      	mov	fp, lr
   83dd2:	442a      	add	r2, r5
   83dd4:	2907      	cmp	r1, #7
   83dd6:	9211      	str	r2, [sp, #68]	; 0x44
   83dd8:	f8cb 6000 	str.w	r6, [fp]
   83ddc:	f8cb 5004 	str.w	r5, [fp, #4]
   83de0:	9110      	str	r1, [sp, #64]	; 0x40
   83de2:	f300 82e4 	bgt.w	843ae <_vfiprintf_r+0x8c6>
   83de6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   83dea:	f10b 0b08 	add.w	fp, fp, #8
   83dee:	1c48      	adds	r0, r1, #1
   83df0:	2d00      	cmp	r5, #0
   83df2:	f040 8228 	bne.w	84246 <_vfiprintf_r+0x75e>
   83df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83df8:	2b00      	cmp	r3, #0
   83dfa:	f000 8242 	beq.w	84282 <_vfiprintf_r+0x79a>
   83dfe:	2102      	movs	r1, #2
   83e00:	ab0e      	add	r3, sp, #56	; 0x38
   83e02:	440a      	add	r2, r1
   83e04:	2807      	cmp	r0, #7
   83e06:	9211      	str	r2, [sp, #68]	; 0x44
   83e08:	9010      	str	r0, [sp, #64]	; 0x40
   83e0a:	f8cb 1004 	str.w	r1, [fp, #4]
   83e0e:	f8cb 3000 	str.w	r3, [fp]
   83e12:	f340 8232 	ble.w	8427a <_vfiprintf_r+0x792>
   83e16:	2a00      	cmp	r2, #0
   83e18:	f040 8378 	bne.w	8450c <_vfiprintf_r+0xa24>
   83e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83e1e:	2001      	movs	r0, #1
   83e20:	2b80      	cmp	r3, #128	; 0x80
   83e22:	4611      	mov	r1, r2
   83e24:	46d3      	mov	fp, sl
   83e26:	f040 8230 	bne.w	8428a <_vfiprintf_r+0x7a2>
   83e2a:	9b07      	ldr	r3, [sp, #28]
   83e2c:	9d02      	ldr	r5, [sp, #8]
   83e2e:	1b5e      	subs	r6, r3, r5
   83e30:	2e00      	cmp	r6, #0
   83e32:	f340 822a 	ble.w	8428a <_vfiprintf_r+0x7a2>
   83e36:	2e10      	cmp	r6, #16
   83e38:	f340 8428 	ble.w	8468c <_vfiprintf_r+0xba4>
   83e3c:	46dc      	mov	ip, fp
   83e3e:	2710      	movs	r7, #16
   83e40:	46a3      	mov	fp, r4
   83e42:	4d8d      	ldr	r5, [pc, #564]	; (84078 <_vfiprintf_r+0x590>)
   83e44:	9c06      	ldr	r4, [sp, #24]
   83e46:	e007      	b.n	83e58 <_vfiprintf_r+0x370>
   83e48:	f101 0e02 	add.w	lr, r1, #2
   83e4c:	4601      	mov	r1, r0
   83e4e:	f10c 0c08 	add.w	ip, ip, #8
   83e52:	3e10      	subs	r6, #16
   83e54:	2e10      	cmp	r6, #16
   83e56:	dd11      	ble.n	83e7c <_vfiprintf_r+0x394>
   83e58:	1c48      	adds	r0, r1, #1
   83e5a:	3210      	adds	r2, #16
   83e5c:	2807      	cmp	r0, #7
   83e5e:	9211      	str	r2, [sp, #68]	; 0x44
   83e60:	e88c 00a0 	stmia.w	ip, {r5, r7}
   83e64:	9010      	str	r0, [sp, #64]	; 0x40
   83e66:	ddef      	ble.n	83e48 <_vfiprintf_r+0x360>
   83e68:	2a00      	cmp	r2, #0
   83e6a:	f040 8293 	bne.w	84394 <_vfiprintf_r+0x8ac>
   83e6e:	3e10      	subs	r6, #16
   83e70:	2e10      	cmp	r6, #16
   83e72:	f04f 0e01 	mov.w	lr, #1
   83e76:	4611      	mov	r1, r2
   83e78:	46d4      	mov	ip, sl
   83e7a:	dced      	bgt.n	83e58 <_vfiprintf_r+0x370>
   83e7c:	465c      	mov	r4, fp
   83e7e:	46e3      	mov	fp, ip
   83e80:	4432      	add	r2, r6
   83e82:	f1be 0f07 	cmp.w	lr, #7
   83e86:	9211      	str	r2, [sp, #68]	; 0x44
   83e88:	e88b 0060 	stmia.w	fp, {r5, r6}
   83e8c:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   83e90:	f300 8356 	bgt.w	84540 <_vfiprintf_r+0xa58>
   83e94:	9b05      	ldr	r3, [sp, #20]
   83e96:	f10b 0b08 	add.w	fp, fp, #8
   83e9a:	1ae4      	subs	r4, r4, r3
   83e9c:	2c00      	cmp	r4, #0
   83e9e:	f10e 0001 	add.w	r0, lr, #1
   83ea2:	4671      	mov	r1, lr
   83ea4:	f300 81f6 	bgt.w	84294 <_vfiprintf_r+0x7ac>
   83ea8:	9905      	ldr	r1, [sp, #20]
   83eaa:	2807      	cmp	r0, #7
   83eac:	440a      	add	r2, r1
   83eae:	9211      	str	r2, [sp, #68]	; 0x44
   83eb0:	f8cb 8000 	str.w	r8, [fp]
   83eb4:	f8cb 1004 	str.w	r1, [fp, #4]
   83eb8:	9010      	str	r0, [sp, #64]	; 0x40
   83eba:	f340 8252 	ble.w	84362 <_vfiprintf_r+0x87a>
   83ebe:	2a00      	cmp	r2, #0
   83ec0:	f040 82eb 	bne.w	8449a <_vfiprintf_r+0x9b2>
   83ec4:	9b03      	ldr	r3, [sp, #12]
   83ec6:	9210      	str	r2, [sp, #64]	; 0x40
   83ec8:	0758      	lsls	r0, r3, #29
   83eca:	d538      	bpl.n	83f3e <_vfiprintf_r+0x456>
   83ecc:	9b07      	ldr	r3, [sp, #28]
   83ece:	9902      	ldr	r1, [sp, #8]
   83ed0:	1a5c      	subs	r4, r3, r1
   83ed2:	2c00      	cmp	r4, #0
   83ed4:	f340 82b7 	ble.w	84446 <_vfiprintf_r+0x95e>
   83ed8:	46d3      	mov	fp, sl
   83eda:	2c10      	cmp	r4, #16
   83edc:	f340 83ca 	ble.w	84674 <_vfiprintf_r+0xb8c>
   83ee0:	2510      	movs	r5, #16
   83ee2:	9910      	ldr	r1, [sp, #64]	; 0x40
   83ee4:	4e63      	ldr	r6, [pc, #396]	; (84074 <_vfiprintf_r+0x58c>)
   83ee6:	9f06      	ldr	r7, [sp, #24]
   83ee8:	f8dd 8004 	ldr.w	r8, [sp, #4]
   83eec:	e006      	b.n	83efc <_vfiprintf_r+0x414>
   83eee:	1c88      	adds	r0, r1, #2
   83ef0:	4619      	mov	r1, r3
   83ef2:	f10b 0b08 	add.w	fp, fp, #8
   83ef6:	3c10      	subs	r4, #16
   83ef8:	2c10      	cmp	r4, #16
   83efa:	dd13      	ble.n	83f24 <_vfiprintf_r+0x43c>
   83efc:	1c4b      	adds	r3, r1, #1
   83efe:	3210      	adds	r2, #16
   83f00:	2b07      	cmp	r3, #7
   83f02:	9211      	str	r2, [sp, #68]	; 0x44
   83f04:	f8cb 6000 	str.w	r6, [fp]
   83f08:	f8cb 5004 	str.w	r5, [fp, #4]
   83f0c:	9310      	str	r3, [sp, #64]	; 0x40
   83f0e:	ddee      	ble.n	83eee <_vfiprintf_r+0x406>
   83f10:	2a00      	cmp	r2, #0
   83f12:	f040 8209 	bne.w	84328 <_vfiprintf_r+0x840>
   83f16:	3c10      	subs	r4, #16
   83f18:	2c10      	cmp	r4, #16
   83f1a:	f04f 0001 	mov.w	r0, #1
   83f1e:	4611      	mov	r1, r2
   83f20:	46d3      	mov	fp, sl
   83f22:	dceb      	bgt.n	83efc <_vfiprintf_r+0x414>
   83f24:	4422      	add	r2, r4
   83f26:	2807      	cmp	r0, #7
   83f28:	9211      	str	r2, [sp, #68]	; 0x44
   83f2a:	f8cb 6000 	str.w	r6, [fp]
   83f2e:	f8cb 4004 	str.w	r4, [fp, #4]
   83f32:	9010      	str	r0, [sp, #64]	; 0x40
   83f34:	f340 8220 	ble.w	84378 <_vfiprintf_r+0x890>
   83f38:	2a00      	cmp	r2, #0
   83f3a:	f040 8354 	bne.w	845e6 <_vfiprintf_r+0xafe>
   83f3e:	9b04      	ldr	r3, [sp, #16]
   83f40:	9a07      	ldr	r2, [sp, #28]
   83f42:	9902      	ldr	r1, [sp, #8]
   83f44:	428a      	cmp	r2, r1
   83f46:	bfac      	ite	ge
   83f48:	189b      	addge	r3, r3, r2
   83f4a:	185b      	addlt	r3, r3, r1
   83f4c:	9304      	str	r3, [sp, #16]
   83f4e:	e21c      	b.n	8438a <_vfiprintf_r+0x8a2>
   83f50:	9507      	str	r5, [sp, #28]
   83f52:	069e      	lsls	r6, r3, #26
   83f54:	f100 8313 	bmi.w	8457e <_vfiprintf_r+0xa96>
   83f58:	9908      	ldr	r1, [sp, #32]
   83f5a:	06dd      	lsls	r5, r3, #27
   83f5c:	460a      	mov	r2, r1
   83f5e:	f100 82c5 	bmi.w	844ec <_vfiprintf_r+0xa04>
   83f62:	0658      	lsls	r0, r3, #25
   83f64:	f140 82c2 	bpl.w	844ec <_vfiprintf_r+0xa04>
   83f68:	880e      	ldrh	r6, [r1, #0]
   83f6a:	3104      	adds	r1, #4
   83f6c:	2700      	movs	r7, #0
   83f6e:	2201      	movs	r2, #1
   83f70:	9108      	str	r1, [sp, #32]
   83f72:	e6ca      	b.n	83d0a <_vfiprintf_r+0x222>
   83f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83f78:	f899 2000 	ldrb.w	r2, [r9]
   83f7c:	e61b      	b.n	83bb6 <_vfiprintf_r+0xce>
   83f7e:	2500      	movs	r5, #0
   83f80:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   83f84:	f819 2b01 	ldrb.w	r2, [r9], #1
   83f88:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   83f8c:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   83f90:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   83f94:	2909      	cmp	r1, #9
   83f96:	d9f5      	bls.n	83f84 <_vfiprintf_r+0x49c>
   83f98:	e60f      	b.n	83bba <_vfiprintf_r+0xd2>
   83f9a:	2201      	movs	r2, #1
   83f9c:	9808      	ldr	r0, [sp, #32]
   83f9e:	4611      	mov	r1, r2
   83fa0:	9202      	str	r2, [sp, #8]
   83fa2:	6802      	ldr	r2, [r0, #0]
   83fa4:	f04f 0400 	mov.w	r4, #0
   83fa8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   83fac:	4602      	mov	r2, r0
   83fae:	3204      	adds	r2, #4
   83fb0:	9507      	str	r5, [sp, #28]
   83fb2:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   83fb6:	9105      	str	r1, [sp, #20]
   83fb8:	9208      	str	r2, [sp, #32]
   83fba:	f10d 0848 	add.w	r8, sp, #72	; 0x48
   83fbe:	9303      	str	r3, [sp, #12]
   83fc0:	2400      	movs	r4, #0
   83fc2:	e6c9      	b.n	83d58 <_vfiprintf_r+0x270>
   83fc4:	9507      	str	r5, [sp, #28]
   83fc6:	2800      	cmp	r0, #0
   83fc8:	f040 837e 	bne.w	846c8 <_vfiprintf_r+0xbe0>
   83fcc:	069e      	lsls	r6, r3, #26
   83fce:	f100 82ec 	bmi.w	845aa <_vfiprintf_r+0xac2>
   83fd2:	9908      	ldr	r1, [sp, #32]
   83fd4:	06dd      	lsls	r5, r3, #27
   83fd6:	460a      	mov	r2, r1
   83fd8:	f100 8281 	bmi.w	844de <_vfiprintf_r+0x9f6>
   83fdc:	0658      	lsls	r0, r3, #25
   83fde:	f140 827e 	bpl.w	844de <_vfiprintf_r+0x9f6>
   83fe2:	f9b1 6000 	ldrsh.w	r6, [r1]
   83fe6:	3204      	adds	r2, #4
   83fe8:	17f7      	asrs	r7, r6, #31
   83fea:	4630      	mov	r0, r6
   83fec:	4639      	mov	r1, r7
   83fee:	9208      	str	r2, [sp, #32]
   83ff0:	2800      	cmp	r0, #0
   83ff2:	f171 0200 	sbcs.w	r2, r1, #0
   83ff6:	f2c0 82e7 	blt.w	845c8 <_vfiprintf_r+0xae0>
   83ffa:	1c61      	adds	r1, r4, #1
   83ffc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   84000:	f04f 0201 	mov.w	r2, #1
   84004:	f47f ae89 	bne.w	83d1a <_vfiprintf_r+0x232>
   84008:	ea56 0107 	orrs.w	r1, r6, r7
   8400c:	f000 81e4 	beq.w	843d8 <_vfiprintf_r+0x8f0>
   84010:	9303      	str	r3, [sp, #12]
   84012:	2a01      	cmp	r2, #1
   84014:	f000 8224 	beq.w	84460 <_vfiprintf_r+0x978>
   84018:	2a02      	cmp	r2, #2
   8401a:	f040 81f1 	bne.w	84400 <_vfiprintf_r+0x918>
   8401e:	46d0      	mov	r8, sl
   84020:	980b      	ldr	r0, [sp, #44]	; 0x2c
   84022:	0933      	lsrs	r3, r6, #4
   84024:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   84028:	0939      	lsrs	r1, r7, #4
   8402a:	f006 020f 	and.w	r2, r6, #15
   8402e:	460f      	mov	r7, r1
   84030:	461e      	mov	r6, r3
   84032:	5c83      	ldrb	r3, [r0, r2]
   84034:	f808 3d01 	strb.w	r3, [r8, #-1]!
   84038:	ea56 0307 	orrs.w	r3, r6, r7
   8403c:	d1f1      	bne.n	84022 <_vfiprintf_r+0x53a>
   8403e:	ebaa 0308 	sub.w	r3, sl, r8
   84042:	9305      	str	r3, [sp, #20]
   84044:	e680      	b.n	83d48 <_vfiprintf_r+0x260>
   84046:	f899 2000 	ldrb.w	r2, [r9]
   8404a:	2e00      	cmp	r6, #0
   8404c:	f47f adb3 	bne.w	83bb6 <_vfiprintf_r+0xce>
   84050:	2001      	movs	r0, #1
   84052:	2620      	movs	r6, #32
   84054:	e5af      	b.n	83bb6 <_vfiprintf_r+0xce>
   84056:	9507      	str	r5, [sp, #28]
   84058:	2800      	cmp	r0, #0
   8405a:	f040 8332 	bne.w	846c2 <_vfiprintf_r+0xbda>
   8405e:	f043 0310 	orr.w	r3, r3, #16
   84062:	e7b3      	b.n	83fcc <_vfiprintf_r+0x4e4>
   84064:	9507      	str	r5, [sp, #28]
   84066:	f043 0310 	orr.w	r3, r3, #16
   8406a:	e63b      	b.n	83ce4 <_vfiprintf_r+0x1fc>
   8406c:	9507      	str	r5, [sp, #28]
   8406e:	f043 0310 	orr.w	r3, r3, #16
   84072:	e76e      	b.n	83f52 <_vfiprintf_r+0x46a>
   84074:	00086fe4 	.word	0x00086fe4
   84078:	00086ff4 	.word	0x00086ff4
   8407c:	9507      	str	r5, [sp, #28]
   8407e:	2800      	cmp	r0, #0
   84080:	f040 8316 	bne.w	846b0 <_vfiprintf_r+0xbc8>
   84084:	49ae      	ldr	r1, [pc, #696]	; (84340 <_vfiprintf_r+0x858>)
   84086:	910b      	str	r1, [sp, #44]	; 0x2c
   84088:	069f      	lsls	r7, r3, #26
   8408a:	f100 8284 	bmi.w	84596 <_vfiprintf_r+0xaae>
   8408e:	9808      	ldr	r0, [sp, #32]
   84090:	06de      	lsls	r6, r3, #27
   84092:	4601      	mov	r1, r0
   84094:	f100 821e 	bmi.w	844d4 <_vfiprintf_r+0x9ec>
   84098:	065d      	lsls	r5, r3, #25
   8409a:	f140 821b 	bpl.w	844d4 <_vfiprintf_r+0x9ec>
   8409e:	2700      	movs	r7, #0
   840a0:	3104      	adds	r1, #4
   840a2:	8806      	ldrh	r6, [r0, #0]
   840a4:	9108      	str	r1, [sp, #32]
   840a6:	07d8      	lsls	r0, r3, #31
   840a8:	f140 81d5 	bpl.w	84456 <_vfiprintf_r+0x96e>
   840ac:	ea56 0107 	orrs.w	r1, r6, r7
   840b0:	f000 81d1 	beq.w	84456 <_vfiprintf_r+0x96e>
   840b4:	2130      	movs	r1, #48	; 0x30
   840b6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   840ba:	f043 0302 	orr.w	r3, r3, #2
   840be:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   840c2:	2202      	movs	r2, #2
   840c4:	e621      	b.n	83d0a <_vfiprintf_r+0x222>
   840c6:	f899 2000 	ldrb.w	r2, [r9]
   840ca:	f109 0701 	add.w	r7, r9, #1
   840ce:	2a2a      	cmp	r2, #42	; 0x2a
   840d0:	f000 82e0 	beq.w	84694 <_vfiprintf_r+0xbac>
   840d4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   840d8:	2909      	cmp	r1, #9
   840da:	46b9      	mov	r9, r7
   840dc:	f04f 0400 	mov.w	r4, #0
   840e0:	f63f ad6b 	bhi.w	83bba <_vfiprintf_r+0xd2>
   840e4:	f819 2b01 	ldrb.w	r2, [r9], #1
   840e8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   840ec:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   840f0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   840f4:	2909      	cmp	r1, #9
   840f6:	d9f5      	bls.n	840e4 <_vfiprintf_r+0x5fc>
   840f8:	e55f      	b.n	83bba <_vfiprintf_r+0xd2>
   840fa:	f899 2000 	ldrb.w	r2, [r9]
   840fe:	2a6c      	cmp	r2, #108	; 0x6c
   84100:	bf03      	ittte	eq
   84102:	f899 2001 	ldrbeq.w	r2, [r9, #1]
   84106:	f043 0320 	orreq.w	r3, r3, #32
   8410a:	f109 0901 	addeq.w	r9, r9, #1
   8410e:	f043 0310 	orrne.w	r3, r3, #16
   84112:	e550      	b.n	83bb6 <_vfiprintf_r+0xce>
   84114:	9507      	str	r5, [sp, #28]
   84116:	2800      	cmp	r0, #0
   84118:	f040 82d0 	bne.w	846bc <_vfiprintf_r+0xbd4>
   8411c:	4989      	ldr	r1, [pc, #548]	; (84344 <_vfiprintf_r+0x85c>)
   8411e:	910b      	str	r1, [sp, #44]	; 0x2c
   84120:	e7b2      	b.n	84088 <_vfiprintf_r+0x5a0>
   84122:	2278      	movs	r2, #120	; 0x78
   84124:	2130      	movs	r1, #48	; 0x30
   84126:	9507      	str	r5, [sp, #28]
   84128:	9d08      	ldr	r5, [sp, #32]
   8412a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   8412e:	1d2a      	adds	r2, r5, #4
   84130:	9208      	str	r2, [sp, #32]
   84132:	4a84      	ldr	r2, [pc, #528]	; (84344 <_vfiprintf_r+0x85c>)
   84134:	682e      	ldr	r6, [r5, #0]
   84136:	920b      	str	r2, [sp, #44]	; 0x2c
   84138:	f043 0302 	orr.w	r3, r3, #2
   8413c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   84140:	2700      	movs	r7, #0
   84142:	2202      	movs	r2, #2
   84144:	e5e1      	b.n	83d0a <_vfiprintf_r+0x222>
   84146:	f043 0320 	orr.w	r3, r3, #32
   8414a:	f899 2000 	ldrb.w	r2, [r9]
   8414e:	e532      	b.n	83bb6 <_vfiprintf_r+0xce>
   84150:	f04f 0200 	mov.w	r2, #0
   84154:	9908      	ldr	r1, [sp, #32]
   84156:	9507      	str	r5, [sp, #28]
   84158:	f8d1 8000 	ldr.w	r8, [r1]
   8415c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   84160:	1d0d      	adds	r5, r1, #4
   84162:	f1b8 0f00 	cmp.w	r8, #0
   84166:	f000 827c 	beq.w	84662 <_vfiprintf_r+0xb7a>
   8416a:	1c67      	adds	r7, r4, #1
   8416c:	f000 825b 	beq.w	84626 <_vfiprintf_r+0xb3e>
   84170:	4622      	mov	r2, r4
   84172:	2100      	movs	r1, #0
   84174:	4640      	mov	r0, r8
   84176:	9302      	str	r3, [sp, #8]
   84178:	f001 fb24 	bl	857c4 <memchr>
   8417c:	9b02      	ldr	r3, [sp, #8]
   8417e:	2800      	cmp	r0, #0
   84180:	f000 827c 	beq.w	8467c <_vfiprintf_r+0xb94>
   84184:	eba0 0208 	sub.w	r2, r0, r8
   84188:	9508      	str	r5, [sp, #32]
   8418a:	9205      	str	r2, [sp, #20]
   8418c:	9303      	str	r3, [sp, #12]
   8418e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   84192:	2400      	movs	r4, #0
   84194:	e5d8      	b.n	83d48 <_vfiprintf_r+0x260>
   84196:	f043 0301 	orr.w	r3, r3, #1
   8419a:	f899 2000 	ldrb.w	r2, [r9]
   8419e:	e50a      	b.n	83bb6 <_vfiprintf_r+0xce>
   841a0:	f899 2000 	ldrb.w	r2, [r9]
   841a4:	2001      	movs	r0, #1
   841a6:	262b      	movs	r6, #43	; 0x2b
   841a8:	e505      	b.n	83bb6 <_vfiprintf_r+0xce>
   841aa:	2800      	cmp	r0, #0
   841ac:	f040 8283 	bne.w	846b6 <_vfiprintf_r+0xbce>
   841b0:	0699      	lsls	r1, r3, #26
   841b2:	f100 822b 	bmi.w	8460c <_vfiprintf_r+0xb24>
   841b6:	06da      	lsls	r2, r3, #27
   841b8:	d421      	bmi.n	841fe <_vfiprintf_r+0x716>
   841ba:	065b      	lsls	r3, r3, #25
   841bc:	d51f      	bpl.n	841fe <_vfiprintf_r+0x716>
   841be:	9a08      	ldr	r2, [sp, #32]
   841c0:	6813      	ldr	r3, [r2, #0]
   841c2:	3204      	adds	r2, #4
   841c4:	9208      	str	r2, [sp, #32]
   841c6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   841ca:	801a      	strh	r2, [r3, #0]
   841cc:	e4be      	b.n	83b4c <_vfiprintf_r+0x64>
   841ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   841d2:	f899 2000 	ldrb.w	r2, [r9]
   841d6:	e4ee      	b.n	83bb6 <_vfiprintf_r+0xce>
   841d8:	9507      	str	r5, [sp, #28]
   841da:	2800      	cmp	r0, #0
   841dc:	f040 8265 	bne.w	846aa <_vfiprintf_r+0xbc2>
   841e0:	2a00      	cmp	r2, #0
   841e2:	f000 8091 	beq.w	84308 <_vfiprintf_r+0x820>
   841e6:	2101      	movs	r1, #1
   841e8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   841ec:	f04f 0200 	mov.w	r2, #0
   841f0:	9102      	str	r1, [sp, #8]
   841f2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   841f6:	9105      	str	r1, [sp, #20]
   841f8:	f10d 0848 	add.w	r8, sp, #72	; 0x48
   841fc:	e6df      	b.n	83fbe <_vfiprintf_r+0x4d6>
   841fe:	9a08      	ldr	r2, [sp, #32]
   84200:	6813      	ldr	r3, [r2, #0]
   84202:	3204      	adds	r2, #4
   84204:	9208      	str	r2, [sp, #32]
   84206:	9a04      	ldr	r2, [sp, #16]
   84208:	601a      	str	r2, [r3, #0]
   8420a:	e49f      	b.n	83b4c <_vfiprintf_r+0x64>
   8420c:	aa0f      	add	r2, sp, #60	; 0x3c
   8420e:	9901      	ldr	r1, [sp, #4]
   84210:	4620      	mov	r0, r4
   84212:	f7ff fc29 	bl	83a68 <__sprint_r.part.0>
   84216:	2800      	cmp	r0, #0
   84218:	d17d      	bne.n	84316 <_vfiprintf_r+0x82e>
   8421a:	9910      	ldr	r1, [sp, #64]	; 0x40
   8421c:	46d6      	mov	lr, sl
   8421e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84220:	f101 0c01 	add.w	ip, r1, #1
   84224:	e5bd      	b.n	83da2 <_vfiprintf_r+0x2ba>
   84226:	aa0f      	add	r2, sp, #60	; 0x3c
   84228:	9901      	ldr	r1, [sp, #4]
   8422a:	9806      	ldr	r0, [sp, #24]
   8422c:	f7ff fc1c 	bl	83a68 <__sprint_r.part.0>
   84230:	2800      	cmp	r0, #0
   84232:	d170      	bne.n	84316 <_vfiprintf_r+0x82e>
   84234:	46d3      	mov	fp, sl
   84236:	9910      	ldr	r1, [sp, #64]	; 0x40
   84238:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8423c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8423e:	1c48      	adds	r0, r1, #1
   84240:	2d00      	cmp	r5, #0
   84242:	f43f add8 	beq.w	83df6 <_vfiprintf_r+0x30e>
   84246:	2101      	movs	r1, #1
   84248:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   8424c:	440a      	add	r2, r1
   8424e:	2807      	cmp	r0, #7
   84250:	9211      	str	r2, [sp, #68]	; 0x44
   84252:	9010      	str	r0, [sp, #64]	; 0x40
   84254:	f8cb 1004 	str.w	r1, [fp, #4]
   84258:	f8cb 5000 	str.w	r5, [fp]
   8425c:	f340 80b6 	ble.w	843cc <_vfiprintf_r+0x8e4>
   84260:	2a00      	cmp	r2, #0
   84262:	f040 8160 	bne.w	84526 <_vfiprintf_r+0xa3e>
   84266:	9b09      	ldr	r3, [sp, #36]	; 0x24
   84268:	2b00      	cmp	r3, #0
   8426a:	f43f add7 	beq.w	83e1c <_vfiprintf_r+0x334>
   8426e:	2202      	movs	r2, #2
   84270:	4608      	mov	r0, r1
   84272:	46d3      	mov	fp, sl
   84274:	ab0e      	add	r3, sp, #56	; 0x38
   84276:	921d      	str	r2, [sp, #116]	; 0x74
   84278:	931c      	str	r3, [sp, #112]	; 0x70
   8427a:	4601      	mov	r1, r0
   8427c:	f10b 0b08 	add.w	fp, fp, #8
   84280:	3001      	adds	r0, #1
   84282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84284:	2b80      	cmp	r3, #128	; 0x80
   84286:	f43f add0 	beq.w	83e2a <_vfiprintf_r+0x342>
   8428a:	9b05      	ldr	r3, [sp, #20]
   8428c:	1ae4      	subs	r4, r4, r3
   8428e:	2c00      	cmp	r4, #0
   84290:	f77f ae0a 	ble.w	83ea8 <_vfiprintf_r+0x3c0>
   84294:	2c10      	cmp	r4, #16
   84296:	f340 81b7 	ble.w	84608 <_vfiprintf_r+0xb20>
   8429a:	46de      	mov	lr, fp
   8429c:	2610      	movs	r6, #16
   8429e:	4d2a      	ldr	r5, [pc, #168]	; (84348 <_vfiprintf_r+0x860>)
   842a0:	9f06      	ldr	r7, [sp, #24]
   842a2:	f8dd b004 	ldr.w	fp, [sp, #4]
   842a6:	e006      	b.n	842b6 <_vfiprintf_r+0x7ce>
   842a8:	1c88      	adds	r0, r1, #2
   842aa:	4619      	mov	r1, r3
   842ac:	f10e 0e08 	add.w	lr, lr, #8
   842b0:	3c10      	subs	r4, #16
   842b2:	2c10      	cmp	r4, #16
   842b4:	dd0f      	ble.n	842d6 <_vfiprintf_r+0x7ee>
   842b6:	1c4b      	adds	r3, r1, #1
   842b8:	3210      	adds	r2, #16
   842ba:	2b07      	cmp	r3, #7
   842bc:	9211      	str	r2, [sp, #68]	; 0x44
   842be:	e88e 0060 	stmia.w	lr, {r5, r6}
   842c2:	9310      	str	r3, [sp, #64]	; 0x40
   842c4:	ddf0      	ble.n	842a8 <_vfiprintf_r+0x7c0>
   842c6:	b9a2      	cbnz	r2, 842f2 <_vfiprintf_r+0x80a>
   842c8:	3c10      	subs	r4, #16
   842ca:	2c10      	cmp	r4, #16
   842cc:	f04f 0001 	mov.w	r0, #1
   842d0:	4611      	mov	r1, r2
   842d2:	46d6      	mov	lr, sl
   842d4:	dcef      	bgt.n	842b6 <_vfiprintf_r+0x7ce>
   842d6:	46f3      	mov	fp, lr
   842d8:	4422      	add	r2, r4
   842da:	2807      	cmp	r0, #7
   842dc:	9211      	str	r2, [sp, #68]	; 0x44
   842de:	f8cb 5000 	str.w	r5, [fp]
   842e2:	f8cb 4004 	str.w	r4, [fp, #4]
   842e6:	9010      	str	r0, [sp, #64]	; 0x40
   842e8:	dc30      	bgt.n	8434c <_vfiprintf_r+0x864>
   842ea:	f10b 0b08 	add.w	fp, fp, #8
   842ee:	3001      	adds	r0, #1
   842f0:	e5da      	b.n	83ea8 <_vfiprintf_r+0x3c0>
   842f2:	aa0f      	add	r2, sp, #60	; 0x3c
   842f4:	4659      	mov	r1, fp
   842f6:	4638      	mov	r0, r7
   842f8:	f7ff fbb6 	bl	83a68 <__sprint_r.part.0>
   842fc:	b958      	cbnz	r0, 84316 <_vfiprintf_r+0x82e>
   842fe:	9910      	ldr	r1, [sp, #64]	; 0x40
   84300:	46d6      	mov	lr, sl
   84302:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84304:	1c48      	adds	r0, r1, #1
   84306:	e7d3      	b.n	842b0 <_vfiprintf_r+0x7c8>
   84308:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8430a:	b123      	cbz	r3, 84316 <_vfiprintf_r+0x82e>
   8430c:	9806      	ldr	r0, [sp, #24]
   8430e:	aa0f      	add	r2, sp, #60	; 0x3c
   84310:	9901      	ldr	r1, [sp, #4]
   84312:	f7ff fba9 	bl	83a68 <__sprint_r.part.0>
   84316:	9b01      	ldr	r3, [sp, #4]
   84318:	899b      	ldrh	r3, [r3, #12]
   8431a:	065b      	lsls	r3, r3, #25
   8431c:	f57f accd 	bpl.w	83cba <_vfiprintf_r+0x1d2>
   84320:	f04f 33ff 	mov.w	r3, #4294967295
   84324:	9304      	str	r3, [sp, #16]
   84326:	e4c8      	b.n	83cba <_vfiprintf_r+0x1d2>
   84328:	aa0f      	add	r2, sp, #60	; 0x3c
   8432a:	4641      	mov	r1, r8
   8432c:	4638      	mov	r0, r7
   8432e:	f7ff fb9b 	bl	83a68 <__sprint_r.part.0>
   84332:	2800      	cmp	r0, #0
   84334:	d1ef      	bne.n	84316 <_vfiprintf_r+0x82e>
   84336:	9910      	ldr	r1, [sp, #64]	; 0x40
   84338:	46d3      	mov	fp, sl
   8433a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8433c:	1c48      	adds	r0, r1, #1
   8433e:	e5da      	b.n	83ef6 <_vfiprintf_r+0x40e>
   84340:	00086fb4 	.word	0x00086fb4
   84344:	00086fc8 	.word	0x00086fc8
   84348:	00086ff4 	.word	0x00086ff4
   8434c:	2a00      	cmp	r2, #0
   8434e:	f040 80fd 	bne.w	8454c <_vfiprintf_r+0xa64>
   84352:	2301      	movs	r3, #1
   84354:	46d3      	mov	fp, sl
   84356:	9a05      	ldr	r2, [sp, #20]
   84358:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
   8435c:	921d      	str	r2, [sp, #116]	; 0x74
   8435e:	9211      	str	r2, [sp, #68]	; 0x44
   84360:	9310      	str	r3, [sp, #64]	; 0x40
   84362:	f10b 0b08 	add.w	fp, fp, #8
   84366:	9b03      	ldr	r3, [sp, #12]
   84368:	0759      	lsls	r1, r3, #29
   8436a:	d505      	bpl.n	84378 <_vfiprintf_r+0x890>
   8436c:	9b07      	ldr	r3, [sp, #28]
   8436e:	9902      	ldr	r1, [sp, #8]
   84370:	1a5c      	subs	r4, r3, r1
   84372:	2c00      	cmp	r4, #0
   84374:	f73f adb1 	bgt.w	83eda <_vfiprintf_r+0x3f2>
   84378:	9b04      	ldr	r3, [sp, #16]
   8437a:	9907      	ldr	r1, [sp, #28]
   8437c:	9802      	ldr	r0, [sp, #8]
   8437e:	4281      	cmp	r1, r0
   84380:	bfac      	ite	ge
   84382:	185b      	addge	r3, r3, r1
   84384:	181b      	addlt	r3, r3, r0
   84386:	9304      	str	r3, [sp, #16]
   84388:	bb7a      	cbnz	r2, 843ea <_vfiprintf_r+0x902>
   8438a:	2300      	movs	r3, #0
   8438c:	46d3      	mov	fp, sl
   8438e:	9310      	str	r3, [sp, #64]	; 0x40
   84390:	f7ff bbdc 	b.w	83b4c <_vfiprintf_r+0x64>
   84394:	aa0f      	add	r2, sp, #60	; 0x3c
   84396:	9901      	ldr	r1, [sp, #4]
   84398:	4620      	mov	r0, r4
   8439a:	f7ff fb65 	bl	83a68 <__sprint_r.part.0>
   8439e:	2800      	cmp	r0, #0
   843a0:	d1b9      	bne.n	84316 <_vfiprintf_r+0x82e>
   843a2:	9910      	ldr	r1, [sp, #64]	; 0x40
   843a4:	46d4      	mov	ip, sl
   843a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   843a8:	f101 0e01 	add.w	lr, r1, #1
   843ac:	e551      	b.n	83e52 <_vfiprintf_r+0x36a>
   843ae:	2a00      	cmp	r2, #0
   843b0:	f47f af39 	bne.w	84226 <_vfiprintf_r+0x73e>
   843b4:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   843b8:	2900      	cmp	r1, #0
   843ba:	f000 810e 	beq.w	845da <_vfiprintf_r+0xaf2>
   843be:	2201      	movs	r2, #1
   843c0:	46d3      	mov	fp, sl
   843c2:	4610      	mov	r0, r2
   843c4:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   843c8:	921d      	str	r2, [sp, #116]	; 0x74
   843ca:	911c      	str	r1, [sp, #112]	; 0x70
   843cc:	4601      	mov	r1, r0
   843ce:	f10b 0b08 	add.w	fp, fp, #8
   843d2:	3001      	adds	r0, #1
   843d4:	e50f      	b.n	83df6 <_vfiprintf_r+0x30e>
   843d6:	9b03      	ldr	r3, [sp, #12]
   843d8:	2a01      	cmp	r2, #1
   843da:	f000 808e 	beq.w	844fa <_vfiprintf_r+0xa12>
   843de:	2a02      	cmp	r2, #2
   843e0:	d10b      	bne.n	843fa <_vfiprintf_r+0x912>
   843e2:	9303      	str	r3, [sp, #12]
   843e4:	2600      	movs	r6, #0
   843e6:	2700      	movs	r7, #0
   843e8:	e619      	b.n	8401e <_vfiprintf_r+0x536>
   843ea:	aa0f      	add	r2, sp, #60	; 0x3c
   843ec:	9901      	ldr	r1, [sp, #4]
   843ee:	9806      	ldr	r0, [sp, #24]
   843f0:	f7ff fb3a 	bl	83a68 <__sprint_r.part.0>
   843f4:	2800      	cmp	r0, #0
   843f6:	d0c8      	beq.n	8438a <_vfiprintf_r+0x8a2>
   843f8:	e78d      	b.n	84316 <_vfiprintf_r+0x82e>
   843fa:	2600      	movs	r6, #0
   843fc:	2700      	movs	r7, #0
   843fe:	9303      	str	r3, [sp, #12]
   84400:	4651      	mov	r1, sl
   84402:	e000      	b.n	84406 <_vfiprintf_r+0x91e>
   84404:	4641      	mov	r1, r8
   84406:	08f2      	lsrs	r2, r6, #3
   84408:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   8440c:	08f8      	lsrs	r0, r7, #3
   8440e:	f006 0307 	and.w	r3, r6, #7
   84412:	4607      	mov	r7, r0
   84414:	4616      	mov	r6, r2
   84416:	3330      	adds	r3, #48	; 0x30
   84418:	ea56 0207 	orrs.w	r2, r6, r7
   8441c:	f801 3c01 	strb.w	r3, [r1, #-1]
   84420:	f101 38ff 	add.w	r8, r1, #4294967295
   84424:	d1ee      	bne.n	84404 <_vfiprintf_r+0x91c>
   84426:	9a03      	ldr	r2, [sp, #12]
   84428:	07d6      	lsls	r6, r2, #31
   8442a:	f57f ae08 	bpl.w	8403e <_vfiprintf_r+0x556>
   8442e:	2b30      	cmp	r3, #48	; 0x30
   84430:	f43f ae05 	beq.w	8403e <_vfiprintf_r+0x556>
   84434:	2330      	movs	r3, #48	; 0x30
   84436:	3902      	subs	r1, #2
   84438:	f808 3c01 	strb.w	r3, [r8, #-1]
   8443c:	ebaa 0301 	sub.w	r3, sl, r1
   84440:	9305      	str	r3, [sp, #20]
   84442:	4688      	mov	r8, r1
   84444:	e480      	b.n	83d48 <_vfiprintf_r+0x260>
   84446:	9b04      	ldr	r3, [sp, #16]
   84448:	9a07      	ldr	r2, [sp, #28]
   8444a:	428a      	cmp	r2, r1
   8444c:	bfac      	ite	ge
   8444e:	189b      	addge	r3, r3, r2
   84450:	185b      	addlt	r3, r3, r1
   84452:	9304      	str	r3, [sp, #16]
   84454:	e799      	b.n	8438a <_vfiprintf_r+0x8a2>
   84456:	2202      	movs	r2, #2
   84458:	e457      	b.n	83d0a <_vfiprintf_r+0x222>
   8445a:	9405      	str	r4, [sp, #20]
   8445c:	46d0      	mov	r8, sl
   8445e:	e473      	b.n	83d48 <_vfiprintf_r+0x260>
   84460:	2f00      	cmp	r7, #0
   84462:	bf08      	it	eq
   84464:	2e0a      	cmpeq	r6, #10
   84466:	d347      	bcc.n	844f8 <_vfiprintf_r+0xa10>
   84468:	46d0      	mov	r8, sl
   8446a:	4630      	mov	r0, r6
   8446c:	4639      	mov	r1, r7
   8446e:	220a      	movs	r2, #10
   84470:	2300      	movs	r3, #0
   84472:	f001 fdff 	bl	86074 <__aeabi_uldivmod>
   84476:	3230      	adds	r2, #48	; 0x30
   84478:	f808 2d01 	strb.w	r2, [r8, #-1]!
   8447c:	4630      	mov	r0, r6
   8447e:	4639      	mov	r1, r7
   84480:	2300      	movs	r3, #0
   84482:	220a      	movs	r2, #10
   84484:	f001 fdf6 	bl	86074 <__aeabi_uldivmod>
   84488:	4606      	mov	r6, r0
   8448a:	460f      	mov	r7, r1
   8448c:	ea56 0307 	orrs.w	r3, r6, r7
   84490:	d1eb      	bne.n	8446a <_vfiprintf_r+0x982>
   84492:	ebaa 0308 	sub.w	r3, sl, r8
   84496:	9305      	str	r3, [sp, #20]
   84498:	e456      	b.n	83d48 <_vfiprintf_r+0x260>
   8449a:	aa0f      	add	r2, sp, #60	; 0x3c
   8449c:	9901      	ldr	r1, [sp, #4]
   8449e:	9806      	ldr	r0, [sp, #24]
   844a0:	f7ff fae2 	bl	83a68 <__sprint_r.part.0>
   844a4:	2800      	cmp	r0, #0
   844a6:	f47f af36 	bne.w	84316 <_vfiprintf_r+0x82e>
   844aa:	46d3      	mov	fp, sl
   844ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
   844ae:	e75a      	b.n	84366 <_vfiprintf_r+0x87e>
   844b0:	aa0f      	add	r2, sp, #60	; 0x3c
   844b2:	9901      	ldr	r1, [sp, #4]
   844b4:	9806      	ldr	r0, [sp, #24]
   844b6:	f7ff fad7 	bl	83a68 <__sprint_r.part.0>
   844ba:	2800      	cmp	r0, #0
   844bc:	f47f af2b 	bne.w	84316 <_vfiprintf_r+0x82e>
   844c0:	46d3      	mov	fp, sl
   844c2:	f7ff bbdc 	b.w	83c7e <_vfiprintf_r+0x196>
   844c6:	9808      	ldr	r0, [sp, #32]
   844c8:	2700      	movs	r7, #0
   844ca:	4601      	mov	r1, r0
   844cc:	3104      	adds	r1, #4
   844ce:	6806      	ldr	r6, [r0, #0]
   844d0:	9108      	str	r1, [sp, #32]
   844d2:	e41a      	b.n	83d0a <_vfiprintf_r+0x222>
   844d4:	680e      	ldr	r6, [r1, #0]
   844d6:	3104      	adds	r1, #4
   844d8:	9108      	str	r1, [sp, #32]
   844da:	2700      	movs	r7, #0
   844dc:	e5e3      	b.n	840a6 <_vfiprintf_r+0x5be>
   844de:	6816      	ldr	r6, [r2, #0]
   844e0:	3204      	adds	r2, #4
   844e2:	17f7      	asrs	r7, r6, #31
   844e4:	9208      	str	r2, [sp, #32]
   844e6:	4630      	mov	r0, r6
   844e8:	4639      	mov	r1, r7
   844ea:	e581      	b.n	83ff0 <_vfiprintf_r+0x508>
   844ec:	3104      	adds	r1, #4
   844ee:	6816      	ldr	r6, [r2, #0]
   844f0:	2700      	movs	r7, #0
   844f2:	2201      	movs	r2, #1
   844f4:	9108      	str	r1, [sp, #32]
   844f6:	e408      	b.n	83d0a <_vfiprintf_r+0x222>
   844f8:	9b03      	ldr	r3, [sp, #12]
   844fa:	9303      	str	r3, [sp, #12]
   844fc:	2301      	movs	r3, #1
   844fe:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
   84502:	3630      	adds	r6, #48	; 0x30
   84504:	f808 6d41 	strb.w	r6, [r8, #-65]!
   84508:	9305      	str	r3, [sp, #20]
   8450a:	e41d      	b.n	83d48 <_vfiprintf_r+0x260>
   8450c:	aa0f      	add	r2, sp, #60	; 0x3c
   8450e:	9901      	ldr	r1, [sp, #4]
   84510:	9806      	ldr	r0, [sp, #24]
   84512:	f7ff faa9 	bl	83a68 <__sprint_r.part.0>
   84516:	2800      	cmp	r0, #0
   84518:	f47f aefd 	bne.w	84316 <_vfiprintf_r+0x82e>
   8451c:	9910      	ldr	r1, [sp, #64]	; 0x40
   8451e:	46d3      	mov	fp, sl
   84520:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84522:	1c48      	adds	r0, r1, #1
   84524:	e6ad      	b.n	84282 <_vfiprintf_r+0x79a>
   84526:	aa0f      	add	r2, sp, #60	; 0x3c
   84528:	9901      	ldr	r1, [sp, #4]
   8452a:	9806      	ldr	r0, [sp, #24]
   8452c:	f7ff fa9c 	bl	83a68 <__sprint_r.part.0>
   84530:	2800      	cmp	r0, #0
   84532:	f47f aef0 	bne.w	84316 <_vfiprintf_r+0x82e>
   84536:	9910      	ldr	r1, [sp, #64]	; 0x40
   84538:	46d3      	mov	fp, sl
   8453a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8453c:	1c48      	adds	r0, r1, #1
   8453e:	e45a      	b.n	83df6 <_vfiprintf_r+0x30e>
   84540:	2a00      	cmp	r2, #0
   84542:	d17b      	bne.n	8463c <_vfiprintf_r+0xb54>
   84544:	2001      	movs	r0, #1
   84546:	4611      	mov	r1, r2
   84548:	46d3      	mov	fp, sl
   8454a:	e69e      	b.n	8428a <_vfiprintf_r+0x7a2>
   8454c:	aa0f      	add	r2, sp, #60	; 0x3c
   8454e:	9901      	ldr	r1, [sp, #4]
   84550:	9806      	ldr	r0, [sp, #24]
   84552:	f7ff fa89 	bl	83a68 <__sprint_r.part.0>
   84556:	2800      	cmp	r0, #0
   84558:	f47f aedd 	bne.w	84316 <_vfiprintf_r+0x82e>
   8455c:	9810      	ldr	r0, [sp, #64]	; 0x40
   8455e:	46d3      	mov	fp, sl
   84560:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84562:	3001      	adds	r0, #1
   84564:	e4a0      	b.n	83ea8 <_vfiprintf_r+0x3c0>
   84566:	9d08      	ldr	r5, [sp, #32]
   84568:	3507      	adds	r5, #7
   8456a:	f025 0207 	bic.w	r2, r5, #7
   8456e:	f102 0108 	add.w	r1, r2, #8
   84572:	e9d2 6700 	ldrd	r6, r7, [r2]
   84576:	9108      	str	r1, [sp, #32]
   84578:	2200      	movs	r2, #0
   8457a:	f7ff bbc6 	b.w	83d0a <_vfiprintf_r+0x222>
   8457e:	9d08      	ldr	r5, [sp, #32]
   84580:	3507      	adds	r5, #7
   84582:	f025 0207 	bic.w	r2, r5, #7
   84586:	f102 0108 	add.w	r1, r2, #8
   8458a:	e9d2 6700 	ldrd	r6, r7, [r2]
   8458e:	9108      	str	r1, [sp, #32]
   84590:	2201      	movs	r2, #1
   84592:	f7ff bbba 	b.w	83d0a <_vfiprintf_r+0x222>
   84596:	9d08      	ldr	r5, [sp, #32]
   84598:	3507      	adds	r5, #7
   8459a:	f025 0107 	bic.w	r1, r5, #7
   8459e:	f101 0008 	add.w	r0, r1, #8
   845a2:	9008      	str	r0, [sp, #32]
   845a4:	e9d1 6700 	ldrd	r6, r7, [r1]
   845a8:	e57d      	b.n	840a6 <_vfiprintf_r+0x5be>
   845aa:	9d08      	ldr	r5, [sp, #32]
   845ac:	3507      	adds	r5, #7
   845ae:	f025 0507 	bic.w	r5, r5, #7
   845b2:	f105 0208 	add.w	r2, r5, #8
   845b6:	e9d5 0100 	ldrd	r0, r1, [r5]
   845ba:	9208      	str	r2, [sp, #32]
   845bc:	4606      	mov	r6, r0
   845be:	460f      	mov	r7, r1
   845c0:	e516      	b.n	83ff0 <_vfiprintf_r+0x508>
   845c2:	46d0      	mov	r8, sl
   845c4:	f7ff bbc0 	b.w	83d48 <_vfiprintf_r+0x260>
   845c8:	252d      	movs	r5, #45	; 0x2d
   845ca:	4276      	negs	r6, r6
   845cc:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   845d0:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   845d4:	2201      	movs	r2, #1
   845d6:	f7ff bb9d 	b.w	83d14 <_vfiprintf_r+0x22c>
   845da:	9b09      	ldr	r3, [sp, #36]	; 0x24
   845dc:	b96b      	cbnz	r3, 845fa <_vfiprintf_r+0xb12>
   845de:	4611      	mov	r1, r2
   845e0:	2001      	movs	r0, #1
   845e2:	46d3      	mov	fp, sl
   845e4:	e651      	b.n	8428a <_vfiprintf_r+0x7a2>
   845e6:	aa0f      	add	r2, sp, #60	; 0x3c
   845e8:	9901      	ldr	r1, [sp, #4]
   845ea:	9806      	ldr	r0, [sp, #24]
   845ec:	f7ff fa3c 	bl	83a68 <__sprint_r.part.0>
   845f0:	2800      	cmp	r0, #0
   845f2:	f47f ae90 	bne.w	84316 <_vfiprintf_r+0x82e>
   845f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   845f8:	e6be      	b.n	84378 <_vfiprintf_r+0x890>
   845fa:	2202      	movs	r2, #2
   845fc:	ab0e      	add	r3, sp, #56	; 0x38
   845fe:	921d      	str	r2, [sp, #116]	; 0x74
   84600:	931c      	str	r3, [sp, #112]	; 0x70
   84602:	2001      	movs	r0, #1
   84604:	46d3      	mov	fp, sl
   84606:	e638      	b.n	8427a <_vfiprintf_r+0x792>
   84608:	4d31      	ldr	r5, [pc, #196]	; (846d0 <_vfiprintf_r+0xbe8>)
   8460a:	e665      	b.n	842d8 <_vfiprintf_r+0x7f0>
   8460c:	9a08      	ldr	r2, [sp, #32]
   8460e:	4613      	mov	r3, r2
   84610:	3304      	adds	r3, #4
   84612:	9308      	str	r3, [sp, #32]
   84614:	9b04      	ldr	r3, [sp, #16]
   84616:	6811      	ldr	r1, [r2, #0]
   84618:	17dd      	asrs	r5, r3, #31
   8461a:	461a      	mov	r2, r3
   8461c:	462b      	mov	r3, r5
   8461e:	e9c1 2300 	strd	r2, r3, [r1]
   84622:	f7ff ba93 	b.w	83b4c <_vfiprintf_r+0x64>
   84626:	4640      	mov	r0, r8
   84628:	9508      	str	r5, [sp, #32]
   8462a:	9303      	str	r3, [sp, #12]
   8462c:	f7ff f9bc 	bl	839a8 <strlen>
   84630:	2400      	movs	r4, #0
   84632:	9005      	str	r0, [sp, #20]
   84634:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   84638:	f7ff bb86 	b.w	83d48 <_vfiprintf_r+0x260>
   8463c:	aa0f      	add	r2, sp, #60	; 0x3c
   8463e:	9901      	ldr	r1, [sp, #4]
   84640:	9806      	ldr	r0, [sp, #24]
   84642:	f7ff fa11 	bl	83a68 <__sprint_r.part.0>
   84646:	2800      	cmp	r0, #0
   84648:	f47f ae65 	bne.w	84316 <_vfiprintf_r+0x82e>
   8464c:	9910      	ldr	r1, [sp, #64]	; 0x40
   8464e:	46d3      	mov	fp, sl
   84650:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84652:	1c48      	adds	r0, r1, #1
   84654:	e619      	b.n	8428a <_vfiprintf_r+0x7a2>
   84656:	9910      	ldr	r1, [sp, #64]	; 0x40
   84658:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8465a:	3101      	adds	r1, #1
   8465c:	4e1d      	ldr	r6, [pc, #116]	; (846d4 <_vfiprintf_r+0xbec>)
   8465e:	f7ff bbb8 	b.w	83dd2 <_vfiprintf_r+0x2ea>
   84662:	2c06      	cmp	r4, #6
   84664:	bf28      	it	cs
   84666:	2406      	movcs	r4, #6
   84668:	9508      	str	r5, [sp, #32]
   8466a:	9405      	str	r4, [sp, #20]
   8466c:	9402      	str	r4, [sp, #8]
   8466e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 846d8 <_vfiprintf_r+0xbf0>
   84672:	e4a4      	b.n	83fbe <_vfiprintf_r+0x4d6>
   84674:	9810      	ldr	r0, [sp, #64]	; 0x40
   84676:	4e17      	ldr	r6, [pc, #92]	; (846d4 <_vfiprintf_r+0xbec>)
   84678:	3001      	adds	r0, #1
   8467a:	e453      	b.n	83f24 <_vfiprintf_r+0x43c>
   8467c:	9405      	str	r4, [sp, #20]
   8467e:	9508      	str	r5, [sp, #32]
   84680:	9303      	str	r3, [sp, #12]
   84682:	4604      	mov	r4, r0
   84684:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   84688:	f7ff bb5e 	b.w	83d48 <_vfiprintf_r+0x260>
   8468c:	4686      	mov	lr, r0
   8468e:	4d10      	ldr	r5, [pc, #64]	; (846d0 <_vfiprintf_r+0xbe8>)
   84690:	f7ff bbf6 	b.w	83e80 <_vfiprintf_r+0x398>
   84694:	9908      	ldr	r1, [sp, #32]
   84696:	f899 2001 	ldrb.w	r2, [r9, #1]
   8469a:	680c      	ldr	r4, [r1, #0]
   8469c:	3104      	adds	r1, #4
   8469e:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   846a2:	46b9      	mov	r9, r7
   846a4:	9108      	str	r1, [sp, #32]
   846a6:	f7ff ba86 	b.w	83bb6 <_vfiprintf_r+0xce>
   846aa:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   846ae:	e597      	b.n	841e0 <_vfiprintf_r+0x6f8>
   846b0:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   846b4:	e4e6      	b.n	84084 <_vfiprintf_r+0x59c>
   846b6:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   846ba:	e579      	b.n	841b0 <_vfiprintf_r+0x6c8>
   846bc:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   846c0:	e52c      	b.n	8411c <_vfiprintf_r+0x634>
   846c2:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   846c6:	e4ca      	b.n	8405e <_vfiprintf_r+0x576>
   846c8:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   846cc:	e47e      	b.n	83fcc <_vfiprintf_r+0x4e4>
   846ce:	bf00      	nop
   846d0:	00086ff4 	.word	0x00086ff4
   846d4:	00086fe4 	.word	0x00086fe4
   846d8:	00086fdc 	.word	0x00086fdc

000846dc <__sbprintf>:
   846dc:	b570      	push	{r4, r5, r6, lr}
   846de:	460c      	mov	r4, r1
   846e0:	2600      	movs	r6, #0
   846e2:	f44f 6580 	mov.w	r5, #1024	; 0x400
   846e6:	8989      	ldrh	r1, [r1, #12]
   846e8:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   846ec:	f021 0102 	bic.w	r1, r1, #2
   846f0:	f8ad 100c 	strh.w	r1, [sp, #12]
   846f4:	9606      	str	r6, [sp, #24]
   846f6:	6e61      	ldr	r1, [r4, #100]	; 0x64
   846f8:	89e6      	ldrh	r6, [r4, #14]
   846fa:	9119      	str	r1, [sp, #100]	; 0x64
   846fc:	f8ad 600e 	strh.w	r6, [sp, #14]
   84700:	69e1      	ldr	r1, [r4, #28]
   84702:	6a66      	ldr	r6, [r4, #36]	; 0x24
   84704:	9107      	str	r1, [sp, #28]
   84706:	9609      	str	r6, [sp, #36]	; 0x24
   84708:	4669      	mov	r1, sp
   8470a:	ae1a      	add	r6, sp, #104	; 0x68
   8470c:	9600      	str	r6, [sp, #0]
   8470e:	9604      	str	r6, [sp, #16]
   84710:	9502      	str	r5, [sp, #8]
   84712:	9505      	str	r5, [sp, #20]
   84714:	4606      	mov	r6, r0
   84716:	f7ff f9e7 	bl	83ae8 <_vfiprintf_r>
   8471a:	1e05      	subs	r5, r0, #0
   8471c:	db07      	blt.n	8472e <__sbprintf+0x52>
   8471e:	4630      	mov	r0, r6
   84720:	4669      	mov	r1, sp
   84722:	f000 f921 	bl	84968 <_fflush_r>
   84726:	2800      	cmp	r0, #0
   84728:	bf18      	it	ne
   8472a:	f04f 35ff 	movne.w	r5, #4294967295
   8472e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   84732:	065b      	lsls	r3, r3, #25
   84734:	d503      	bpl.n	8473e <__sbprintf+0x62>
   84736:	89a3      	ldrh	r3, [r4, #12]
   84738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8473c:	81a3      	strh	r3, [r4, #12]
   8473e:	4628      	mov	r0, r5
   84740:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   84744:	bd70      	pop	{r4, r5, r6, pc}
   84746:	bf00      	nop

00084748 <__swsetup_r>:
   84748:	b538      	push	{r3, r4, r5, lr}
   8474a:	4b30      	ldr	r3, [pc, #192]	; (8480c <__swsetup_r+0xc4>)
   8474c:	4605      	mov	r5, r0
   8474e:	6818      	ldr	r0, [r3, #0]
   84750:	460c      	mov	r4, r1
   84752:	b110      	cbz	r0, 8475a <__swsetup_r+0x12>
   84754:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84756:	2b00      	cmp	r3, #0
   84758:	d038      	beq.n	847cc <__swsetup_r+0x84>
   8475a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8475e:	b293      	uxth	r3, r2
   84760:	0718      	lsls	r0, r3, #28
   84762:	d50c      	bpl.n	8477e <__swsetup_r+0x36>
   84764:	6920      	ldr	r0, [r4, #16]
   84766:	b1a8      	cbz	r0, 84794 <__swsetup_r+0x4c>
   84768:	f013 0201 	ands.w	r2, r3, #1
   8476c:	d01e      	beq.n	847ac <__swsetup_r+0x64>
   8476e:	2200      	movs	r2, #0
   84770:	6963      	ldr	r3, [r4, #20]
   84772:	60a2      	str	r2, [r4, #8]
   84774:	425b      	negs	r3, r3
   84776:	61a3      	str	r3, [r4, #24]
   84778:	b1f0      	cbz	r0, 847b8 <__swsetup_r+0x70>
   8477a:	2000      	movs	r0, #0
   8477c:	bd38      	pop	{r3, r4, r5, pc}
   8477e:	06d9      	lsls	r1, r3, #27
   84780:	d53b      	bpl.n	847fa <__swsetup_r+0xb2>
   84782:	0758      	lsls	r0, r3, #29
   84784:	d425      	bmi.n	847d2 <__swsetup_r+0x8a>
   84786:	6920      	ldr	r0, [r4, #16]
   84788:	f042 0308 	orr.w	r3, r2, #8
   8478c:	81a3      	strh	r3, [r4, #12]
   8478e:	b29b      	uxth	r3, r3
   84790:	2800      	cmp	r0, #0
   84792:	d1e9      	bne.n	84768 <__swsetup_r+0x20>
   84794:	f403 7220 	and.w	r2, r3, #640	; 0x280
   84798:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8479c:	d0e4      	beq.n	84768 <__swsetup_r+0x20>
   8479e:	4628      	mov	r0, r5
   847a0:	4621      	mov	r1, r4
   847a2:	f000 fd0b 	bl	851bc <__smakebuf_r>
   847a6:	89a3      	ldrh	r3, [r4, #12]
   847a8:	6920      	ldr	r0, [r4, #16]
   847aa:	e7dd      	b.n	84768 <__swsetup_r+0x20>
   847ac:	0799      	lsls	r1, r3, #30
   847ae:	bf58      	it	pl
   847b0:	6962      	ldrpl	r2, [r4, #20]
   847b2:	60a2      	str	r2, [r4, #8]
   847b4:	2800      	cmp	r0, #0
   847b6:	d1e0      	bne.n	8477a <__swsetup_r+0x32>
   847b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   847bc:	061a      	lsls	r2, r3, #24
   847be:	d5dd      	bpl.n	8477c <__swsetup_r+0x34>
   847c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   847c4:	81a3      	strh	r3, [r4, #12]
   847c6:	f04f 30ff 	mov.w	r0, #4294967295
   847ca:	bd38      	pop	{r3, r4, r5, pc}
   847cc:	f000 f960 	bl	84a90 <__sinit>
   847d0:	e7c3      	b.n	8475a <__swsetup_r+0x12>
   847d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   847d4:	b151      	cbz	r1, 847ec <__swsetup_r+0xa4>
   847d6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   847da:	4299      	cmp	r1, r3
   847dc:	d004      	beq.n	847e8 <__swsetup_r+0xa0>
   847de:	4628      	mov	r0, r5
   847e0:	f000 fa28 	bl	84c34 <_free_r>
   847e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   847e8:	2300      	movs	r3, #0
   847ea:	6323      	str	r3, [r4, #48]	; 0x30
   847ec:	2300      	movs	r3, #0
   847ee:	6920      	ldr	r0, [r4, #16]
   847f0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   847f4:	e884 0009 	stmia.w	r4, {r0, r3}
   847f8:	e7c6      	b.n	84788 <__swsetup_r+0x40>
   847fa:	2309      	movs	r3, #9
   847fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   84800:	602b      	str	r3, [r5, #0]
   84802:	f04f 30ff 	mov.w	r0, #4294967295
   84806:	81a2      	strh	r2, [r4, #12]
   84808:	bd38      	pop	{r3, r4, r5, pc}
   8480a:	bf00      	nop
   8480c:	20070150 	.word	0x20070150

00084810 <register_fini>:
   84810:	4b02      	ldr	r3, [pc, #8]	; (8481c <register_fini+0xc>)
   84812:	b113      	cbz	r3, 8481a <register_fini+0xa>
   84814:	4802      	ldr	r0, [pc, #8]	; (84820 <register_fini+0x10>)
   84816:	f000 b805 	b.w	84824 <atexit>
   8481a:	4770      	bx	lr
   8481c:	00000000 	.word	0x00000000
   84820:	00084aa5 	.word	0x00084aa5

00084824 <atexit>:
   84824:	2300      	movs	r3, #0
   84826:	4601      	mov	r1, r0
   84828:	461a      	mov	r2, r3
   8482a:	4618      	mov	r0, r3
   8482c:	f001 bb28 	b.w	85e80 <__register_exitproc>

00084830 <__sflush_r>:
   84830:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   84834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84838:	b29a      	uxth	r2, r3
   8483a:	460d      	mov	r5, r1
   8483c:	0711      	lsls	r1, r2, #28
   8483e:	4680      	mov	r8, r0
   84840:	d43a      	bmi.n	848b8 <__sflush_r+0x88>
   84842:	686a      	ldr	r2, [r5, #4]
   84844:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84848:	2a00      	cmp	r2, #0
   8484a:	81ab      	strh	r3, [r5, #12]
   8484c:	dd70      	ble.n	84930 <__sflush_r+0x100>
   8484e:	6aac      	ldr	r4, [r5, #40]	; 0x28
   84850:	2c00      	cmp	r4, #0
   84852:	d04a      	beq.n	848ea <__sflush_r+0xba>
   84854:	2200      	movs	r2, #0
   84856:	b29b      	uxth	r3, r3
   84858:	f8d8 6000 	ldr.w	r6, [r8]
   8485c:	f8c8 2000 	str.w	r2, [r8]
   84860:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   84864:	d068      	beq.n	84938 <__sflush_r+0x108>
   84866:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   84868:	075f      	lsls	r7, r3, #29
   8486a:	d505      	bpl.n	84878 <__sflush_r+0x48>
   8486c:	6869      	ldr	r1, [r5, #4]
   8486e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   84870:	1a52      	subs	r2, r2, r1
   84872:	b10b      	cbz	r3, 84878 <__sflush_r+0x48>
   84874:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   84876:	1ad2      	subs	r2, r2, r3
   84878:	2300      	movs	r3, #0
   8487a:	69e9      	ldr	r1, [r5, #28]
   8487c:	4640      	mov	r0, r8
   8487e:	47a0      	blx	r4
   84880:	1c44      	adds	r4, r0, #1
   84882:	d03d      	beq.n	84900 <__sflush_r+0xd0>
   84884:	2100      	movs	r1, #0
   84886:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8488a:	692a      	ldr	r2, [r5, #16]
   8488c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84890:	81ab      	strh	r3, [r5, #12]
   84892:	04db      	lsls	r3, r3, #19
   84894:	6069      	str	r1, [r5, #4]
   84896:	602a      	str	r2, [r5, #0]
   84898:	d448      	bmi.n	8492c <__sflush_r+0xfc>
   8489a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8489c:	f8c8 6000 	str.w	r6, [r8]
   848a0:	b319      	cbz	r1, 848ea <__sflush_r+0xba>
   848a2:	f105 0340 	add.w	r3, r5, #64	; 0x40
   848a6:	4299      	cmp	r1, r3
   848a8:	d002      	beq.n	848b0 <__sflush_r+0x80>
   848aa:	4640      	mov	r0, r8
   848ac:	f000 f9c2 	bl	84c34 <_free_r>
   848b0:	2000      	movs	r0, #0
   848b2:	6328      	str	r0, [r5, #48]	; 0x30
   848b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   848b8:	692e      	ldr	r6, [r5, #16]
   848ba:	b1b6      	cbz	r6, 848ea <__sflush_r+0xba>
   848bc:	0791      	lsls	r1, r2, #30
   848be:	bf18      	it	ne
   848c0:	2300      	movne	r3, #0
   848c2:	682c      	ldr	r4, [r5, #0]
   848c4:	bf08      	it	eq
   848c6:	696b      	ldreq	r3, [r5, #20]
   848c8:	602e      	str	r6, [r5, #0]
   848ca:	1ba4      	subs	r4, r4, r6
   848cc:	60ab      	str	r3, [r5, #8]
   848ce:	e00a      	b.n	848e6 <__sflush_r+0xb6>
   848d0:	4623      	mov	r3, r4
   848d2:	4632      	mov	r2, r6
   848d4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   848d6:	69e9      	ldr	r1, [r5, #28]
   848d8:	4640      	mov	r0, r8
   848da:	47b8      	blx	r7
   848dc:	2800      	cmp	r0, #0
   848de:	eba4 0400 	sub.w	r4, r4, r0
   848e2:	4406      	add	r6, r0
   848e4:	dd04      	ble.n	848f0 <__sflush_r+0xc0>
   848e6:	2c00      	cmp	r4, #0
   848e8:	dcf2      	bgt.n	848d0 <__sflush_r+0xa0>
   848ea:	2000      	movs	r0, #0
   848ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   848f0:	89ab      	ldrh	r3, [r5, #12]
   848f2:	f04f 30ff 	mov.w	r0, #4294967295
   848f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   848fa:	81ab      	strh	r3, [r5, #12]
   848fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84900:	f8d8 4000 	ldr.w	r4, [r8]
   84904:	2c1d      	cmp	r4, #29
   84906:	d8f3      	bhi.n	848f0 <__sflush_r+0xc0>
   84908:	4b16      	ldr	r3, [pc, #88]	; (84964 <__sflush_r+0x134>)
   8490a:	40e3      	lsrs	r3, r4
   8490c:	43db      	mvns	r3, r3
   8490e:	f013 0301 	ands.w	r3, r3, #1
   84912:	d1ed      	bne.n	848f0 <__sflush_r+0xc0>
   84914:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   84918:	6929      	ldr	r1, [r5, #16]
   8491a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8491e:	81aa      	strh	r2, [r5, #12]
   84920:	04d2      	lsls	r2, r2, #19
   84922:	606b      	str	r3, [r5, #4]
   84924:	6029      	str	r1, [r5, #0]
   84926:	d5b8      	bpl.n	8489a <__sflush_r+0x6a>
   84928:	2c00      	cmp	r4, #0
   8492a:	d1b6      	bne.n	8489a <__sflush_r+0x6a>
   8492c:	6528      	str	r0, [r5, #80]	; 0x50
   8492e:	e7b4      	b.n	8489a <__sflush_r+0x6a>
   84930:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   84932:	2a00      	cmp	r2, #0
   84934:	dc8b      	bgt.n	8484e <__sflush_r+0x1e>
   84936:	e7d8      	b.n	848ea <__sflush_r+0xba>
   84938:	2301      	movs	r3, #1
   8493a:	69e9      	ldr	r1, [r5, #28]
   8493c:	4640      	mov	r0, r8
   8493e:	47a0      	blx	r4
   84940:	1c43      	adds	r3, r0, #1
   84942:	4602      	mov	r2, r0
   84944:	d002      	beq.n	8494c <__sflush_r+0x11c>
   84946:	89ab      	ldrh	r3, [r5, #12]
   84948:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8494a:	e78d      	b.n	84868 <__sflush_r+0x38>
   8494c:	f8d8 3000 	ldr.w	r3, [r8]
   84950:	2b00      	cmp	r3, #0
   84952:	d0f8      	beq.n	84946 <__sflush_r+0x116>
   84954:	2b1d      	cmp	r3, #29
   84956:	d001      	beq.n	8495c <__sflush_r+0x12c>
   84958:	2b16      	cmp	r3, #22
   8495a:	d1c9      	bne.n	848f0 <__sflush_r+0xc0>
   8495c:	f8c8 6000 	str.w	r6, [r8]
   84960:	e7c3      	b.n	848ea <__sflush_r+0xba>
   84962:	bf00      	nop
   84964:	20400001 	.word	0x20400001

00084968 <_fflush_r>:
   84968:	b510      	push	{r4, lr}
   8496a:	4604      	mov	r4, r0
   8496c:	b082      	sub	sp, #8
   8496e:	b108      	cbz	r0, 84974 <_fflush_r+0xc>
   84970:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84972:	b153      	cbz	r3, 8498a <_fflush_r+0x22>
   84974:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   84978:	b908      	cbnz	r0, 8497e <_fflush_r+0x16>
   8497a:	b002      	add	sp, #8
   8497c:	bd10      	pop	{r4, pc}
   8497e:	4620      	mov	r0, r4
   84980:	b002      	add	sp, #8
   84982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   84986:	f7ff bf53 	b.w	84830 <__sflush_r>
   8498a:	9101      	str	r1, [sp, #4]
   8498c:	f000 f880 	bl	84a90 <__sinit>
   84990:	9901      	ldr	r1, [sp, #4]
   84992:	e7ef      	b.n	84974 <_fflush_r+0xc>

00084994 <_cleanup_r>:
   84994:	4901      	ldr	r1, [pc, #4]	; (8499c <_cleanup_r+0x8>)
   84996:	f000 bbad 	b.w	850f4 <_fwalk_reent>
   8499a:	bf00      	nop
   8499c:	00085f51 	.word	0x00085f51

000849a0 <__sinit.part.1>:
   849a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   849a4:	4607      	mov	r7, r0
   849a6:	2400      	movs	r4, #0
   849a8:	2304      	movs	r3, #4
   849aa:	2103      	movs	r1, #3
   849ac:	687d      	ldr	r5, [r7, #4]
   849ae:	4833      	ldr	r0, [pc, #204]	; (84a7c <__sinit.part.1+0xdc>)
   849b0:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   849b4:	63f8      	str	r0, [r7, #60]	; 0x3c
   849b6:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   849ba:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   849be:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   849c2:	b083      	sub	sp, #12
   849c4:	602c      	str	r4, [r5, #0]
   849c6:	606c      	str	r4, [r5, #4]
   849c8:	60ac      	str	r4, [r5, #8]
   849ca:	666c      	str	r4, [r5, #100]	; 0x64
   849cc:	81ec      	strh	r4, [r5, #14]
   849ce:	612c      	str	r4, [r5, #16]
   849d0:	616c      	str	r4, [r5, #20]
   849d2:	61ac      	str	r4, [r5, #24]
   849d4:	81ab      	strh	r3, [r5, #12]
   849d6:	4621      	mov	r1, r4
   849d8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   849dc:	2208      	movs	r2, #8
   849de:	f7fe fee7 	bl	837b0 <memset>
   849e2:	2301      	movs	r3, #1
   849e4:	2209      	movs	r2, #9
   849e6:	68be      	ldr	r6, [r7, #8]
   849e8:	f8df b094 	ldr.w	fp, [pc, #148]	; 84a80 <__sinit.part.1+0xe0>
   849ec:	f8df a094 	ldr.w	sl, [pc, #148]	; 84a84 <__sinit.part.1+0xe4>
   849f0:	f8df 9094 	ldr.w	r9, [pc, #148]	; 84a88 <__sinit.part.1+0xe8>
   849f4:	f8df 8094 	ldr.w	r8, [pc, #148]	; 84a8c <__sinit.part.1+0xec>
   849f8:	f8c5 b020 	str.w	fp, [r5, #32]
   849fc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   84a00:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   84a04:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   84a08:	61ed      	str	r5, [r5, #28]
   84a0a:	4621      	mov	r1, r4
   84a0c:	81f3      	strh	r3, [r6, #14]
   84a0e:	81b2      	strh	r2, [r6, #12]
   84a10:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   84a14:	6034      	str	r4, [r6, #0]
   84a16:	6074      	str	r4, [r6, #4]
   84a18:	60b4      	str	r4, [r6, #8]
   84a1a:	6674      	str	r4, [r6, #100]	; 0x64
   84a1c:	6134      	str	r4, [r6, #16]
   84a1e:	6174      	str	r4, [r6, #20]
   84a20:	61b4      	str	r4, [r6, #24]
   84a22:	2208      	movs	r2, #8
   84a24:	9301      	str	r3, [sp, #4]
   84a26:	f7fe fec3 	bl	837b0 <memset>
   84a2a:	2012      	movs	r0, #18
   84a2c:	2202      	movs	r2, #2
   84a2e:	68fd      	ldr	r5, [r7, #12]
   84a30:	4621      	mov	r1, r4
   84a32:	61f6      	str	r6, [r6, #28]
   84a34:	f8c6 b020 	str.w	fp, [r6, #32]
   84a38:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   84a3c:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   84a40:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   84a44:	81a8      	strh	r0, [r5, #12]
   84a46:	81ea      	strh	r2, [r5, #14]
   84a48:	602c      	str	r4, [r5, #0]
   84a4a:	606c      	str	r4, [r5, #4]
   84a4c:	60ac      	str	r4, [r5, #8]
   84a4e:	666c      	str	r4, [r5, #100]	; 0x64
   84a50:	612c      	str	r4, [r5, #16]
   84a52:	616c      	str	r4, [r5, #20]
   84a54:	61ac      	str	r4, [r5, #24]
   84a56:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   84a5a:	2208      	movs	r2, #8
   84a5c:	f7fe fea8 	bl	837b0 <memset>
   84a60:	9b01      	ldr	r3, [sp, #4]
   84a62:	61ed      	str	r5, [r5, #28]
   84a64:	f8c5 b020 	str.w	fp, [r5, #32]
   84a68:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   84a6c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   84a70:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   84a74:	63bb      	str	r3, [r7, #56]	; 0x38
   84a76:	b003      	add	sp, #12
   84a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84a7c:	00084995 	.word	0x00084995
   84a80:	00085cb1 	.word	0x00085cb1
   84a84:	00085cd5 	.word	0x00085cd5
   84a88:	00085d11 	.word	0x00085d11
   84a8c:	00085d31 	.word	0x00085d31

00084a90 <__sinit>:
   84a90:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84a92:	b103      	cbz	r3, 84a96 <__sinit+0x6>
   84a94:	4770      	bx	lr
   84a96:	f7ff bf83 	b.w	849a0 <__sinit.part.1>
   84a9a:	bf00      	nop

00084a9c <__sfp_lock_acquire>:
   84a9c:	4770      	bx	lr
   84a9e:	bf00      	nop

00084aa0 <__sfp_lock_release>:
   84aa0:	4770      	bx	lr
   84aa2:	bf00      	nop

00084aa4 <__libc_fini_array>:
   84aa4:	b538      	push	{r3, r4, r5, lr}
   84aa6:	4c0a      	ldr	r4, [pc, #40]	; (84ad0 <__libc_fini_array+0x2c>)
   84aa8:	4d0a      	ldr	r5, [pc, #40]	; (84ad4 <__libc_fini_array+0x30>)
   84aaa:	1b64      	subs	r4, r4, r5
   84aac:	10a4      	asrs	r4, r4, #2
   84aae:	d00a      	beq.n	84ac6 <__libc_fini_array+0x22>
   84ab0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   84ab4:	3b01      	subs	r3, #1
   84ab6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   84aba:	3c01      	subs	r4, #1
   84abc:	f855 3904 	ldr.w	r3, [r5], #-4
   84ac0:	4798      	blx	r3
   84ac2:	2c00      	cmp	r4, #0
   84ac4:	d1f9      	bne.n	84aba <__libc_fini_array+0x16>
   84ac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   84aca:	f002 bb2f 	b.w	8712c <_fini>
   84ace:	bf00      	nop
   84ad0:	0008713c 	.word	0x0008713c
   84ad4:	00087138 	.word	0x00087138

00084ad8 <__fputwc>:
   84ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   84adc:	b083      	sub	sp, #12
   84ade:	4607      	mov	r7, r0
   84ae0:	4688      	mov	r8, r1
   84ae2:	4614      	mov	r4, r2
   84ae4:	f000 fb2e 	bl	85144 <__locale_mb_cur_max>
   84ae8:	2801      	cmp	r0, #1
   84aea:	d033      	beq.n	84b54 <__fputwc+0x7c>
   84aec:	4642      	mov	r2, r8
   84aee:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   84af2:	a901      	add	r1, sp, #4
   84af4:	4638      	mov	r0, r7
   84af6:	f001 f977 	bl	85de8 <_wcrtomb_r>
   84afa:	1c42      	adds	r2, r0, #1
   84afc:	4606      	mov	r6, r0
   84afe:	d022      	beq.n	84b46 <__fputwc+0x6e>
   84b00:	b390      	cbz	r0, 84b68 <__fputwc+0x90>
   84b02:	f89d 1004 	ldrb.w	r1, [sp, #4]
   84b06:	2500      	movs	r5, #0
   84b08:	f10d 0904 	add.w	r9, sp, #4
   84b0c:	e008      	b.n	84b20 <__fputwc+0x48>
   84b0e:	6823      	ldr	r3, [r4, #0]
   84b10:	1c5a      	adds	r2, r3, #1
   84b12:	6022      	str	r2, [r4, #0]
   84b14:	7019      	strb	r1, [r3, #0]
   84b16:	3501      	adds	r5, #1
   84b18:	42b5      	cmp	r5, r6
   84b1a:	d225      	bcs.n	84b68 <__fputwc+0x90>
   84b1c:	f815 1009 	ldrb.w	r1, [r5, r9]
   84b20:	68a3      	ldr	r3, [r4, #8]
   84b22:	3b01      	subs	r3, #1
   84b24:	2b00      	cmp	r3, #0
   84b26:	60a3      	str	r3, [r4, #8]
   84b28:	daf1      	bge.n	84b0e <__fputwc+0x36>
   84b2a:	69a2      	ldr	r2, [r4, #24]
   84b2c:	4293      	cmp	r3, r2
   84b2e:	db01      	blt.n	84b34 <__fputwc+0x5c>
   84b30:	290a      	cmp	r1, #10
   84b32:	d1ec      	bne.n	84b0e <__fputwc+0x36>
   84b34:	4622      	mov	r2, r4
   84b36:	4638      	mov	r0, r7
   84b38:	f001 f8fe 	bl	85d38 <__swbuf_r>
   84b3c:	1c43      	adds	r3, r0, #1
   84b3e:	d1ea      	bne.n	84b16 <__fputwc+0x3e>
   84b40:	b003      	add	sp, #12
   84b42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84b46:	89a3      	ldrh	r3, [r4, #12]
   84b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84b4c:	81a3      	strh	r3, [r4, #12]
   84b4e:	b003      	add	sp, #12
   84b50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84b54:	f108 33ff 	add.w	r3, r8, #4294967295
   84b58:	2bfe      	cmp	r3, #254	; 0xfe
   84b5a:	d8c7      	bhi.n	84aec <__fputwc+0x14>
   84b5c:	fa5f f188 	uxtb.w	r1, r8
   84b60:	4606      	mov	r6, r0
   84b62:	f88d 1004 	strb.w	r1, [sp, #4]
   84b66:	e7ce      	b.n	84b06 <__fputwc+0x2e>
   84b68:	4640      	mov	r0, r8
   84b6a:	b003      	add	sp, #12
   84b6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00084b70 <_fputwc_r>:
   84b70:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   84b74:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   84b78:	d10a      	bne.n	84b90 <_fputwc_r+0x20>
   84b7a:	b410      	push	{r4}
   84b7c:	6e54      	ldr	r4, [r2, #100]	; 0x64
   84b7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   84b82:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   84b86:	6654      	str	r4, [r2, #100]	; 0x64
   84b88:	8193      	strh	r3, [r2, #12]
   84b8a:	bc10      	pop	{r4}
   84b8c:	f7ff bfa4 	b.w	84ad8 <__fputwc>
   84b90:	f7ff bfa2 	b.w	84ad8 <__fputwc>

00084b94 <_malloc_trim_r>:
   84b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84b96:	460c      	mov	r4, r1
   84b98:	4f23      	ldr	r7, [pc, #140]	; (84c28 <_malloc_trim_r+0x94>)
   84b9a:	4606      	mov	r6, r0
   84b9c:	f000 febc 	bl	85918 <__malloc_lock>
   84ba0:	68bb      	ldr	r3, [r7, #8]
   84ba2:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   84ba6:	685d      	ldr	r5, [r3, #4]
   84ba8:	310f      	adds	r1, #15
   84baa:	f025 0503 	bic.w	r5, r5, #3
   84bae:	4429      	add	r1, r5
   84bb0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   84bb4:	f021 010f 	bic.w	r1, r1, #15
   84bb8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   84bbc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   84bc0:	db07      	blt.n	84bd2 <_malloc_trim_r+0x3e>
   84bc2:	2100      	movs	r1, #0
   84bc4:	4630      	mov	r0, r6
   84bc6:	f001 f861 	bl	85c8c <_sbrk_r>
   84bca:	68bb      	ldr	r3, [r7, #8]
   84bcc:	442b      	add	r3, r5
   84bce:	4298      	cmp	r0, r3
   84bd0:	d004      	beq.n	84bdc <_malloc_trim_r+0x48>
   84bd2:	4630      	mov	r0, r6
   84bd4:	f000 fea2 	bl	8591c <__malloc_unlock>
   84bd8:	2000      	movs	r0, #0
   84bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84bdc:	4261      	negs	r1, r4
   84bde:	4630      	mov	r0, r6
   84be0:	f001 f854 	bl	85c8c <_sbrk_r>
   84be4:	3001      	adds	r0, #1
   84be6:	d00d      	beq.n	84c04 <_malloc_trim_r+0x70>
   84be8:	4b10      	ldr	r3, [pc, #64]	; (84c2c <_malloc_trim_r+0x98>)
   84bea:	68ba      	ldr	r2, [r7, #8]
   84bec:	6819      	ldr	r1, [r3, #0]
   84bee:	1b2d      	subs	r5, r5, r4
   84bf0:	f045 0501 	orr.w	r5, r5, #1
   84bf4:	4630      	mov	r0, r6
   84bf6:	1b09      	subs	r1, r1, r4
   84bf8:	6055      	str	r5, [r2, #4]
   84bfa:	6019      	str	r1, [r3, #0]
   84bfc:	f000 fe8e 	bl	8591c <__malloc_unlock>
   84c00:	2001      	movs	r0, #1
   84c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84c04:	2100      	movs	r1, #0
   84c06:	4630      	mov	r0, r6
   84c08:	f001 f840 	bl	85c8c <_sbrk_r>
   84c0c:	68ba      	ldr	r2, [r7, #8]
   84c0e:	1a83      	subs	r3, r0, r2
   84c10:	2b0f      	cmp	r3, #15
   84c12:	ddde      	ble.n	84bd2 <_malloc_trim_r+0x3e>
   84c14:	4c06      	ldr	r4, [pc, #24]	; (84c30 <_malloc_trim_r+0x9c>)
   84c16:	4905      	ldr	r1, [pc, #20]	; (84c2c <_malloc_trim_r+0x98>)
   84c18:	6824      	ldr	r4, [r4, #0]
   84c1a:	f043 0301 	orr.w	r3, r3, #1
   84c1e:	1b00      	subs	r0, r0, r4
   84c20:	6053      	str	r3, [r2, #4]
   84c22:	6008      	str	r0, [r1, #0]
   84c24:	e7d5      	b.n	84bd2 <_malloc_trim_r+0x3e>
   84c26:	bf00      	nop
   84c28:	200706ec 	.word	0x200706ec
   84c2c:	2007ada4 	.word	0x2007ada4
   84c30:	20070af4 	.word	0x20070af4

00084c34 <_free_r>:
   84c34:	2900      	cmp	r1, #0
   84c36:	d044      	beq.n	84cc2 <_free_r+0x8e>
   84c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84c3c:	460d      	mov	r5, r1
   84c3e:	4680      	mov	r8, r0
   84c40:	f000 fe6a 	bl	85918 <__malloc_lock>
   84c44:	f855 7c04 	ldr.w	r7, [r5, #-4]
   84c48:	4969      	ldr	r1, [pc, #420]	; (84df0 <_free_r+0x1bc>)
   84c4a:	f1a5 0408 	sub.w	r4, r5, #8
   84c4e:	f027 0301 	bic.w	r3, r7, #1
   84c52:	18e2      	adds	r2, r4, r3
   84c54:	688e      	ldr	r6, [r1, #8]
   84c56:	6850      	ldr	r0, [r2, #4]
   84c58:	42b2      	cmp	r2, r6
   84c5a:	f020 0003 	bic.w	r0, r0, #3
   84c5e:	d05e      	beq.n	84d1e <_free_r+0xea>
   84c60:	07fe      	lsls	r6, r7, #31
   84c62:	6050      	str	r0, [r2, #4]
   84c64:	d40b      	bmi.n	84c7e <_free_r+0x4a>
   84c66:	f855 7c08 	ldr.w	r7, [r5, #-8]
   84c6a:	f101 0e08 	add.w	lr, r1, #8
   84c6e:	1be4      	subs	r4, r4, r7
   84c70:	68a5      	ldr	r5, [r4, #8]
   84c72:	443b      	add	r3, r7
   84c74:	4575      	cmp	r5, lr
   84c76:	d06d      	beq.n	84d54 <_free_r+0x120>
   84c78:	68e7      	ldr	r7, [r4, #12]
   84c7a:	60ef      	str	r7, [r5, #12]
   84c7c:	60bd      	str	r5, [r7, #8]
   84c7e:	1815      	adds	r5, r2, r0
   84c80:	686d      	ldr	r5, [r5, #4]
   84c82:	07ed      	lsls	r5, r5, #31
   84c84:	d53e      	bpl.n	84d04 <_free_r+0xd0>
   84c86:	f043 0201 	orr.w	r2, r3, #1
   84c8a:	6062      	str	r2, [r4, #4]
   84c8c:	50e3      	str	r3, [r4, r3]
   84c8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   84c92:	d217      	bcs.n	84cc4 <_free_r+0x90>
   84c94:	2201      	movs	r2, #1
   84c96:	08db      	lsrs	r3, r3, #3
   84c98:	1098      	asrs	r0, r3, #2
   84c9a:	684d      	ldr	r5, [r1, #4]
   84c9c:	4413      	add	r3, r2
   84c9e:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   84ca2:	4082      	lsls	r2, r0
   84ca4:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   84ca8:	432a      	orrs	r2, r5
   84caa:	3808      	subs	r0, #8
   84cac:	60e0      	str	r0, [r4, #12]
   84cae:	60a7      	str	r7, [r4, #8]
   84cb0:	604a      	str	r2, [r1, #4]
   84cb2:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   84cb6:	60fc      	str	r4, [r7, #12]
   84cb8:	4640      	mov	r0, r8
   84cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84cbe:	f000 be2d 	b.w	8591c <__malloc_unlock>
   84cc2:	4770      	bx	lr
   84cc4:	0a5a      	lsrs	r2, r3, #9
   84cc6:	2a04      	cmp	r2, #4
   84cc8:	d852      	bhi.n	84d70 <_free_r+0x13c>
   84cca:	099a      	lsrs	r2, r3, #6
   84ccc:	f102 0739 	add.w	r7, r2, #57	; 0x39
   84cd0:	00ff      	lsls	r7, r7, #3
   84cd2:	f102 0538 	add.w	r5, r2, #56	; 0x38
   84cd6:	19c8      	adds	r0, r1, r7
   84cd8:	59ca      	ldr	r2, [r1, r7]
   84cda:	3808      	subs	r0, #8
   84cdc:	4290      	cmp	r0, r2
   84cde:	d04f      	beq.n	84d80 <_free_r+0x14c>
   84ce0:	6851      	ldr	r1, [r2, #4]
   84ce2:	f021 0103 	bic.w	r1, r1, #3
   84ce6:	428b      	cmp	r3, r1
   84ce8:	d232      	bcs.n	84d50 <_free_r+0x11c>
   84cea:	6892      	ldr	r2, [r2, #8]
   84cec:	4290      	cmp	r0, r2
   84cee:	d1f7      	bne.n	84ce0 <_free_r+0xac>
   84cf0:	68c3      	ldr	r3, [r0, #12]
   84cf2:	60a0      	str	r0, [r4, #8]
   84cf4:	60e3      	str	r3, [r4, #12]
   84cf6:	609c      	str	r4, [r3, #8]
   84cf8:	60c4      	str	r4, [r0, #12]
   84cfa:	4640      	mov	r0, r8
   84cfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84d00:	f000 be0c 	b.w	8591c <__malloc_unlock>
   84d04:	6895      	ldr	r5, [r2, #8]
   84d06:	4f3b      	ldr	r7, [pc, #236]	; (84df4 <_free_r+0x1c0>)
   84d08:	4403      	add	r3, r0
   84d0a:	42bd      	cmp	r5, r7
   84d0c:	d040      	beq.n	84d90 <_free_r+0x15c>
   84d0e:	68d0      	ldr	r0, [r2, #12]
   84d10:	f043 0201 	orr.w	r2, r3, #1
   84d14:	60e8      	str	r0, [r5, #12]
   84d16:	6085      	str	r5, [r0, #8]
   84d18:	6062      	str	r2, [r4, #4]
   84d1a:	50e3      	str	r3, [r4, r3]
   84d1c:	e7b7      	b.n	84c8e <_free_r+0x5a>
   84d1e:	07ff      	lsls	r7, r7, #31
   84d20:	4403      	add	r3, r0
   84d22:	d407      	bmi.n	84d34 <_free_r+0x100>
   84d24:	f855 5c08 	ldr.w	r5, [r5, #-8]
   84d28:	1b64      	subs	r4, r4, r5
   84d2a:	68e2      	ldr	r2, [r4, #12]
   84d2c:	68a0      	ldr	r0, [r4, #8]
   84d2e:	442b      	add	r3, r5
   84d30:	60c2      	str	r2, [r0, #12]
   84d32:	6090      	str	r0, [r2, #8]
   84d34:	4a30      	ldr	r2, [pc, #192]	; (84df8 <_free_r+0x1c4>)
   84d36:	f043 0001 	orr.w	r0, r3, #1
   84d3a:	6812      	ldr	r2, [r2, #0]
   84d3c:	6060      	str	r0, [r4, #4]
   84d3e:	4293      	cmp	r3, r2
   84d40:	608c      	str	r4, [r1, #8]
   84d42:	d3b9      	bcc.n	84cb8 <_free_r+0x84>
   84d44:	4b2d      	ldr	r3, [pc, #180]	; (84dfc <_free_r+0x1c8>)
   84d46:	4640      	mov	r0, r8
   84d48:	6819      	ldr	r1, [r3, #0]
   84d4a:	f7ff ff23 	bl	84b94 <_malloc_trim_r>
   84d4e:	e7b3      	b.n	84cb8 <_free_r+0x84>
   84d50:	4610      	mov	r0, r2
   84d52:	e7cd      	b.n	84cf0 <_free_r+0xbc>
   84d54:	1811      	adds	r1, r2, r0
   84d56:	6849      	ldr	r1, [r1, #4]
   84d58:	07c9      	lsls	r1, r1, #31
   84d5a:	d444      	bmi.n	84de6 <_free_r+0x1b2>
   84d5c:	6891      	ldr	r1, [r2, #8]
   84d5e:	4403      	add	r3, r0
   84d60:	68d2      	ldr	r2, [r2, #12]
   84d62:	f043 0001 	orr.w	r0, r3, #1
   84d66:	60ca      	str	r2, [r1, #12]
   84d68:	6091      	str	r1, [r2, #8]
   84d6a:	6060      	str	r0, [r4, #4]
   84d6c:	50e3      	str	r3, [r4, r3]
   84d6e:	e7a3      	b.n	84cb8 <_free_r+0x84>
   84d70:	2a14      	cmp	r2, #20
   84d72:	d816      	bhi.n	84da2 <_free_r+0x16e>
   84d74:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   84d78:	00ff      	lsls	r7, r7, #3
   84d7a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   84d7e:	e7aa      	b.n	84cd6 <_free_r+0xa2>
   84d80:	2301      	movs	r3, #1
   84d82:	10aa      	asrs	r2, r5, #2
   84d84:	684d      	ldr	r5, [r1, #4]
   84d86:	4093      	lsls	r3, r2
   84d88:	432b      	orrs	r3, r5
   84d8a:	604b      	str	r3, [r1, #4]
   84d8c:	4603      	mov	r3, r0
   84d8e:	e7b0      	b.n	84cf2 <_free_r+0xbe>
   84d90:	f043 0201 	orr.w	r2, r3, #1
   84d94:	614c      	str	r4, [r1, #20]
   84d96:	610c      	str	r4, [r1, #16]
   84d98:	60e5      	str	r5, [r4, #12]
   84d9a:	60a5      	str	r5, [r4, #8]
   84d9c:	6062      	str	r2, [r4, #4]
   84d9e:	50e3      	str	r3, [r4, r3]
   84da0:	e78a      	b.n	84cb8 <_free_r+0x84>
   84da2:	2a54      	cmp	r2, #84	; 0x54
   84da4:	d806      	bhi.n	84db4 <_free_r+0x180>
   84da6:	0b1a      	lsrs	r2, r3, #12
   84da8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   84dac:	00ff      	lsls	r7, r7, #3
   84dae:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   84db2:	e790      	b.n	84cd6 <_free_r+0xa2>
   84db4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   84db8:	d806      	bhi.n	84dc8 <_free_r+0x194>
   84dba:	0bda      	lsrs	r2, r3, #15
   84dbc:	f102 0778 	add.w	r7, r2, #120	; 0x78
   84dc0:	00ff      	lsls	r7, r7, #3
   84dc2:	f102 0577 	add.w	r5, r2, #119	; 0x77
   84dc6:	e786      	b.n	84cd6 <_free_r+0xa2>
   84dc8:	f240 5054 	movw	r0, #1364	; 0x554
   84dcc:	4282      	cmp	r2, r0
   84dce:	d806      	bhi.n	84dde <_free_r+0x1aa>
   84dd0:	0c9a      	lsrs	r2, r3, #18
   84dd2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   84dd6:	00ff      	lsls	r7, r7, #3
   84dd8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   84ddc:	e77b      	b.n	84cd6 <_free_r+0xa2>
   84dde:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   84de2:	257e      	movs	r5, #126	; 0x7e
   84de4:	e777      	b.n	84cd6 <_free_r+0xa2>
   84de6:	f043 0101 	orr.w	r1, r3, #1
   84dea:	6061      	str	r1, [r4, #4]
   84dec:	6013      	str	r3, [r2, #0]
   84dee:	e763      	b.n	84cb8 <_free_r+0x84>
   84df0:	200706ec 	.word	0x200706ec
   84df4:	200706f4 	.word	0x200706f4
   84df8:	20070af8 	.word	0x20070af8
   84dfc:	2007add4 	.word	0x2007add4

00084e00 <__sfvwrite_r>:
   84e00:	6893      	ldr	r3, [r2, #8]
   84e02:	2b00      	cmp	r3, #0
   84e04:	d071      	beq.n	84eea <__sfvwrite_r+0xea>
   84e06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84e0a:	898b      	ldrh	r3, [r1, #12]
   84e0c:	b083      	sub	sp, #12
   84e0e:	460c      	mov	r4, r1
   84e10:	0719      	lsls	r1, r3, #28
   84e12:	9000      	str	r0, [sp, #0]
   84e14:	4616      	mov	r6, r2
   84e16:	d525      	bpl.n	84e64 <__sfvwrite_r+0x64>
   84e18:	6922      	ldr	r2, [r4, #16]
   84e1a:	b31a      	cbz	r2, 84e64 <__sfvwrite_r+0x64>
   84e1c:	f013 0002 	ands.w	r0, r3, #2
   84e20:	6835      	ldr	r5, [r6, #0]
   84e22:	d02b      	beq.n	84e7c <__sfvwrite_r+0x7c>
   84e24:	f04f 0900 	mov.w	r9, #0
   84e28:	46b0      	mov	r8, r6
   84e2a:	464f      	mov	r7, r9
   84e2c:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 850f0 <__sfvwrite_r+0x2f0>
   84e30:	2f00      	cmp	r7, #0
   84e32:	d055      	beq.n	84ee0 <__sfvwrite_r+0xe0>
   84e34:	4557      	cmp	r7, sl
   84e36:	463b      	mov	r3, r7
   84e38:	464a      	mov	r2, r9
   84e3a:	bf28      	it	cs
   84e3c:	4653      	movcs	r3, sl
   84e3e:	69e1      	ldr	r1, [r4, #28]
   84e40:	9800      	ldr	r0, [sp, #0]
   84e42:	6a66      	ldr	r6, [r4, #36]	; 0x24
   84e44:	47b0      	blx	r6
   84e46:	2800      	cmp	r0, #0
   84e48:	dd56      	ble.n	84ef8 <__sfvwrite_r+0xf8>
   84e4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   84e4e:	4481      	add	r9, r0
   84e50:	1a1b      	subs	r3, r3, r0
   84e52:	1a3f      	subs	r7, r7, r0
   84e54:	f8c8 3008 	str.w	r3, [r8, #8]
   84e58:	2b00      	cmp	r3, #0
   84e5a:	d1e9      	bne.n	84e30 <__sfvwrite_r+0x30>
   84e5c:	2000      	movs	r0, #0
   84e5e:	b003      	add	sp, #12
   84e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84e64:	4621      	mov	r1, r4
   84e66:	9800      	ldr	r0, [sp, #0]
   84e68:	f7ff fc6e 	bl	84748 <__swsetup_r>
   84e6c:	2800      	cmp	r0, #0
   84e6e:	f040 8135 	bne.w	850dc <__sfvwrite_r+0x2dc>
   84e72:	89a3      	ldrh	r3, [r4, #12]
   84e74:	6835      	ldr	r5, [r6, #0]
   84e76:	f013 0002 	ands.w	r0, r3, #2
   84e7a:	d1d3      	bne.n	84e24 <__sfvwrite_r+0x24>
   84e7c:	f013 0901 	ands.w	r9, r3, #1
   84e80:	d144      	bne.n	84f0c <__sfvwrite_r+0x10c>
   84e82:	464f      	mov	r7, r9
   84e84:	9601      	str	r6, [sp, #4]
   84e86:	b337      	cbz	r7, 84ed6 <__sfvwrite_r+0xd6>
   84e88:	059a      	lsls	r2, r3, #22
   84e8a:	f8d4 8008 	ldr.w	r8, [r4, #8]
   84e8e:	f140 8085 	bpl.w	84f9c <__sfvwrite_r+0x19c>
   84e92:	4547      	cmp	r7, r8
   84e94:	46c3      	mov	fp, r8
   84e96:	f0c0 80ad 	bcc.w	84ff4 <__sfvwrite_r+0x1f4>
   84e9a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   84e9e:	f040 80ae 	bne.w	84ffe <__sfvwrite_r+0x1fe>
   84ea2:	46ba      	mov	sl, r7
   84ea4:	6820      	ldr	r0, [r4, #0]
   84ea6:	465a      	mov	r2, fp
   84ea8:	4649      	mov	r1, r9
   84eaa:	f000 fcd1 	bl	85850 <memmove>
   84eae:	68a2      	ldr	r2, [r4, #8]
   84eb0:	6823      	ldr	r3, [r4, #0]
   84eb2:	eba2 0208 	sub.w	r2, r2, r8
   84eb6:	445b      	add	r3, fp
   84eb8:	60a2      	str	r2, [r4, #8]
   84eba:	6023      	str	r3, [r4, #0]
   84ebc:	9a01      	ldr	r2, [sp, #4]
   84ebe:	44d1      	add	r9, sl
   84ec0:	6893      	ldr	r3, [r2, #8]
   84ec2:	eba7 070a 	sub.w	r7, r7, sl
   84ec6:	eba3 030a 	sub.w	r3, r3, sl
   84eca:	6093      	str	r3, [r2, #8]
   84ecc:	2b00      	cmp	r3, #0
   84ece:	d0c5      	beq.n	84e5c <__sfvwrite_r+0x5c>
   84ed0:	89a3      	ldrh	r3, [r4, #12]
   84ed2:	2f00      	cmp	r7, #0
   84ed4:	d1d8      	bne.n	84e88 <__sfvwrite_r+0x88>
   84ed6:	f8d5 9000 	ldr.w	r9, [r5]
   84eda:	686f      	ldr	r7, [r5, #4]
   84edc:	3508      	adds	r5, #8
   84ede:	e7d2      	b.n	84e86 <__sfvwrite_r+0x86>
   84ee0:	f8d5 9000 	ldr.w	r9, [r5]
   84ee4:	686f      	ldr	r7, [r5, #4]
   84ee6:	3508      	adds	r5, #8
   84ee8:	e7a2      	b.n	84e30 <__sfvwrite_r+0x30>
   84eea:	2000      	movs	r0, #0
   84eec:	4770      	bx	lr
   84eee:	4621      	mov	r1, r4
   84ef0:	9800      	ldr	r0, [sp, #0]
   84ef2:	f7ff fd39 	bl	84968 <_fflush_r>
   84ef6:	b378      	cbz	r0, 84f58 <__sfvwrite_r+0x158>
   84ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84efc:	f04f 30ff 	mov.w	r0, #4294967295
   84f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84f04:	81a3      	strh	r3, [r4, #12]
   84f06:	b003      	add	sp, #12
   84f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84f0c:	4681      	mov	r9, r0
   84f0e:	4633      	mov	r3, r6
   84f10:	464e      	mov	r6, r9
   84f12:	46a8      	mov	r8, r5
   84f14:	469a      	mov	sl, r3
   84f16:	464d      	mov	r5, r9
   84f18:	b356      	cbz	r6, 84f70 <__sfvwrite_r+0x170>
   84f1a:	2800      	cmp	r0, #0
   84f1c:	d032      	beq.n	84f84 <__sfvwrite_r+0x184>
   84f1e:	45b1      	cmp	r9, r6
   84f20:	46cb      	mov	fp, r9
   84f22:	bf28      	it	cs
   84f24:	46b3      	movcs	fp, r6
   84f26:	6820      	ldr	r0, [r4, #0]
   84f28:	6923      	ldr	r3, [r4, #16]
   84f2a:	465f      	mov	r7, fp
   84f2c:	4298      	cmp	r0, r3
   84f2e:	6962      	ldr	r2, [r4, #20]
   84f30:	d904      	bls.n	84f3c <__sfvwrite_r+0x13c>
   84f32:	68a3      	ldr	r3, [r4, #8]
   84f34:	4413      	add	r3, r2
   84f36:	459b      	cmp	fp, r3
   84f38:	f300 80a8 	bgt.w	8508c <__sfvwrite_r+0x28c>
   84f3c:	4593      	cmp	fp, r2
   84f3e:	db4d      	blt.n	84fdc <__sfvwrite_r+0x1dc>
   84f40:	4613      	mov	r3, r2
   84f42:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84f44:	462a      	mov	r2, r5
   84f46:	69e1      	ldr	r1, [r4, #28]
   84f48:	9800      	ldr	r0, [sp, #0]
   84f4a:	47b8      	blx	r7
   84f4c:	1e07      	subs	r7, r0, #0
   84f4e:	ddd3      	ble.n	84ef8 <__sfvwrite_r+0xf8>
   84f50:	ebb9 0907 	subs.w	r9, r9, r7
   84f54:	d0cb      	beq.n	84eee <__sfvwrite_r+0xee>
   84f56:	2001      	movs	r0, #1
   84f58:	f8da 3008 	ldr.w	r3, [sl, #8]
   84f5c:	443d      	add	r5, r7
   84f5e:	1bdb      	subs	r3, r3, r7
   84f60:	1bf6      	subs	r6, r6, r7
   84f62:	f8ca 3008 	str.w	r3, [sl, #8]
   84f66:	2b00      	cmp	r3, #0
   84f68:	f43f af78 	beq.w	84e5c <__sfvwrite_r+0x5c>
   84f6c:	2e00      	cmp	r6, #0
   84f6e:	d1d4      	bne.n	84f1a <__sfvwrite_r+0x11a>
   84f70:	f108 0308 	add.w	r3, r8, #8
   84f74:	f853 6c04 	ldr.w	r6, [r3, #-4]
   84f78:	4698      	mov	r8, r3
   84f7a:	f853 5c08 	ldr.w	r5, [r3, #-8]
   84f7e:	3308      	adds	r3, #8
   84f80:	2e00      	cmp	r6, #0
   84f82:	d0f7      	beq.n	84f74 <__sfvwrite_r+0x174>
   84f84:	4632      	mov	r2, r6
   84f86:	210a      	movs	r1, #10
   84f88:	4628      	mov	r0, r5
   84f8a:	f000 fc1b 	bl	857c4 <memchr>
   84f8e:	2800      	cmp	r0, #0
   84f90:	f000 80a1 	beq.w	850d6 <__sfvwrite_r+0x2d6>
   84f94:	3001      	adds	r0, #1
   84f96:	eba0 0905 	sub.w	r9, r0, r5
   84f9a:	e7c0      	b.n	84f1e <__sfvwrite_r+0x11e>
   84f9c:	6820      	ldr	r0, [r4, #0]
   84f9e:	6923      	ldr	r3, [r4, #16]
   84fa0:	4298      	cmp	r0, r3
   84fa2:	d802      	bhi.n	84faa <__sfvwrite_r+0x1aa>
   84fa4:	6963      	ldr	r3, [r4, #20]
   84fa6:	429f      	cmp	r7, r3
   84fa8:	d25d      	bcs.n	85066 <__sfvwrite_r+0x266>
   84faa:	45b8      	cmp	r8, r7
   84fac:	bf28      	it	cs
   84fae:	46b8      	movcs	r8, r7
   84fb0:	4649      	mov	r1, r9
   84fb2:	4642      	mov	r2, r8
   84fb4:	f000 fc4c 	bl	85850 <memmove>
   84fb8:	68a3      	ldr	r3, [r4, #8]
   84fba:	6822      	ldr	r2, [r4, #0]
   84fbc:	eba3 0308 	sub.w	r3, r3, r8
   84fc0:	4442      	add	r2, r8
   84fc2:	60a3      	str	r3, [r4, #8]
   84fc4:	6022      	str	r2, [r4, #0]
   84fc6:	b10b      	cbz	r3, 84fcc <__sfvwrite_r+0x1cc>
   84fc8:	46c2      	mov	sl, r8
   84fca:	e777      	b.n	84ebc <__sfvwrite_r+0xbc>
   84fcc:	4621      	mov	r1, r4
   84fce:	9800      	ldr	r0, [sp, #0]
   84fd0:	f7ff fcca 	bl	84968 <_fflush_r>
   84fd4:	2800      	cmp	r0, #0
   84fd6:	d18f      	bne.n	84ef8 <__sfvwrite_r+0xf8>
   84fd8:	46c2      	mov	sl, r8
   84fda:	e76f      	b.n	84ebc <__sfvwrite_r+0xbc>
   84fdc:	465a      	mov	r2, fp
   84fde:	4629      	mov	r1, r5
   84fe0:	f000 fc36 	bl	85850 <memmove>
   84fe4:	68a2      	ldr	r2, [r4, #8]
   84fe6:	6823      	ldr	r3, [r4, #0]
   84fe8:	eba2 020b 	sub.w	r2, r2, fp
   84fec:	445b      	add	r3, fp
   84fee:	60a2      	str	r2, [r4, #8]
   84ff0:	6023      	str	r3, [r4, #0]
   84ff2:	e7ad      	b.n	84f50 <__sfvwrite_r+0x150>
   84ff4:	46b8      	mov	r8, r7
   84ff6:	46ba      	mov	sl, r7
   84ff8:	46bb      	mov	fp, r7
   84ffa:	6820      	ldr	r0, [r4, #0]
   84ffc:	e753      	b.n	84ea6 <__sfvwrite_r+0xa6>
   84ffe:	6962      	ldr	r2, [r4, #20]
   85000:	6820      	ldr	r0, [r4, #0]
   85002:	6921      	ldr	r1, [r4, #16]
   85004:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   85008:	eba0 0a01 	sub.w	sl, r0, r1
   8500c:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   85010:	f10a 0001 	add.w	r0, sl, #1
   85014:	ea4f 0868 	mov.w	r8, r8, asr #1
   85018:	4438      	add	r0, r7
   8501a:	4540      	cmp	r0, r8
   8501c:	4642      	mov	r2, r8
   8501e:	bf84      	itt	hi
   85020:	4680      	movhi	r8, r0
   85022:	4642      	movhi	r2, r8
   85024:	055b      	lsls	r3, r3, #21
   85026:	d544      	bpl.n	850b2 <__sfvwrite_r+0x2b2>
   85028:	4611      	mov	r1, r2
   8502a:	9800      	ldr	r0, [sp, #0]
   8502c:	f000 f912 	bl	85254 <_malloc_r>
   85030:	4683      	mov	fp, r0
   85032:	2800      	cmp	r0, #0
   85034:	d055      	beq.n	850e2 <__sfvwrite_r+0x2e2>
   85036:	4652      	mov	r2, sl
   85038:	6921      	ldr	r1, [r4, #16]
   8503a:	f7fe fb43 	bl	836c4 <memcpy>
   8503e:	89a3      	ldrh	r3, [r4, #12]
   85040:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   85044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   85048:	81a3      	strh	r3, [r4, #12]
   8504a:	eb0b 000a 	add.w	r0, fp, sl
   8504e:	eba8 030a 	sub.w	r3, r8, sl
   85052:	f8c4 b010 	str.w	fp, [r4, #16]
   85056:	f8c4 8014 	str.w	r8, [r4, #20]
   8505a:	6020      	str	r0, [r4, #0]
   8505c:	60a3      	str	r3, [r4, #8]
   8505e:	46b8      	mov	r8, r7
   85060:	46ba      	mov	sl, r7
   85062:	46bb      	mov	fp, r7
   85064:	e71f      	b.n	84ea6 <__sfvwrite_r+0xa6>
   85066:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   8506a:	42ba      	cmp	r2, r7
   8506c:	bf28      	it	cs
   8506e:	463a      	movcs	r2, r7
   85070:	fb92 f2f3 	sdiv	r2, r2, r3
   85074:	69e1      	ldr	r1, [r4, #28]
   85076:	fb03 f302 	mul.w	r3, r3, r2
   8507a:	9800      	ldr	r0, [sp, #0]
   8507c:	464a      	mov	r2, r9
   8507e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   85080:	47b0      	blx	r6
   85082:	f1b0 0a00 	subs.w	sl, r0, #0
   85086:	f73f af19 	bgt.w	84ebc <__sfvwrite_r+0xbc>
   8508a:	e735      	b.n	84ef8 <__sfvwrite_r+0xf8>
   8508c:	461a      	mov	r2, r3
   8508e:	4629      	mov	r1, r5
   85090:	9301      	str	r3, [sp, #4]
   85092:	f000 fbdd 	bl	85850 <memmove>
   85096:	6822      	ldr	r2, [r4, #0]
   85098:	9b01      	ldr	r3, [sp, #4]
   8509a:	4621      	mov	r1, r4
   8509c:	441a      	add	r2, r3
   8509e:	6022      	str	r2, [r4, #0]
   850a0:	9800      	ldr	r0, [sp, #0]
   850a2:	f7ff fc61 	bl	84968 <_fflush_r>
   850a6:	9b01      	ldr	r3, [sp, #4]
   850a8:	2800      	cmp	r0, #0
   850aa:	f47f af25 	bne.w	84ef8 <__sfvwrite_r+0xf8>
   850ae:	461f      	mov	r7, r3
   850b0:	e74e      	b.n	84f50 <__sfvwrite_r+0x150>
   850b2:	9800      	ldr	r0, [sp, #0]
   850b4:	f000 fc34 	bl	85920 <_realloc_r>
   850b8:	4683      	mov	fp, r0
   850ba:	2800      	cmp	r0, #0
   850bc:	d1c5      	bne.n	8504a <__sfvwrite_r+0x24a>
   850be:	9d00      	ldr	r5, [sp, #0]
   850c0:	6921      	ldr	r1, [r4, #16]
   850c2:	4628      	mov	r0, r5
   850c4:	f7ff fdb6 	bl	84c34 <_free_r>
   850c8:	220c      	movs	r2, #12
   850ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   850ce:	602a      	str	r2, [r5, #0]
   850d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   850d4:	e712      	b.n	84efc <__sfvwrite_r+0xfc>
   850d6:	f106 0901 	add.w	r9, r6, #1
   850da:	e720      	b.n	84f1e <__sfvwrite_r+0x11e>
   850dc:	f04f 30ff 	mov.w	r0, #4294967295
   850e0:	e6bd      	b.n	84e5e <__sfvwrite_r+0x5e>
   850e2:	220c      	movs	r2, #12
   850e4:	9900      	ldr	r1, [sp, #0]
   850e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   850ea:	600a      	str	r2, [r1, #0]
   850ec:	e706      	b.n	84efc <__sfvwrite_r+0xfc>
   850ee:	bf00      	nop
   850f0:	7ffffc00 	.word	0x7ffffc00

000850f4 <_fwalk_reent>:
   850f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   850f8:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   850fc:	d01e      	beq.n	8513c <_fwalk_reent+0x48>
   850fe:	4688      	mov	r8, r1
   85100:	4607      	mov	r7, r0
   85102:	f04f 0900 	mov.w	r9, #0
   85106:	6875      	ldr	r5, [r6, #4]
   85108:	68b4      	ldr	r4, [r6, #8]
   8510a:	3d01      	subs	r5, #1
   8510c:	d410      	bmi.n	85130 <_fwalk_reent+0x3c>
   8510e:	89a3      	ldrh	r3, [r4, #12]
   85110:	3d01      	subs	r5, #1
   85112:	2b01      	cmp	r3, #1
   85114:	d908      	bls.n	85128 <_fwalk_reent+0x34>
   85116:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8511a:	3301      	adds	r3, #1
   8511c:	d004      	beq.n	85128 <_fwalk_reent+0x34>
   8511e:	4621      	mov	r1, r4
   85120:	4638      	mov	r0, r7
   85122:	47c0      	blx	r8
   85124:	ea49 0900 	orr.w	r9, r9, r0
   85128:	1c6b      	adds	r3, r5, #1
   8512a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8512e:	d1ee      	bne.n	8510e <_fwalk_reent+0x1a>
   85130:	6836      	ldr	r6, [r6, #0]
   85132:	2e00      	cmp	r6, #0
   85134:	d1e7      	bne.n	85106 <_fwalk_reent+0x12>
   85136:	4648      	mov	r0, r9
   85138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8513c:	46b1      	mov	r9, r6
   8513e:	4648      	mov	r0, r9
   85140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00085144 <__locale_mb_cur_max>:
   85144:	4b04      	ldr	r3, [pc, #16]	; (85158 <__locale_mb_cur_max+0x14>)
   85146:	4a05      	ldr	r2, [pc, #20]	; (8515c <__locale_mb_cur_max+0x18>)
   85148:	681b      	ldr	r3, [r3, #0]
   8514a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   8514c:	2b00      	cmp	r3, #0
   8514e:	bf08      	it	eq
   85150:	4613      	moveq	r3, r2
   85152:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   85156:	4770      	bx	lr
   85158:	20070150 	.word	0x20070150
   8515c:	20070580 	.word	0x20070580

00085160 <__swhatbuf_r>:
   85160:	b570      	push	{r4, r5, r6, lr}
   85162:	460c      	mov	r4, r1
   85164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85168:	b090      	sub	sp, #64	; 0x40
   8516a:	2900      	cmp	r1, #0
   8516c:	4615      	mov	r5, r2
   8516e:	461e      	mov	r6, r3
   85170:	db14      	blt.n	8519c <__swhatbuf_r+0x3c>
   85172:	aa01      	add	r2, sp, #4
   85174:	f000 ff2c 	bl	85fd0 <_fstat_r>
   85178:	2800      	cmp	r0, #0
   8517a:	db0f      	blt.n	8519c <__swhatbuf_r+0x3c>
   8517c:	9a02      	ldr	r2, [sp, #8]
   8517e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   85182:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   85186:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8518a:	fab2 f282 	clz	r2, r2
   8518e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   85192:	0952      	lsrs	r2, r2, #5
   85194:	6032      	str	r2, [r6, #0]
   85196:	602b      	str	r3, [r5, #0]
   85198:	b010      	add	sp, #64	; 0x40
   8519a:	bd70      	pop	{r4, r5, r6, pc}
   8519c:	2300      	movs	r3, #0
   8519e:	89a2      	ldrh	r2, [r4, #12]
   851a0:	6033      	str	r3, [r6, #0]
   851a2:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   851a6:	d004      	beq.n	851b2 <__swhatbuf_r+0x52>
   851a8:	2240      	movs	r2, #64	; 0x40
   851aa:	4618      	mov	r0, r3
   851ac:	602a      	str	r2, [r5, #0]
   851ae:	b010      	add	sp, #64	; 0x40
   851b0:	bd70      	pop	{r4, r5, r6, pc}
   851b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   851b6:	602b      	str	r3, [r5, #0]
   851b8:	b010      	add	sp, #64	; 0x40
   851ba:	bd70      	pop	{r4, r5, r6, pc}

000851bc <__smakebuf_r>:
   851bc:	898a      	ldrh	r2, [r1, #12]
   851be:	460b      	mov	r3, r1
   851c0:	0792      	lsls	r2, r2, #30
   851c2:	d506      	bpl.n	851d2 <__smakebuf_r+0x16>
   851c4:	2101      	movs	r1, #1
   851c6:	f103 0243 	add.w	r2, r3, #67	; 0x43
   851ca:	6159      	str	r1, [r3, #20]
   851cc:	601a      	str	r2, [r3, #0]
   851ce:	611a      	str	r2, [r3, #16]
   851d0:	4770      	bx	lr
   851d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   851d4:	b083      	sub	sp, #12
   851d6:	ab01      	add	r3, sp, #4
   851d8:	466a      	mov	r2, sp
   851da:	460c      	mov	r4, r1
   851dc:	4605      	mov	r5, r0
   851de:	f7ff ffbf 	bl	85160 <__swhatbuf_r>
   851e2:	9900      	ldr	r1, [sp, #0]
   851e4:	4606      	mov	r6, r0
   851e6:	4628      	mov	r0, r5
   851e8:	f000 f834 	bl	85254 <_malloc_r>
   851ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   851f0:	b1d0      	cbz	r0, 85228 <__smakebuf_r+0x6c>
   851f2:	e89d 0006 	ldmia.w	sp, {r1, r2}
   851f6:	4f12      	ldr	r7, [pc, #72]	; (85240 <__smakebuf_r+0x84>)
   851f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   851fc:	63ef      	str	r7, [r5, #60]	; 0x3c
   851fe:	81a3      	strh	r3, [r4, #12]
   85200:	6020      	str	r0, [r4, #0]
   85202:	6120      	str	r0, [r4, #16]
   85204:	6161      	str	r1, [r4, #20]
   85206:	b91a      	cbnz	r2, 85210 <__smakebuf_r+0x54>
   85208:	4333      	orrs	r3, r6
   8520a:	81a3      	strh	r3, [r4, #12]
   8520c:	b003      	add	sp, #12
   8520e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85210:	4628      	mov	r0, r5
   85212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85216:	f000 feef 	bl	85ff8 <_isatty_r>
   8521a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8521e:	2800      	cmp	r0, #0
   85220:	d0f2      	beq.n	85208 <__smakebuf_r+0x4c>
   85222:	f043 0301 	orr.w	r3, r3, #1
   85226:	e7ef      	b.n	85208 <__smakebuf_r+0x4c>
   85228:	059a      	lsls	r2, r3, #22
   8522a:	d4ef      	bmi.n	8520c <__smakebuf_r+0x50>
   8522c:	2101      	movs	r1, #1
   8522e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   85232:	f043 0302 	orr.w	r3, r3, #2
   85236:	81a3      	strh	r3, [r4, #12]
   85238:	6161      	str	r1, [r4, #20]
   8523a:	6022      	str	r2, [r4, #0]
   8523c:	6122      	str	r2, [r4, #16]
   8523e:	e7e5      	b.n	8520c <__smakebuf_r+0x50>
   85240:	00084995 	.word	0x00084995

00085244 <malloc>:
   85244:	4b02      	ldr	r3, [pc, #8]	; (85250 <malloc+0xc>)
   85246:	4601      	mov	r1, r0
   85248:	6818      	ldr	r0, [r3, #0]
   8524a:	f000 b803 	b.w	85254 <_malloc_r>
   8524e:	bf00      	nop
   85250:	20070150 	.word	0x20070150

00085254 <_malloc_r>:
   85254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85258:	f101 060b 	add.w	r6, r1, #11
   8525c:	2e16      	cmp	r6, #22
   8525e:	b083      	sub	sp, #12
   85260:	4605      	mov	r5, r0
   85262:	f240 809e 	bls.w	853a2 <_malloc_r+0x14e>
   85266:	f036 0607 	bics.w	r6, r6, #7
   8526a:	f100 80bd 	bmi.w	853e8 <_malloc_r+0x194>
   8526e:	42b1      	cmp	r1, r6
   85270:	f200 80ba 	bhi.w	853e8 <_malloc_r+0x194>
   85274:	f000 fb50 	bl	85918 <__malloc_lock>
   85278:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   8527c:	f0c0 8285 	bcc.w	8578a <_malloc_r+0x536>
   85280:	0a73      	lsrs	r3, r6, #9
   85282:	f000 80b8 	beq.w	853f6 <_malloc_r+0x1a2>
   85286:	2b04      	cmp	r3, #4
   85288:	f200 816c 	bhi.w	85564 <_malloc_r+0x310>
   8528c:	09b3      	lsrs	r3, r6, #6
   8528e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   85292:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   85296:	00c1      	lsls	r1, r0, #3
   85298:	4fb8      	ldr	r7, [pc, #736]	; (8557c <_malloc_r+0x328>)
   8529a:	4439      	add	r1, r7
   8529c:	684c      	ldr	r4, [r1, #4]
   8529e:	3908      	subs	r1, #8
   852a0:	42a1      	cmp	r1, r4
   852a2:	d106      	bne.n	852b2 <_malloc_r+0x5e>
   852a4:	e00c      	b.n	852c0 <_malloc_r+0x6c>
   852a6:	2a00      	cmp	r2, #0
   852a8:	f280 80ab 	bge.w	85402 <_malloc_r+0x1ae>
   852ac:	68e4      	ldr	r4, [r4, #12]
   852ae:	42a1      	cmp	r1, r4
   852b0:	d006      	beq.n	852c0 <_malloc_r+0x6c>
   852b2:	6863      	ldr	r3, [r4, #4]
   852b4:	f023 0303 	bic.w	r3, r3, #3
   852b8:	1b9a      	subs	r2, r3, r6
   852ba:	2a0f      	cmp	r2, #15
   852bc:	ddf3      	ble.n	852a6 <_malloc_r+0x52>
   852be:	4670      	mov	r0, lr
   852c0:	693c      	ldr	r4, [r7, #16]
   852c2:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 85590 <_malloc_r+0x33c>
   852c6:	4574      	cmp	r4, lr
   852c8:	f000 819e 	beq.w	85608 <_malloc_r+0x3b4>
   852cc:	6863      	ldr	r3, [r4, #4]
   852ce:	f023 0303 	bic.w	r3, r3, #3
   852d2:	1b9a      	subs	r2, r3, r6
   852d4:	2a0f      	cmp	r2, #15
   852d6:	f300 8183 	bgt.w	855e0 <_malloc_r+0x38c>
   852da:	2a00      	cmp	r2, #0
   852dc:	f8c7 e014 	str.w	lr, [r7, #20]
   852e0:	f8c7 e010 	str.w	lr, [r7, #16]
   852e4:	f280 8091 	bge.w	8540a <_malloc_r+0x1b6>
   852e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   852ec:	f080 8154 	bcs.w	85598 <_malloc_r+0x344>
   852f0:	2201      	movs	r2, #1
   852f2:	08db      	lsrs	r3, r3, #3
   852f4:	6879      	ldr	r1, [r7, #4]
   852f6:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   852fa:	4413      	add	r3, r2
   852fc:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   85300:	fa02 f20c 	lsl.w	r2, r2, ip
   85304:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   85308:	430a      	orrs	r2, r1
   8530a:	f1ac 0108 	sub.w	r1, ip, #8
   8530e:	60e1      	str	r1, [r4, #12]
   85310:	f8c4 8008 	str.w	r8, [r4, #8]
   85314:	607a      	str	r2, [r7, #4]
   85316:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   8531a:	f8c8 400c 	str.w	r4, [r8, #12]
   8531e:	2401      	movs	r4, #1
   85320:	1083      	asrs	r3, r0, #2
   85322:	409c      	lsls	r4, r3
   85324:	4294      	cmp	r4, r2
   85326:	d87d      	bhi.n	85424 <_malloc_r+0x1d0>
   85328:	4214      	tst	r4, r2
   8532a:	d106      	bne.n	8533a <_malloc_r+0xe6>
   8532c:	f020 0003 	bic.w	r0, r0, #3
   85330:	0064      	lsls	r4, r4, #1
   85332:	4214      	tst	r4, r2
   85334:	f100 0004 	add.w	r0, r0, #4
   85338:	d0fa      	beq.n	85330 <_malloc_r+0xdc>
   8533a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   8533e:	46cc      	mov	ip, r9
   85340:	4680      	mov	r8, r0
   85342:	f8dc 300c 	ldr.w	r3, [ip, #12]
   85346:	459c      	cmp	ip, r3
   85348:	d107      	bne.n	8535a <_malloc_r+0x106>
   8534a:	e15f      	b.n	8560c <_malloc_r+0x3b8>
   8534c:	2a00      	cmp	r2, #0
   8534e:	f280 816d 	bge.w	8562c <_malloc_r+0x3d8>
   85352:	68db      	ldr	r3, [r3, #12]
   85354:	459c      	cmp	ip, r3
   85356:	f000 8159 	beq.w	8560c <_malloc_r+0x3b8>
   8535a:	6859      	ldr	r1, [r3, #4]
   8535c:	f021 0103 	bic.w	r1, r1, #3
   85360:	1b8a      	subs	r2, r1, r6
   85362:	2a0f      	cmp	r2, #15
   85364:	ddf2      	ble.n	8534c <_malloc_r+0xf8>
   85366:	68dc      	ldr	r4, [r3, #12]
   85368:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8536c:	f046 0801 	orr.w	r8, r6, #1
   85370:	4628      	mov	r0, r5
   85372:	441e      	add	r6, r3
   85374:	f042 0501 	orr.w	r5, r2, #1
   85378:	f8c3 8004 	str.w	r8, [r3, #4]
   8537c:	f8cc 400c 	str.w	r4, [ip, #12]
   85380:	f8c4 c008 	str.w	ip, [r4, #8]
   85384:	617e      	str	r6, [r7, #20]
   85386:	613e      	str	r6, [r7, #16]
   85388:	f8c6 e00c 	str.w	lr, [r6, #12]
   8538c:	f8c6 e008 	str.w	lr, [r6, #8]
   85390:	6075      	str	r5, [r6, #4]
   85392:	505a      	str	r2, [r3, r1]
   85394:	9300      	str	r3, [sp, #0]
   85396:	f000 fac1 	bl	8591c <__malloc_unlock>
   8539a:	9b00      	ldr	r3, [sp, #0]
   8539c:	f103 0408 	add.w	r4, r3, #8
   853a0:	e01e      	b.n	853e0 <_malloc_r+0x18c>
   853a2:	2910      	cmp	r1, #16
   853a4:	d820      	bhi.n	853e8 <_malloc_r+0x194>
   853a6:	f000 fab7 	bl	85918 <__malloc_lock>
   853aa:	2610      	movs	r6, #16
   853ac:	2318      	movs	r3, #24
   853ae:	2002      	movs	r0, #2
   853b0:	4f72      	ldr	r7, [pc, #456]	; (8557c <_malloc_r+0x328>)
   853b2:	443b      	add	r3, r7
   853b4:	685c      	ldr	r4, [r3, #4]
   853b6:	f1a3 0208 	sub.w	r2, r3, #8
   853ba:	4294      	cmp	r4, r2
   853bc:	f000 812f 	beq.w	8561e <_malloc_r+0x3ca>
   853c0:	6863      	ldr	r3, [r4, #4]
   853c2:	68e1      	ldr	r1, [r4, #12]
   853c4:	f023 0303 	bic.w	r3, r3, #3
   853c8:	4423      	add	r3, r4
   853ca:	685a      	ldr	r2, [r3, #4]
   853cc:	68a6      	ldr	r6, [r4, #8]
   853ce:	f042 0201 	orr.w	r2, r2, #1
   853d2:	60f1      	str	r1, [r6, #12]
   853d4:	4628      	mov	r0, r5
   853d6:	608e      	str	r6, [r1, #8]
   853d8:	605a      	str	r2, [r3, #4]
   853da:	f000 fa9f 	bl	8591c <__malloc_unlock>
   853de:	3408      	adds	r4, #8
   853e0:	4620      	mov	r0, r4
   853e2:	b003      	add	sp, #12
   853e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   853e8:	2400      	movs	r4, #0
   853ea:	230c      	movs	r3, #12
   853ec:	4620      	mov	r0, r4
   853ee:	602b      	str	r3, [r5, #0]
   853f0:	b003      	add	sp, #12
   853f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   853f6:	2040      	movs	r0, #64	; 0x40
   853f8:	f44f 7100 	mov.w	r1, #512	; 0x200
   853fc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   85400:	e74a      	b.n	85298 <_malloc_r+0x44>
   85402:	4423      	add	r3, r4
   85404:	685a      	ldr	r2, [r3, #4]
   85406:	68e1      	ldr	r1, [r4, #12]
   85408:	e7e0      	b.n	853cc <_malloc_r+0x178>
   8540a:	4423      	add	r3, r4
   8540c:	685a      	ldr	r2, [r3, #4]
   8540e:	4628      	mov	r0, r5
   85410:	f042 0201 	orr.w	r2, r2, #1
   85414:	605a      	str	r2, [r3, #4]
   85416:	3408      	adds	r4, #8
   85418:	f000 fa80 	bl	8591c <__malloc_unlock>
   8541c:	4620      	mov	r0, r4
   8541e:	b003      	add	sp, #12
   85420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85424:	68bc      	ldr	r4, [r7, #8]
   85426:	6863      	ldr	r3, [r4, #4]
   85428:	f023 0803 	bic.w	r8, r3, #3
   8542c:	45b0      	cmp	r8, r6
   8542e:	d304      	bcc.n	8543a <_malloc_r+0x1e6>
   85430:	eba8 0306 	sub.w	r3, r8, r6
   85434:	2b0f      	cmp	r3, #15
   85436:	f300 8085 	bgt.w	85544 <_malloc_r+0x2f0>
   8543a:	f8df 9158 	ldr.w	r9, [pc, #344]	; 85594 <_malloc_r+0x340>
   8543e:	4b50      	ldr	r3, [pc, #320]	; (85580 <_malloc_r+0x32c>)
   85440:	f8d9 2000 	ldr.w	r2, [r9]
   85444:	681b      	ldr	r3, [r3, #0]
   85446:	3201      	adds	r2, #1
   85448:	4433      	add	r3, r6
   8544a:	eb04 0a08 	add.w	sl, r4, r8
   8544e:	f000 8154 	beq.w	856fa <_malloc_r+0x4a6>
   85452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   85456:	330f      	adds	r3, #15
   85458:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   8545c:	f02b 0b0f 	bic.w	fp, fp, #15
   85460:	4659      	mov	r1, fp
   85462:	4628      	mov	r0, r5
   85464:	f000 fc12 	bl	85c8c <_sbrk_r>
   85468:	1c41      	adds	r1, r0, #1
   8546a:	4602      	mov	r2, r0
   8546c:	f000 80fb 	beq.w	85666 <_malloc_r+0x412>
   85470:	4582      	cmp	sl, r0
   85472:	f200 80f6 	bhi.w	85662 <_malloc_r+0x40e>
   85476:	4b43      	ldr	r3, [pc, #268]	; (85584 <_malloc_r+0x330>)
   85478:	6819      	ldr	r1, [r3, #0]
   8547a:	4459      	add	r1, fp
   8547c:	6019      	str	r1, [r3, #0]
   8547e:	f000 814c 	beq.w	8571a <_malloc_r+0x4c6>
   85482:	f8d9 0000 	ldr.w	r0, [r9]
   85486:	3001      	adds	r0, #1
   85488:	bf1b      	ittet	ne
   8548a:	eba2 0a0a 	subne.w	sl, r2, sl
   8548e:	4451      	addne	r1, sl
   85490:	f8c9 2000 	streq.w	r2, [r9]
   85494:	6019      	strne	r1, [r3, #0]
   85496:	f012 0107 	ands.w	r1, r2, #7
   8549a:	f000 8114 	beq.w	856c6 <_malloc_r+0x472>
   8549e:	f1c1 0008 	rsb	r0, r1, #8
   854a2:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   854a6:	4402      	add	r2, r0
   854a8:	3108      	adds	r1, #8
   854aa:	eb02 090b 	add.w	r9, r2, fp
   854ae:	f3c9 090b 	ubfx	r9, r9, #0, #12
   854b2:	eba1 0909 	sub.w	r9, r1, r9
   854b6:	4649      	mov	r1, r9
   854b8:	4628      	mov	r0, r5
   854ba:	9301      	str	r3, [sp, #4]
   854bc:	9200      	str	r2, [sp, #0]
   854be:	f000 fbe5 	bl	85c8c <_sbrk_r>
   854c2:	1c43      	adds	r3, r0, #1
   854c4:	e89d 000c 	ldmia.w	sp, {r2, r3}
   854c8:	f000 8142 	beq.w	85750 <_malloc_r+0x4fc>
   854cc:	1a80      	subs	r0, r0, r2
   854ce:	4448      	add	r0, r9
   854d0:	f040 0001 	orr.w	r0, r0, #1
   854d4:	6819      	ldr	r1, [r3, #0]
   854d6:	42bc      	cmp	r4, r7
   854d8:	4449      	add	r1, r9
   854da:	60ba      	str	r2, [r7, #8]
   854dc:	6019      	str	r1, [r3, #0]
   854de:	6050      	str	r0, [r2, #4]
   854e0:	d017      	beq.n	85512 <_malloc_r+0x2be>
   854e2:	f1b8 0f0f 	cmp.w	r8, #15
   854e6:	f240 80fa 	bls.w	856de <_malloc_r+0x48a>
   854ea:	f04f 0c05 	mov.w	ip, #5
   854ee:	6862      	ldr	r2, [r4, #4]
   854f0:	f1a8 000c 	sub.w	r0, r8, #12
   854f4:	f020 0007 	bic.w	r0, r0, #7
   854f8:	f002 0201 	and.w	r2, r2, #1
   854fc:	eb04 0e00 	add.w	lr, r4, r0
   85500:	4302      	orrs	r2, r0
   85502:	280f      	cmp	r0, #15
   85504:	6062      	str	r2, [r4, #4]
   85506:	f8ce c004 	str.w	ip, [lr, #4]
   8550a:	f8ce c008 	str.w	ip, [lr, #8]
   8550e:	f200 8116 	bhi.w	8573e <_malloc_r+0x4ea>
   85512:	4b1d      	ldr	r3, [pc, #116]	; (85588 <_malloc_r+0x334>)
   85514:	68bc      	ldr	r4, [r7, #8]
   85516:	681a      	ldr	r2, [r3, #0]
   85518:	4291      	cmp	r1, r2
   8551a:	bf88      	it	hi
   8551c:	6019      	strhi	r1, [r3, #0]
   8551e:	4b1b      	ldr	r3, [pc, #108]	; (8558c <_malloc_r+0x338>)
   85520:	681a      	ldr	r2, [r3, #0]
   85522:	4291      	cmp	r1, r2
   85524:	6862      	ldr	r2, [r4, #4]
   85526:	bf88      	it	hi
   85528:	6019      	strhi	r1, [r3, #0]
   8552a:	f022 0203 	bic.w	r2, r2, #3
   8552e:	4296      	cmp	r6, r2
   85530:	eba2 0306 	sub.w	r3, r2, r6
   85534:	d801      	bhi.n	8553a <_malloc_r+0x2e6>
   85536:	2b0f      	cmp	r3, #15
   85538:	dc04      	bgt.n	85544 <_malloc_r+0x2f0>
   8553a:	4628      	mov	r0, r5
   8553c:	f000 f9ee 	bl	8591c <__malloc_unlock>
   85540:	2400      	movs	r4, #0
   85542:	e74d      	b.n	853e0 <_malloc_r+0x18c>
   85544:	f046 0201 	orr.w	r2, r6, #1
   85548:	f043 0301 	orr.w	r3, r3, #1
   8554c:	4426      	add	r6, r4
   8554e:	6062      	str	r2, [r4, #4]
   85550:	4628      	mov	r0, r5
   85552:	60be      	str	r6, [r7, #8]
   85554:	3408      	adds	r4, #8
   85556:	6073      	str	r3, [r6, #4]
   85558:	f000 f9e0 	bl	8591c <__malloc_unlock>
   8555c:	4620      	mov	r0, r4
   8555e:	b003      	add	sp, #12
   85560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85564:	2b14      	cmp	r3, #20
   85566:	d970      	bls.n	8564a <_malloc_r+0x3f6>
   85568:	2b54      	cmp	r3, #84	; 0x54
   8556a:	f200 80a2 	bhi.w	856b2 <_malloc_r+0x45e>
   8556e:	0b33      	lsrs	r3, r6, #12
   85570:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   85574:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   85578:	00c1      	lsls	r1, r0, #3
   8557a:	e68d      	b.n	85298 <_malloc_r+0x44>
   8557c:	200706ec 	.word	0x200706ec
   85580:	2007add4 	.word	0x2007add4
   85584:	2007ada4 	.word	0x2007ada4
   85588:	2007adcc 	.word	0x2007adcc
   8558c:	2007add0 	.word	0x2007add0
   85590:	200706f4 	.word	0x200706f4
   85594:	20070af4 	.word	0x20070af4
   85598:	0a5a      	lsrs	r2, r3, #9
   8559a:	2a04      	cmp	r2, #4
   8559c:	d95b      	bls.n	85656 <_malloc_r+0x402>
   8559e:	2a14      	cmp	r2, #20
   855a0:	f200 80ae 	bhi.w	85700 <_malloc_r+0x4ac>
   855a4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   855a8:	00c9      	lsls	r1, r1, #3
   855aa:	325b      	adds	r2, #91	; 0x5b
   855ac:	eb07 0c01 	add.w	ip, r7, r1
   855b0:	5879      	ldr	r1, [r7, r1]
   855b2:	f1ac 0c08 	sub.w	ip, ip, #8
   855b6:	458c      	cmp	ip, r1
   855b8:	f000 8088 	beq.w	856cc <_malloc_r+0x478>
   855bc:	684a      	ldr	r2, [r1, #4]
   855be:	f022 0203 	bic.w	r2, r2, #3
   855c2:	4293      	cmp	r3, r2
   855c4:	d273      	bcs.n	856ae <_malloc_r+0x45a>
   855c6:	6889      	ldr	r1, [r1, #8]
   855c8:	458c      	cmp	ip, r1
   855ca:	d1f7      	bne.n	855bc <_malloc_r+0x368>
   855cc:	f8dc 300c 	ldr.w	r3, [ip, #12]
   855d0:	687a      	ldr	r2, [r7, #4]
   855d2:	60e3      	str	r3, [r4, #12]
   855d4:	f8c4 c008 	str.w	ip, [r4, #8]
   855d8:	609c      	str	r4, [r3, #8]
   855da:	f8cc 400c 	str.w	r4, [ip, #12]
   855de:	e69e      	b.n	8531e <_malloc_r+0xca>
   855e0:	f046 0c01 	orr.w	ip, r6, #1
   855e4:	f042 0101 	orr.w	r1, r2, #1
   855e8:	4426      	add	r6, r4
   855ea:	f8c4 c004 	str.w	ip, [r4, #4]
   855ee:	4628      	mov	r0, r5
   855f0:	617e      	str	r6, [r7, #20]
   855f2:	613e      	str	r6, [r7, #16]
   855f4:	f8c6 e00c 	str.w	lr, [r6, #12]
   855f8:	f8c6 e008 	str.w	lr, [r6, #8]
   855fc:	6071      	str	r1, [r6, #4]
   855fe:	50e2      	str	r2, [r4, r3]
   85600:	f000 f98c 	bl	8591c <__malloc_unlock>
   85604:	3408      	adds	r4, #8
   85606:	e6eb      	b.n	853e0 <_malloc_r+0x18c>
   85608:	687a      	ldr	r2, [r7, #4]
   8560a:	e688      	b.n	8531e <_malloc_r+0xca>
   8560c:	f108 0801 	add.w	r8, r8, #1
   85610:	f018 0f03 	tst.w	r8, #3
   85614:	f10c 0c08 	add.w	ip, ip, #8
   85618:	f47f ae93 	bne.w	85342 <_malloc_r+0xee>
   8561c:	e02d      	b.n	8567a <_malloc_r+0x426>
   8561e:	68dc      	ldr	r4, [r3, #12]
   85620:	42a3      	cmp	r3, r4
   85622:	bf08      	it	eq
   85624:	3002      	addeq	r0, #2
   85626:	f43f ae4b 	beq.w	852c0 <_malloc_r+0x6c>
   8562a:	e6c9      	b.n	853c0 <_malloc_r+0x16c>
   8562c:	461c      	mov	r4, r3
   8562e:	4419      	add	r1, r3
   85630:	684a      	ldr	r2, [r1, #4]
   85632:	68db      	ldr	r3, [r3, #12]
   85634:	f854 6f08 	ldr.w	r6, [r4, #8]!
   85638:	f042 0201 	orr.w	r2, r2, #1
   8563c:	604a      	str	r2, [r1, #4]
   8563e:	4628      	mov	r0, r5
   85640:	60f3      	str	r3, [r6, #12]
   85642:	609e      	str	r6, [r3, #8]
   85644:	f000 f96a 	bl	8591c <__malloc_unlock>
   85648:	e6ca      	b.n	853e0 <_malloc_r+0x18c>
   8564a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8564e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   85652:	00c1      	lsls	r1, r0, #3
   85654:	e620      	b.n	85298 <_malloc_r+0x44>
   85656:	099a      	lsrs	r2, r3, #6
   85658:	f102 0139 	add.w	r1, r2, #57	; 0x39
   8565c:	00c9      	lsls	r1, r1, #3
   8565e:	3238      	adds	r2, #56	; 0x38
   85660:	e7a4      	b.n	855ac <_malloc_r+0x358>
   85662:	42bc      	cmp	r4, r7
   85664:	d054      	beq.n	85710 <_malloc_r+0x4bc>
   85666:	68bc      	ldr	r4, [r7, #8]
   85668:	6862      	ldr	r2, [r4, #4]
   8566a:	f022 0203 	bic.w	r2, r2, #3
   8566e:	e75e      	b.n	8552e <_malloc_r+0x2da>
   85670:	f859 3908 	ldr.w	r3, [r9], #-8
   85674:	4599      	cmp	r9, r3
   85676:	f040 8086 	bne.w	85786 <_malloc_r+0x532>
   8567a:	f010 0f03 	tst.w	r0, #3
   8567e:	f100 30ff 	add.w	r0, r0, #4294967295
   85682:	d1f5      	bne.n	85670 <_malloc_r+0x41c>
   85684:	687b      	ldr	r3, [r7, #4]
   85686:	ea23 0304 	bic.w	r3, r3, r4
   8568a:	607b      	str	r3, [r7, #4]
   8568c:	0064      	lsls	r4, r4, #1
   8568e:	429c      	cmp	r4, r3
   85690:	f63f aec8 	bhi.w	85424 <_malloc_r+0x1d0>
   85694:	2c00      	cmp	r4, #0
   85696:	f43f aec5 	beq.w	85424 <_malloc_r+0x1d0>
   8569a:	421c      	tst	r4, r3
   8569c:	4640      	mov	r0, r8
   8569e:	f47f ae4c 	bne.w	8533a <_malloc_r+0xe6>
   856a2:	0064      	lsls	r4, r4, #1
   856a4:	421c      	tst	r4, r3
   856a6:	f100 0004 	add.w	r0, r0, #4
   856aa:	d0fa      	beq.n	856a2 <_malloc_r+0x44e>
   856ac:	e645      	b.n	8533a <_malloc_r+0xe6>
   856ae:	468c      	mov	ip, r1
   856b0:	e78c      	b.n	855cc <_malloc_r+0x378>
   856b2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   856b6:	d815      	bhi.n	856e4 <_malloc_r+0x490>
   856b8:	0bf3      	lsrs	r3, r6, #15
   856ba:	f103 0078 	add.w	r0, r3, #120	; 0x78
   856be:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   856c2:	00c1      	lsls	r1, r0, #3
   856c4:	e5e8      	b.n	85298 <_malloc_r+0x44>
   856c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   856ca:	e6ee      	b.n	854aa <_malloc_r+0x256>
   856cc:	2101      	movs	r1, #1
   856ce:	687b      	ldr	r3, [r7, #4]
   856d0:	1092      	asrs	r2, r2, #2
   856d2:	fa01 f202 	lsl.w	r2, r1, r2
   856d6:	431a      	orrs	r2, r3
   856d8:	607a      	str	r2, [r7, #4]
   856da:	4663      	mov	r3, ip
   856dc:	e779      	b.n	855d2 <_malloc_r+0x37e>
   856de:	2301      	movs	r3, #1
   856e0:	6053      	str	r3, [r2, #4]
   856e2:	e72a      	b.n	8553a <_malloc_r+0x2e6>
   856e4:	f240 5254 	movw	r2, #1364	; 0x554
   856e8:	4293      	cmp	r3, r2
   856ea:	d822      	bhi.n	85732 <_malloc_r+0x4de>
   856ec:	0cb3      	lsrs	r3, r6, #18
   856ee:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   856f2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   856f6:	00c1      	lsls	r1, r0, #3
   856f8:	e5ce      	b.n	85298 <_malloc_r+0x44>
   856fa:	f103 0b10 	add.w	fp, r3, #16
   856fe:	e6af      	b.n	85460 <_malloc_r+0x20c>
   85700:	2a54      	cmp	r2, #84	; 0x54
   85702:	d829      	bhi.n	85758 <_malloc_r+0x504>
   85704:	0b1a      	lsrs	r2, r3, #12
   85706:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   8570a:	00c9      	lsls	r1, r1, #3
   8570c:	326e      	adds	r2, #110	; 0x6e
   8570e:	e74d      	b.n	855ac <_malloc_r+0x358>
   85710:	4b20      	ldr	r3, [pc, #128]	; (85794 <_malloc_r+0x540>)
   85712:	6819      	ldr	r1, [r3, #0]
   85714:	4459      	add	r1, fp
   85716:	6019      	str	r1, [r3, #0]
   85718:	e6b3      	b.n	85482 <_malloc_r+0x22e>
   8571a:	f3ca 000b 	ubfx	r0, sl, #0, #12
   8571e:	2800      	cmp	r0, #0
   85720:	f47f aeaf 	bne.w	85482 <_malloc_r+0x22e>
   85724:	eb08 030b 	add.w	r3, r8, fp
   85728:	68ba      	ldr	r2, [r7, #8]
   8572a:	f043 0301 	orr.w	r3, r3, #1
   8572e:	6053      	str	r3, [r2, #4]
   85730:	e6ef      	b.n	85512 <_malloc_r+0x2be>
   85732:	207f      	movs	r0, #127	; 0x7f
   85734:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   85738:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   8573c:	e5ac      	b.n	85298 <_malloc_r+0x44>
   8573e:	f104 0108 	add.w	r1, r4, #8
   85742:	4628      	mov	r0, r5
   85744:	9300      	str	r3, [sp, #0]
   85746:	f7ff fa75 	bl	84c34 <_free_r>
   8574a:	9b00      	ldr	r3, [sp, #0]
   8574c:	6819      	ldr	r1, [r3, #0]
   8574e:	e6e0      	b.n	85512 <_malloc_r+0x2be>
   85750:	2001      	movs	r0, #1
   85752:	f04f 0900 	mov.w	r9, #0
   85756:	e6bd      	b.n	854d4 <_malloc_r+0x280>
   85758:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8575c:	d805      	bhi.n	8576a <_malloc_r+0x516>
   8575e:	0bda      	lsrs	r2, r3, #15
   85760:	f102 0178 	add.w	r1, r2, #120	; 0x78
   85764:	00c9      	lsls	r1, r1, #3
   85766:	3277      	adds	r2, #119	; 0x77
   85768:	e720      	b.n	855ac <_malloc_r+0x358>
   8576a:	f240 5154 	movw	r1, #1364	; 0x554
   8576e:	428a      	cmp	r2, r1
   85770:	d805      	bhi.n	8577e <_malloc_r+0x52a>
   85772:	0c9a      	lsrs	r2, r3, #18
   85774:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   85778:	00c9      	lsls	r1, r1, #3
   8577a:	327c      	adds	r2, #124	; 0x7c
   8577c:	e716      	b.n	855ac <_malloc_r+0x358>
   8577e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   85782:	227e      	movs	r2, #126	; 0x7e
   85784:	e712      	b.n	855ac <_malloc_r+0x358>
   85786:	687b      	ldr	r3, [r7, #4]
   85788:	e780      	b.n	8568c <_malloc_r+0x438>
   8578a:	08f0      	lsrs	r0, r6, #3
   8578c:	f106 0308 	add.w	r3, r6, #8
   85790:	e60e      	b.n	853b0 <_malloc_r+0x15c>
   85792:	bf00      	nop
   85794:	2007ada4 	.word	0x2007ada4

00085798 <__ascii_mbtowc>:
   85798:	b082      	sub	sp, #8
   8579a:	b149      	cbz	r1, 857b0 <__ascii_mbtowc+0x18>
   8579c:	b15a      	cbz	r2, 857b6 <__ascii_mbtowc+0x1e>
   8579e:	b16b      	cbz	r3, 857bc <__ascii_mbtowc+0x24>
   857a0:	7813      	ldrb	r3, [r2, #0]
   857a2:	600b      	str	r3, [r1, #0]
   857a4:	7812      	ldrb	r2, [r2, #0]
   857a6:	1c10      	adds	r0, r2, #0
   857a8:	bf18      	it	ne
   857aa:	2001      	movne	r0, #1
   857ac:	b002      	add	sp, #8
   857ae:	4770      	bx	lr
   857b0:	a901      	add	r1, sp, #4
   857b2:	2a00      	cmp	r2, #0
   857b4:	d1f3      	bne.n	8579e <__ascii_mbtowc+0x6>
   857b6:	4610      	mov	r0, r2
   857b8:	b002      	add	sp, #8
   857ba:	4770      	bx	lr
   857bc:	f06f 0001 	mvn.w	r0, #1
   857c0:	e7f4      	b.n	857ac <__ascii_mbtowc+0x14>
   857c2:	bf00      	nop

000857c4 <memchr>:
   857c4:	0783      	lsls	r3, r0, #30
   857c6:	b470      	push	{r4, r5, r6}
   857c8:	b2cd      	uxtb	r5, r1
   857ca:	d03d      	beq.n	85848 <memchr+0x84>
   857cc:	1e54      	subs	r4, r2, #1
   857ce:	b30a      	cbz	r2, 85814 <memchr+0x50>
   857d0:	7803      	ldrb	r3, [r0, #0]
   857d2:	42ab      	cmp	r3, r5
   857d4:	d01f      	beq.n	85816 <memchr+0x52>
   857d6:	1c43      	adds	r3, r0, #1
   857d8:	e005      	b.n	857e6 <memchr+0x22>
   857da:	f114 34ff 	adds.w	r4, r4, #4294967295
   857de:	d319      	bcc.n	85814 <memchr+0x50>
   857e0:	7802      	ldrb	r2, [r0, #0]
   857e2:	42aa      	cmp	r2, r5
   857e4:	d017      	beq.n	85816 <memchr+0x52>
   857e6:	f013 0f03 	tst.w	r3, #3
   857ea:	4618      	mov	r0, r3
   857ec:	f103 0301 	add.w	r3, r3, #1
   857f0:	d1f3      	bne.n	857da <memchr+0x16>
   857f2:	2c03      	cmp	r4, #3
   857f4:	d811      	bhi.n	8581a <memchr+0x56>
   857f6:	b34c      	cbz	r4, 8584c <memchr+0x88>
   857f8:	7803      	ldrb	r3, [r0, #0]
   857fa:	42ab      	cmp	r3, r5
   857fc:	d00b      	beq.n	85816 <memchr+0x52>
   857fe:	4404      	add	r4, r0
   85800:	1c43      	adds	r3, r0, #1
   85802:	e002      	b.n	8580a <memchr+0x46>
   85804:	7802      	ldrb	r2, [r0, #0]
   85806:	42aa      	cmp	r2, r5
   85808:	d005      	beq.n	85816 <memchr+0x52>
   8580a:	429c      	cmp	r4, r3
   8580c:	4618      	mov	r0, r3
   8580e:	f103 0301 	add.w	r3, r3, #1
   85812:	d1f7      	bne.n	85804 <memchr+0x40>
   85814:	2000      	movs	r0, #0
   85816:	bc70      	pop	{r4, r5, r6}
   85818:	4770      	bx	lr
   8581a:	0209      	lsls	r1, r1, #8
   8581c:	b289      	uxth	r1, r1
   8581e:	4329      	orrs	r1, r5
   85820:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   85824:	6803      	ldr	r3, [r0, #0]
   85826:	4606      	mov	r6, r0
   85828:	404b      	eors	r3, r1
   8582a:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   8582e:	ea22 0303 	bic.w	r3, r2, r3
   85832:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   85836:	f100 0004 	add.w	r0, r0, #4
   8583a:	d103      	bne.n	85844 <memchr+0x80>
   8583c:	3c04      	subs	r4, #4
   8583e:	2c03      	cmp	r4, #3
   85840:	d8f0      	bhi.n	85824 <memchr+0x60>
   85842:	e7d8      	b.n	857f6 <memchr+0x32>
   85844:	4630      	mov	r0, r6
   85846:	e7d7      	b.n	857f8 <memchr+0x34>
   85848:	4614      	mov	r4, r2
   8584a:	e7d2      	b.n	857f2 <memchr+0x2e>
   8584c:	4620      	mov	r0, r4
   8584e:	e7e2      	b.n	85816 <memchr+0x52>

00085850 <memmove>:
   85850:	4288      	cmp	r0, r1
   85852:	b5f0      	push	{r4, r5, r6, r7, lr}
   85854:	d90d      	bls.n	85872 <memmove+0x22>
   85856:	188b      	adds	r3, r1, r2
   85858:	4298      	cmp	r0, r3
   8585a:	d20a      	bcs.n	85872 <memmove+0x22>
   8585c:	1884      	adds	r4, r0, r2
   8585e:	2a00      	cmp	r2, #0
   85860:	d051      	beq.n	85906 <memmove+0xb6>
   85862:	4622      	mov	r2, r4
   85864:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   85868:	4299      	cmp	r1, r3
   8586a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8586e:	d1f9      	bne.n	85864 <memmove+0x14>
   85870:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85872:	2a0f      	cmp	r2, #15
   85874:	d948      	bls.n	85908 <memmove+0xb8>
   85876:	ea41 0300 	orr.w	r3, r1, r0
   8587a:	079b      	lsls	r3, r3, #30
   8587c:	d146      	bne.n	8590c <memmove+0xbc>
   8587e:	4615      	mov	r5, r2
   85880:	f100 0410 	add.w	r4, r0, #16
   85884:	f101 0310 	add.w	r3, r1, #16
   85888:	f853 6c10 	ldr.w	r6, [r3, #-16]
   8588c:	3d10      	subs	r5, #16
   8588e:	f844 6c10 	str.w	r6, [r4, #-16]
   85892:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   85896:	2d0f      	cmp	r5, #15
   85898:	f844 6c0c 	str.w	r6, [r4, #-12]
   8589c:	f853 6c08 	ldr.w	r6, [r3, #-8]
   858a0:	f104 0410 	add.w	r4, r4, #16
   858a4:	f844 6c18 	str.w	r6, [r4, #-24]
   858a8:	f853 6c04 	ldr.w	r6, [r3, #-4]
   858ac:	f103 0310 	add.w	r3, r3, #16
   858b0:	f844 6c14 	str.w	r6, [r4, #-20]
   858b4:	d8e8      	bhi.n	85888 <memmove+0x38>
   858b6:	f1a2 0310 	sub.w	r3, r2, #16
   858ba:	f023 030f 	bic.w	r3, r3, #15
   858be:	f002 0e0f 	and.w	lr, r2, #15
   858c2:	3310      	adds	r3, #16
   858c4:	f1be 0f03 	cmp.w	lr, #3
   858c8:	4419      	add	r1, r3
   858ca:	4403      	add	r3, r0
   858cc:	d921      	bls.n	85912 <memmove+0xc2>
   858ce:	460e      	mov	r6, r1
   858d0:	4674      	mov	r4, lr
   858d2:	1f1d      	subs	r5, r3, #4
   858d4:	f856 7b04 	ldr.w	r7, [r6], #4
   858d8:	3c04      	subs	r4, #4
   858da:	2c03      	cmp	r4, #3
   858dc:	f845 7f04 	str.w	r7, [r5, #4]!
   858e0:	d8f8      	bhi.n	858d4 <memmove+0x84>
   858e2:	f1ae 0404 	sub.w	r4, lr, #4
   858e6:	f024 0403 	bic.w	r4, r4, #3
   858ea:	3404      	adds	r4, #4
   858ec:	4421      	add	r1, r4
   858ee:	4423      	add	r3, r4
   858f0:	f002 0203 	and.w	r2, r2, #3
   858f4:	b162      	cbz	r2, 85910 <memmove+0xc0>
   858f6:	3b01      	subs	r3, #1
   858f8:	440a      	add	r2, r1
   858fa:	f811 4b01 	ldrb.w	r4, [r1], #1
   858fe:	428a      	cmp	r2, r1
   85900:	f803 4f01 	strb.w	r4, [r3, #1]!
   85904:	d1f9      	bne.n	858fa <memmove+0xaa>
   85906:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85908:	4603      	mov	r3, r0
   8590a:	e7f3      	b.n	858f4 <memmove+0xa4>
   8590c:	4603      	mov	r3, r0
   8590e:	e7f2      	b.n	858f6 <memmove+0xa6>
   85910:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85912:	4672      	mov	r2, lr
   85914:	e7ee      	b.n	858f4 <memmove+0xa4>
   85916:	bf00      	nop

00085918 <__malloc_lock>:
   85918:	4770      	bx	lr
   8591a:	bf00      	nop

0008591c <__malloc_unlock>:
   8591c:	4770      	bx	lr
   8591e:	bf00      	nop

00085920 <_realloc_r>:
   85920:	2900      	cmp	r1, #0
   85922:	f000 8094 	beq.w	85a4e <_realloc_r+0x12e>
   85926:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8592a:	460c      	mov	r4, r1
   8592c:	4615      	mov	r5, r2
   8592e:	b083      	sub	sp, #12
   85930:	4680      	mov	r8, r0
   85932:	f105 060b 	add.w	r6, r5, #11
   85936:	f7ff ffef 	bl	85918 <__malloc_lock>
   8593a:	f854 ec04 	ldr.w	lr, [r4, #-4]
   8593e:	2e16      	cmp	r6, #22
   85940:	f02e 0703 	bic.w	r7, lr, #3
   85944:	f1a4 0908 	sub.w	r9, r4, #8
   85948:	d83c      	bhi.n	859c4 <_realloc_r+0xa4>
   8594a:	2210      	movs	r2, #16
   8594c:	4616      	mov	r6, r2
   8594e:	42b5      	cmp	r5, r6
   85950:	d83d      	bhi.n	859ce <_realloc_r+0xae>
   85952:	4297      	cmp	r7, r2
   85954:	da43      	bge.n	859de <_realloc_r+0xbe>
   85956:	4bc6      	ldr	r3, [pc, #792]	; (85c70 <_realloc_r+0x350>)
   85958:	eb09 0007 	add.w	r0, r9, r7
   8595c:	6899      	ldr	r1, [r3, #8]
   8595e:	4288      	cmp	r0, r1
   85960:	f000 80c3 	beq.w	85aea <_realloc_r+0x1ca>
   85964:	6843      	ldr	r3, [r0, #4]
   85966:	f023 0101 	bic.w	r1, r3, #1
   8596a:	4401      	add	r1, r0
   8596c:	6849      	ldr	r1, [r1, #4]
   8596e:	07c9      	lsls	r1, r1, #31
   85970:	d54d      	bpl.n	85a0e <_realloc_r+0xee>
   85972:	f01e 0f01 	tst.w	lr, #1
   85976:	f000 809b 	beq.w	85ab0 <_realloc_r+0x190>
   8597a:	4629      	mov	r1, r5
   8597c:	4640      	mov	r0, r8
   8597e:	f7ff fc69 	bl	85254 <_malloc_r>
   85982:	4605      	mov	r5, r0
   85984:	2800      	cmp	r0, #0
   85986:	d03b      	beq.n	85a00 <_realloc_r+0xe0>
   85988:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8598c:	f1a0 0208 	sub.w	r2, r0, #8
   85990:	f023 0301 	bic.w	r3, r3, #1
   85994:	444b      	add	r3, r9
   85996:	429a      	cmp	r2, r3
   85998:	f000 812b 	beq.w	85bf2 <_realloc_r+0x2d2>
   8599c:	1f3a      	subs	r2, r7, #4
   8599e:	2a24      	cmp	r2, #36	; 0x24
   859a0:	f200 8118 	bhi.w	85bd4 <_realloc_r+0x2b4>
   859a4:	2a13      	cmp	r2, #19
   859a6:	f200 80eb 	bhi.w	85b80 <_realloc_r+0x260>
   859aa:	4603      	mov	r3, r0
   859ac:	4622      	mov	r2, r4
   859ae:	6811      	ldr	r1, [r2, #0]
   859b0:	6019      	str	r1, [r3, #0]
   859b2:	6851      	ldr	r1, [r2, #4]
   859b4:	6059      	str	r1, [r3, #4]
   859b6:	6892      	ldr	r2, [r2, #8]
   859b8:	609a      	str	r2, [r3, #8]
   859ba:	4621      	mov	r1, r4
   859bc:	4640      	mov	r0, r8
   859be:	f7ff f939 	bl	84c34 <_free_r>
   859c2:	e01d      	b.n	85a00 <_realloc_r+0xe0>
   859c4:	f026 0607 	bic.w	r6, r6, #7
   859c8:	2e00      	cmp	r6, #0
   859ca:	4632      	mov	r2, r6
   859cc:	dabf      	bge.n	8594e <_realloc_r+0x2e>
   859ce:	2500      	movs	r5, #0
   859d0:	230c      	movs	r3, #12
   859d2:	4628      	mov	r0, r5
   859d4:	f8c8 3000 	str.w	r3, [r8]
   859d8:	b003      	add	sp, #12
   859da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   859de:	4625      	mov	r5, r4
   859e0:	1bbb      	subs	r3, r7, r6
   859e2:	2b0f      	cmp	r3, #15
   859e4:	f8d9 2004 	ldr.w	r2, [r9, #4]
   859e8:	d81d      	bhi.n	85a26 <_realloc_r+0x106>
   859ea:	f002 0201 	and.w	r2, r2, #1
   859ee:	433a      	orrs	r2, r7
   859f0:	eb09 0107 	add.w	r1, r9, r7
   859f4:	f8c9 2004 	str.w	r2, [r9, #4]
   859f8:	684b      	ldr	r3, [r1, #4]
   859fa:	f043 0301 	orr.w	r3, r3, #1
   859fe:	604b      	str	r3, [r1, #4]
   85a00:	4640      	mov	r0, r8
   85a02:	f7ff ff8b 	bl	8591c <__malloc_unlock>
   85a06:	4628      	mov	r0, r5
   85a08:	b003      	add	sp, #12
   85a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85a0e:	f023 0303 	bic.w	r3, r3, #3
   85a12:	18f9      	adds	r1, r7, r3
   85a14:	4291      	cmp	r1, r2
   85a16:	db1d      	blt.n	85a54 <_realloc_r+0x134>
   85a18:	68c3      	ldr	r3, [r0, #12]
   85a1a:	6882      	ldr	r2, [r0, #8]
   85a1c:	4625      	mov	r5, r4
   85a1e:	60d3      	str	r3, [r2, #12]
   85a20:	460f      	mov	r7, r1
   85a22:	609a      	str	r2, [r3, #8]
   85a24:	e7dc      	b.n	859e0 <_realloc_r+0xc0>
   85a26:	f002 0201 	and.w	r2, r2, #1
   85a2a:	eb09 0106 	add.w	r1, r9, r6
   85a2e:	f043 0301 	orr.w	r3, r3, #1
   85a32:	4332      	orrs	r2, r6
   85a34:	f8c9 2004 	str.w	r2, [r9, #4]
   85a38:	444f      	add	r7, r9
   85a3a:	604b      	str	r3, [r1, #4]
   85a3c:	687b      	ldr	r3, [r7, #4]
   85a3e:	3108      	adds	r1, #8
   85a40:	f043 0301 	orr.w	r3, r3, #1
   85a44:	607b      	str	r3, [r7, #4]
   85a46:	4640      	mov	r0, r8
   85a48:	f7ff f8f4 	bl	84c34 <_free_r>
   85a4c:	e7d8      	b.n	85a00 <_realloc_r+0xe0>
   85a4e:	4611      	mov	r1, r2
   85a50:	f7ff bc00 	b.w	85254 <_malloc_r>
   85a54:	f01e 0f01 	tst.w	lr, #1
   85a58:	d18f      	bne.n	8597a <_realloc_r+0x5a>
   85a5a:	f854 1c08 	ldr.w	r1, [r4, #-8]
   85a5e:	eba9 0a01 	sub.w	sl, r9, r1
   85a62:	f8da 1004 	ldr.w	r1, [sl, #4]
   85a66:	f021 0103 	bic.w	r1, r1, #3
   85a6a:	440b      	add	r3, r1
   85a6c:	443b      	add	r3, r7
   85a6e:	4293      	cmp	r3, r2
   85a70:	db26      	blt.n	85ac0 <_realloc_r+0x1a0>
   85a72:	4655      	mov	r5, sl
   85a74:	68c1      	ldr	r1, [r0, #12]
   85a76:	6880      	ldr	r0, [r0, #8]
   85a78:	1f3a      	subs	r2, r7, #4
   85a7a:	60c1      	str	r1, [r0, #12]
   85a7c:	6088      	str	r0, [r1, #8]
   85a7e:	f855 0f08 	ldr.w	r0, [r5, #8]!
   85a82:	f8da 100c 	ldr.w	r1, [sl, #12]
   85a86:	2a24      	cmp	r2, #36	; 0x24
   85a88:	60c1      	str	r1, [r0, #12]
   85a8a:	6088      	str	r0, [r1, #8]
   85a8c:	d826      	bhi.n	85adc <_realloc_r+0x1bc>
   85a8e:	2a13      	cmp	r2, #19
   85a90:	f240 8081 	bls.w	85b96 <_realloc_r+0x276>
   85a94:	6821      	ldr	r1, [r4, #0]
   85a96:	2a1b      	cmp	r2, #27
   85a98:	f8ca 1008 	str.w	r1, [sl, #8]
   85a9c:	6861      	ldr	r1, [r4, #4]
   85a9e:	f8ca 100c 	str.w	r1, [sl, #12]
   85aa2:	f200 80ad 	bhi.w	85c00 <_realloc_r+0x2e0>
   85aa6:	f104 0008 	add.w	r0, r4, #8
   85aaa:	f10a 0210 	add.w	r2, sl, #16
   85aae:	e074      	b.n	85b9a <_realloc_r+0x27a>
   85ab0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   85ab4:	eba9 0a03 	sub.w	sl, r9, r3
   85ab8:	f8da 1004 	ldr.w	r1, [sl, #4]
   85abc:	f021 0103 	bic.w	r1, r1, #3
   85ac0:	187b      	adds	r3, r7, r1
   85ac2:	4293      	cmp	r3, r2
   85ac4:	f6ff af59 	blt.w	8597a <_realloc_r+0x5a>
   85ac8:	4655      	mov	r5, sl
   85aca:	f8da 100c 	ldr.w	r1, [sl, #12]
   85ace:	f855 0f08 	ldr.w	r0, [r5, #8]!
   85ad2:	1f3a      	subs	r2, r7, #4
   85ad4:	2a24      	cmp	r2, #36	; 0x24
   85ad6:	60c1      	str	r1, [r0, #12]
   85ad8:	6088      	str	r0, [r1, #8]
   85ada:	d9d8      	bls.n	85a8e <_realloc_r+0x16e>
   85adc:	4621      	mov	r1, r4
   85ade:	4628      	mov	r0, r5
   85ae0:	461f      	mov	r7, r3
   85ae2:	46d1      	mov	r9, sl
   85ae4:	f7ff feb4 	bl	85850 <memmove>
   85ae8:	e77a      	b.n	859e0 <_realloc_r+0xc0>
   85aea:	6841      	ldr	r1, [r0, #4]
   85aec:	f106 0010 	add.w	r0, r6, #16
   85af0:	f021 0b03 	bic.w	fp, r1, #3
   85af4:	44bb      	add	fp, r7
   85af6:	4583      	cmp	fp, r0
   85af8:	da58      	bge.n	85bac <_realloc_r+0x28c>
   85afa:	f01e 0f01 	tst.w	lr, #1
   85afe:	f47f af3c 	bne.w	8597a <_realloc_r+0x5a>
   85b02:	f854 1c08 	ldr.w	r1, [r4, #-8]
   85b06:	eba9 0a01 	sub.w	sl, r9, r1
   85b0a:	f8da 1004 	ldr.w	r1, [sl, #4]
   85b0e:	f021 0103 	bic.w	r1, r1, #3
   85b12:	448b      	add	fp, r1
   85b14:	4558      	cmp	r0, fp
   85b16:	dcd3      	bgt.n	85ac0 <_realloc_r+0x1a0>
   85b18:	4655      	mov	r5, sl
   85b1a:	f8da 100c 	ldr.w	r1, [sl, #12]
   85b1e:	f855 0f08 	ldr.w	r0, [r5, #8]!
   85b22:	1f3a      	subs	r2, r7, #4
   85b24:	2a24      	cmp	r2, #36	; 0x24
   85b26:	60c1      	str	r1, [r0, #12]
   85b28:	6088      	str	r0, [r1, #8]
   85b2a:	f200 808d 	bhi.w	85c48 <_realloc_r+0x328>
   85b2e:	2a13      	cmp	r2, #19
   85b30:	f240 8087 	bls.w	85c42 <_realloc_r+0x322>
   85b34:	6821      	ldr	r1, [r4, #0]
   85b36:	2a1b      	cmp	r2, #27
   85b38:	f8ca 1008 	str.w	r1, [sl, #8]
   85b3c:	6861      	ldr	r1, [r4, #4]
   85b3e:	f8ca 100c 	str.w	r1, [sl, #12]
   85b42:	f200 8088 	bhi.w	85c56 <_realloc_r+0x336>
   85b46:	f104 0108 	add.w	r1, r4, #8
   85b4a:	f10a 0210 	add.w	r2, sl, #16
   85b4e:	6808      	ldr	r0, [r1, #0]
   85b50:	6010      	str	r0, [r2, #0]
   85b52:	6848      	ldr	r0, [r1, #4]
   85b54:	6050      	str	r0, [r2, #4]
   85b56:	6889      	ldr	r1, [r1, #8]
   85b58:	6091      	str	r1, [r2, #8]
   85b5a:	ebab 0206 	sub.w	r2, fp, r6
   85b5e:	eb0a 0106 	add.w	r1, sl, r6
   85b62:	f042 0201 	orr.w	r2, r2, #1
   85b66:	6099      	str	r1, [r3, #8]
   85b68:	604a      	str	r2, [r1, #4]
   85b6a:	f8da 3004 	ldr.w	r3, [sl, #4]
   85b6e:	4640      	mov	r0, r8
   85b70:	f003 0301 	and.w	r3, r3, #1
   85b74:	431e      	orrs	r6, r3
   85b76:	f8ca 6004 	str.w	r6, [sl, #4]
   85b7a:	f7ff fecf 	bl	8591c <__malloc_unlock>
   85b7e:	e742      	b.n	85a06 <_realloc_r+0xe6>
   85b80:	6823      	ldr	r3, [r4, #0]
   85b82:	2a1b      	cmp	r2, #27
   85b84:	6003      	str	r3, [r0, #0]
   85b86:	6863      	ldr	r3, [r4, #4]
   85b88:	6043      	str	r3, [r0, #4]
   85b8a:	d827      	bhi.n	85bdc <_realloc_r+0x2bc>
   85b8c:	f100 0308 	add.w	r3, r0, #8
   85b90:	f104 0208 	add.w	r2, r4, #8
   85b94:	e70b      	b.n	859ae <_realloc_r+0x8e>
   85b96:	4620      	mov	r0, r4
   85b98:	462a      	mov	r2, r5
   85b9a:	6801      	ldr	r1, [r0, #0]
   85b9c:	461f      	mov	r7, r3
   85b9e:	6011      	str	r1, [r2, #0]
   85ba0:	6841      	ldr	r1, [r0, #4]
   85ba2:	46d1      	mov	r9, sl
   85ba4:	6051      	str	r1, [r2, #4]
   85ba6:	6883      	ldr	r3, [r0, #8]
   85ba8:	6093      	str	r3, [r2, #8]
   85baa:	e719      	b.n	859e0 <_realloc_r+0xc0>
   85bac:	ebab 0b06 	sub.w	fp, fp, r6
   85bb0:	eb09 0106 	add.w	r1, r9, r6
   85bb4:	f04b 0201 	orr.w	r2, fp, #1
   85bb8:	6099      	str	r1, [r3, #8]
   85bba:	604a      	str	r2, [r1, #4]
   85bbc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   85bc0:	4640      	mov	r0, r8
   85bc2:	f003 0301 	and.w	r3, r3, #1
   85bc6:	431e      	orrs	r6, r3
   85bc8:	f844 6c04 	str.w	r6, [r4, #-4]
   85bcc:	f7ff fea6 	bl	8591c <__malloc_unlock>
   85bd0:	4625      	mov	r5, r4
   85bd2:	e718      	b.n	85a06 <_realloc_r+0xe6>
   85bd4:	4621      	mov	r1, r4
   85bd6:	f7ff fe3b 	bl	85850 <memmove>
   85bda:	e6ee      	b.n	859ba <_realloc_r+0x9a>
   85bdc:	68a3      	ldr	r3, [r4, #8]
   85bde:	2a24      	cmp	r2, #36	; 0x24
   85be0:	6083      	str	r3, [r0, #8]
   85be2:	68e3      	ldr	r3, [r4, #12]
   85be4:	60c3      	str	r3, [r0, #12]
   85be6:	d018      	beq.n	85c1a <_realloc_r+0x2fa>
   85be8:	f100 0310 	add.w	r3, r0, #16
   85bec:	f104 0210 	add.w	r2, r4, #16
   85bf0:	e6dd      	b.n	859ae <_realloc_r+0x8e>
   85bf2:	f850 3c04 	ldr.w	r3, [r0, #-4]
   85bf6:	4625      	mov	r5, r4
   85bf8:	f023 0303 	bic.w	r3, r3, #3
   85bfc:	441f      	add	r7, r3
   85bfe:	e6ef      	b.n	859e0 <_realloc_r+0xc0>
   85c00:	68a1      	ldr	r1, [r4, #8]
   85c02:	2a24      	cmp	r2, #36	; 0x24
   85c04:	f8ca 1010 	str.w	r1, [sl, #16]
   85c08:	68e1      	ldr	r1, [r4, #12]
   85c0a:	f8ca 1014 	str.w	r1, [sl, #20]
   85c0e:	d00d      	beq.n	85c2c <_realloc_r+0x30c>
   85c10:	f104 0010 	add.w	r0, r4, #16
   85c14:	f10a 0218 	add.w	r2, sl, #24
   85c18:	e7bf      	b.n	85b9a <_realloc_r+0x27a>
   85c1a:	6922      	ldr	r2, [r4, #16]
   85c1c:	f100 0318 	add.w	r3, r0, #24
   85c20:	6102      	str	r2, [r0, #16]
   85c22:	6961      	ldr	r1, [r4, #20]
   85c24:	f104 0218 	add.w	r2, r4, #24
   85c28:	6141      	str	r1, [r0, #20]
   85c2a:	e6c0      	b.n	859ae <_realloc_r+0x8e>
   85c2c:	6922      	ldr	r2, [r4, #16]
   85c2e:	f104 0018 	add.w	r0, r4, #24
   85c32:	f8ca 2018 	str.w	r2, [sl, #24]
   85c36:	6961      	ldr	r1, [r4, #20]
   85c38:	f10a 0220 	add.w	r2, sl, #32
   85c3c:	f8ca 101c 	str.w	r1, [sl, #28]
   85c40:	e7ab      	b.n	85b9a <_realloc_r+0x27a>
   85c42:	4621      	mov	r1, r4
   85c44:	462a      	mov	r2, r5
   85c46:	e782      	b.n	85b4e <_realloc_r+0x22e>
   85c48:	4621      	mov	r1, r4
   85c4a:	4628      	mov	r0, r5
   85c4c:	9301      	str	r3, [sp, #4]
   85c4e:	f7ff fdff 	bl	85850 <memmove>
   85c52:	9b01      	ldr	r3, [sp, #4]
   85c54:	e781      	b.n	85b5a <_realloc_r+0x23a>
   85c56:	68a1      	ldr	r1, [r4, #8]
   85c58:	2a24      	cmp	r2, #36	; 0x24
   85c5a:	f8ca 1010 	str.w	r1, [sl, #16]
   85c5e:	68e1      	ldr	r1, [r4, #12]
   85c60:	f8ca 1014 	str.w	r1, [sl, #20]
   85c64:	d006      	beq.n	85c74 <_realloc_r+0x354>
   85c66:	f104 0110 	add.w	r1, r4, #16
   85c6a:	f10a 0218 	add.w	r2, sl, #24
   85c6e:	e76e      	b.n	85b4e <_realloc_r+0x22e>
   85c70:	200706ec 	.word	0x200706ec
   85c74:	6922      	ldr	r2, [r4, #16]
   85c76:	f104 0118 	add.w	r1, r4, #24
   85c7a:	f8ca 2018 	str.w	r2, [sl, #24]
   85c7e:	6960      	ldr	r0, [r4, #20]
   85c80:	f10a 0220 	add.w	r2, sl, #32
   85c84:	f8ca 001c 	str.w	r0, [sl, #28]
   85c88:	e761      	b.n	85b4e <_realloc_r+0x22e>
   85c8a:	bf00      	nop

00085c8c <_sbrk_r>:
   85c8c:	b538      	push	{r3, r4, r5, lr}
   85c8e:	2300      	movs	r3, #0
   85c90:	4c06      	ldr	r4, [pc, #24]	; (85cac <_sbrk_r+0x20>)
   85c92:	4605      	mov	r5, r0
   85c94:	4608      	mov	r0, r1
   85c96:	6023      	str	r3, [r4, #0]
   85c98:	f7fc fb80 	bl	8239c <_sbrk>
   85c9c:	1c43      	adds	r3, r0, #1
   85c9e:	d000      	beq.n	85ca2 <_sbrk_r+0x16>
   85ca0:	bd38      	pop	{r3, r4, r5, pc}
   85ca2:	6823      	ldr	r3, [r4, #0]
   85ca4:	2b00      	cmp	r3, #0
   85ca6:	d0fb      	beq.n	85ca0 <_sbrk_r+0x14>
   85ca8:	602b      	str	r3, [r5, #0]
   85caa:	bd38      	pop	{r3, r4, r5, pc}
   85cac:	2007c5c8 	.word	0x2007c5c8

00085cb0 <__sread>:
   85cb0:	b510      	push	{r4, lr}
   85cb2:	460c      	mov	r4, r1
   85cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85cb8:	f000 f9c6 	bl	86048 <_read_r>
   85cbc:	2800      	cmp	r0, #0
   85cbe:	db03      	blt.n	85cc8 <__sread+0x18>
   85cc0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   85cc2:	4403      	add	r3, r0
   85cc4:	6523      	str	r3, [r4, #80]	; 0x50
   85cc6:	bd10      	pop	{r4, pc}
   85cc8:	89a3      	ldrh	r3, [r4, #12]
   85cca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   85cce:	81a3      	strh	r3, [r4, #12]
   85cd0:	bd10      	pop	{r4, pc}
   85cd2:	bf00      	nop

00085cd4 <__swrite>:
   85cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85cd8:	460c      	mov	r4, r1
   85cda:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   85cde:	461f      	mov	r7, r3
   85ce0:	05cb      	lsls	r3, r1, #23
   85ce2:	4616      	mov	r6, r2
   85ce4:	4605      	mov	r5, r0
   85ce6:	d507      	bpl.n	85cf8 <__swrite+0x24>
   85ce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85cec:	2302      	movs	r3, #2
   85cee:	2200      	movs	r2, #0
   85cf0:	f000 f994 	bl	8601c <_lseek_r>
   85cf4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   85cf8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   85cfc:	81a1      	strh	r1, [r4, #12]
   85cfe:	463b      	mov	r3, r7
   85d00:	4632      	mov	r2, r6
   85d02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85d06:	4628      	mov	r0, r5
   85d08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85d0c:	f000 b8a2 	b.w	85e54 <_write_r>

00085d10 <__sseek>:
   85d10:	b510      	push	{r4, lr}
   85d12:	460c      	mov	r4, r1
   85d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85d18:	f000 f980 	bl	8601c <_lseek_r>
   85d1c:	89a3      	ldrh	r3, [r4, #12]
   85d1e:	1c42      	adds	r2, r0, #1
   85d20:	bf0e      	itee	eq
   85d22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   85d26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   85d2a:	6520      	strne	r0, [r4, #80]	; 0x50
   85d2c:	81a3      	strh	r3, [r4, #12]
   85d2e:	bd10      	pop	{r4, pc}

00085d30 <__sclose>:
   85d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85d34:	f000 b8fa 	b.w	85f2c <_close_r>

00085d38 <__swbuf_r>:
   85d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85d3a:	460d      	mov	r5, r1
   85d3c:	4614      	mov	r4, r2
   85d3e:	4606      	mov	r6, r0
   85d40:	b110      	cbz	r0, 85d48 <__swbuf_r+0x10>
   85d42:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85d44:	2b00      	cmp	r3, #0
   85d46:	d04b      	beq.n	85de0 <__swbuf_r+0xa8>
   85d48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   85d4c:	69a3      	ldr	r3, [r4, #24]
   85d4e:	b291      	uxth	r1, r2
   85d50:	0708      	lsls	r0, r1, #28
   85d52:	60a3      	str	r3, [r4, #8]
   85d54:	d539      	bpl.n	85dca <__swbuf_r+0x92>
   85d56:	6923      	ldr	r3, [r4, #16]
   85d58:	2b00      	cmp	r3, #0
   85d5a:	d036      	beq.n	85dca <__swbuf_r+0x92>
   85d5c:	b2ed      	uxtb	r5, r5
   85d5e:	0489      	lsls	r1, r1, #18
   85d60:	462f      	mov	r7, r5
   85d62:	d515      	bpl.n	85d90 <__swbuf_r+0x58>
   85d64:	6822      	ldr	r2, [r4, #0]
   85d66:	6961      	ldr	r1, [r4, #20]
   85d68:	1ad3      	subs	r3, r2, r3
   85d6a:	428b      	cmp	r3, r1
   85d6c:	da1c      	bge.n	85da8 <__swbuf_r+0x70>
   85d6e:	3301      	adds	r3, #1
   85d70:	68a1      	ldr	r1, [r4, #8]
   85d72:	1c50      	adds	r0, r2, #1
   85d74:	3901      	subs	r1, #1
   85d76:	60a1      	str	r1, [r4, #8]
   85d78:	6020      	str	r0, [r4, #0]
   85d7a:	7015      	strb	r5, [r2, #0]
   85d7c:	6962      	ldr	r2, [r4, #20]
   85d7e:	429a      	cmp	r2, r3
   85d80:	d01a      	beq.n	85db8 <__swbuf_r+0x80>
   85d82:	89a3      	ldrh	r3, [r4, #12]
   85d84:	07db      	lsls	r3, r3, #31
   85d86:	d501      	bpl.n	85d8c <__swbuf_r+0x54>
   85d88:	2d0a      	cmp	r5, #10
   85d8a:	d015      	beq.n	85db8 <__swbuf_r+0x80>
   85d8c:	4638      	mov	r0, r7
   85d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85d90:	6e61      	ldr	r1, [r4, #100]	; 0x64
   85d92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   85d96:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   85d9a:	81a2      	strh	r2, [r4, #12]
   85d9c:	6822      	ldr	r2, [r4, #0]
   85d9e:	6661      	str	r1, [r4, #100]	; 0x64
   85da0:	6961      	ldr	r1, [r4, #20]
   85da2:	1ad3      	subs	r3, r2, r3
   85da4:	428b      	cmp	r3, r1
   85da6:	dbe2      	blt.n	85d6e <__swbuf_r+0x36>
   85da8:	4621      	mov	r1, r4
   85daa:	4630      	mov	r0, r6
   85dac:	f7fe fddc 	bl	84968 <_fflush_r>
   85db0:	b940      	cbnz	r0, 85dc4 <__swbuf_r+0x8c>
   85db2:	2301      	movs	r3, #1
   85db4:	6822      	ldr	r2, [r4, #0]
   85db6:	e7db      	b.n	85d70 <__swbuf_r+0x38>
   85db8:	4621      	mov	r1, r4
   85dba:	4630      	mov	r0, r6
   85dbc:	f7fe fdd4 	bl	84968 <_fflush_r>
   85dc0:	2800      	cmp	r0, #0
   85dc2:	d0e3      	beq.n	85d8c <__swbuf_r+0x54>
   85dc4:	f04f 37ff 	mov.w	r7, #4294967295
   85dc8:	e7e0      	b.n	85d8c <__swbuf_r+0x54>
   85dca:	4621      	mov	r1, r4
   85dcc:	4630      	mov	r0, r6
   85dce:	f7fe fcbb 	bl	84748 <__swsetup_r>
   85dd2:	2800      	cmp	r0, #0
   85dd4:	d1f6      	bne.n	85dc4 <__swbuf_r+0x8c>
   85dd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   85dda:	6923      	ldr	r3, [r4, #16]
   85ddc:	b291      	uxth	r1, r2
   85dde:	e7bd      	b.n	85d5c <__swbuf_r+0x24>
   85de0:	f7fe fe56 	bl	84a90 <__sinit>
   85de4:	e7b0      	b.n	85d48 <__swbuf_r+0x10>
   85de6:	bf00      	nop

00085de8 <_wcrtomb_r>:
   85de8:	b5f0      	push	{r4, r5, r6, r7, lr}
   85dea:	4606      	mov	r6, r0
   85dec:	b085      	sub	sp, #20
   85dee:	461f      	mov	r7, r3
   85df0:	b189      	cbz	r1, 85e16 <_wcrtomb_r+0x2e>
   85df2:	4c10      	ldr	r4, [pc, #64]	; (85e34 <_wcrtomb_r+0x4c>)
   85df4:	4d10      	ldr	r5, [pc, #64]	; (85e38 <_wcrtomb_r+0x50>)
   85df6:	6824      	ldr	r4, [r4, #0]
   85df8:	6b64      	ldr	r4, [r4, #52]	; 0x34
   85dfa:	2c00      	cmp	r4, #0
   85dfc:	bf08      	it	eq
   85dfe:	462c      	moveq	r4, r5
   85e00:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   85e04:	47a0      	blx	r4
   85e06:	1c43      	adds	r3, r0, #1
   85e08:	d103      	bne.n	85e12 <_wcrtomb_r+0x2a>
   85e0a:	2200      	movs	r2, #0
   85e0c:	238a      	movs	r3, #138	; 0x8a
   85e0e:	603a      	str	r2, [r7, #0]
   85e10:	6033      	str	r3, [r6, #0]
   85e12:	b005      	add	sp, #20
   85e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85e16:	460c      	mov	r4, r1
   85e18:	4a06      	ldr	r2, [pc, #24]	; (85e34 <_wcrtomb_r+0x4c>)
   85e1a:	4d07      	ldr	r5, [pc, #28]	; (85e38 <_wcrtomb_r+0x50>)
   85e1c:	6811      	ldr	r1, [r2, #0]
   85e1e:	4622      	mov	r2, r4
   85e20:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   85e22:	a901      	add	r1, sp, #4
   85e24:	2c00      	cmp	r4, #0
   85e26:	bf08      	it	eq
   85e28:	462c      	moveq	r4, r5
   85e2a:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   85e2e:	47a0      	blx	r4
   85e30:	e7e9      	b.n	85e06 <_wcrtomb_r+0x1e>
   85e32:	bf00      	nop
   85e34:	20070150 	.word	0x20070150
   85e38:	20070580 	.word	0x20070580

00085e3c <__ascii_wctomb>:
   85e3c:	b119      	cbz	r1, 85e46 <__ascii_wctomb+0xa>
   85e3e:	2aff      	cmp	r2, #255	; 0xff
   85e40:	d803      	bhi.n	85e4a <__ascii_wctomb+0xe>
   85e42:	700a      	strb	r2, [r1, #0]
   85e44:	2101      	movs	r1, #1
   85e46:	4608      	mov	r0, r1
   85e48:	4770      	bx	lr
   85e4a:	238a      	movs	r3, #138	; 0x8a
   85e4c:	f04f 31ff 	mov.w	r1, #4294967295
   85e50:	6003      	str	r3, [r0, #0]
   85e52:	e7f8      	b.n	85e46 <__ascii_wctomb+0xa>

00085e54 <_write_r>:
   85e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85e56:	460e      	mov	r6, r1
   85e58:	2500      	movs	r5, #0
   85e5a:	4c08      	ldr	r4, [pc, #32]	; (85e7c <_write_r+0x28>)
   85e5c:	4611      	mov	r1, r2
   85e5e:	4607      	mov	r7, r0
   85e60:	461a      	mov	r2, r3
   85e62:	4630      	mov	r0, r6
   85e64:	6025      	str	r5, [r4, #0]
   85e66:	f7fb ff05 	bl	81c74 <_write>
   85e6a:	1c43      	adds	r3, r0, #1
   85e6c:	d000      	beq.n	85e70 <_write_r+0x1c>
   85e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85e70:	6823      	ldr	r3, [r4, #0]
   85e72:	2b00      	cmp	r3, #0
   85e74:	d0fb      	beq.n	85e6e <_write_r+0x1a>
   85e76:	603b      	str	r3, [r7, #0]
   85e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85e7a:	bf00      	nop
   85e7c:	2007c5c8 	.word	0x2007c5c8

00085e80 <__register_exitproc>:
   85e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85e84:	4c27      	ldr	r4, [pc, #156]	; (85f24 <__register_exitproc+0xa4>)
   85e86:	4607      	mov	r7, r0
   85e88:	6826      	ldr	r6, [r4, #0]
   85e8a:	4688      	mov	r8, r1
   85e8c:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   85e90:	4692      	mov	sl, r2
   85e92:	4699      	mov	r9, r3
   85e94:	2c00      	cmp	r4, #0
   85e96:	d03c      	beq.n	85f12 <__register_exitproc+0x92>
   85e98:	6865      	ldr	r5, [r4, #4]
   85e9a:	2d1f      	cmp	r5, #31
   85e9c:	dc1a      	bgt.n	85ed4 <__register_exitproc+0x54>
   85e9e:	f105 0e01 	add.w	lr, r5, #1
   85ea2:	b17f      	cbz	r7, 85ec4 <__register_exitproc+0x44>
   85ea4:	2001      	movs	r0, #1
   85ea6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   85eaa:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   85eae:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
   85eb2:	fa00 f205 	lsl.w	r2, r0, r5
   85eb6:	4311      	orrs	r1, r2
   85eb8:	2f02      	cmp	r7, #2
   85eba:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
   85ebe:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   85ec2:	d020      	beq.n	85f06 <__register_exitproc+0x86>
   85ec4:	3502      	adds	r5, #2
   85ec6:	f8c4 e004 	str.w	lr, [r4, #4]
   85eca:	2000      	movs	r0, #0
   85ecc:	f844 8025 	str.w	r8, [r4, r5, lsl #2]
   85ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85ed4:	4b14      	ldr	r3, [pc, #80]	; (85f28 <__register_exitproc+0xa8>)
   85ed6:	b30b      	cbz	r3, 85f1c <__register_exitproc+0x9c>
   85ed8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   85edc:	f7ff f9b2 	bl	85244 <malloc>
   85ee0:	4604      	mov	r4, r0
   85ee2:	b1d8      	cbz	r0, 85f1c <__register_exitproc+0x9c>
   85ee4:	2000      	movs	r0, #0
   85ee6:	f8d6 3148 	ldr.w	r3, [r6, #328]	; 0x148
   85eea:	f04f 0e01 	mov.w	lr, #1
   85eee:	6060      	str	r0, [r4, #4]
   85ef0:	6023      	str	r3, [r4, #0]
   85ef2:	4605      	mov	r5, r0
   85ef4:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   85ef8:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   85efc:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   85f00:	2f00      	cmp	r7, #0
   85f02:	d0df      	beq.n	85ec4 <__register_exitproc+0x44>
   85f04:	e7ce      	b.n	85ea4 <__register_exitproc+0x24>
   85f06:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   85f0a:	431a      	orrs	r2, r3
   85f0c:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   85f10:	e7d8      	b.n	85ec4 <__register_exitproc+0x44>
   85f12:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   85f16:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   85f1a:	e7bd      	b.n	85e98 <__register_exitproc+0x18>
   85f1c:	f04f 30ff 	mov.w	r0, #4294967295
   85f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85f24:	00086fb0 	.word	0x00086fb0
   85f28:	00085245 	.word	0x00085245

00085f2c <_close_r>:
   85f2c:	b538      	push	{r3, r4, r5, lr}
   85f2e:	2300      	movs	r3, #0
   85f30:	4c06      	ldr	r4, [pc, #24]	; (85f4c <_close_r+0x20>)
   85f32:	4605      	mov	r5, r0
   85f34:	4608      	mov	r0, r1
   85f36:	6023      	str	r3, [r4, #0]
   85f38:	f7fc fa4c 	bl	823d4 <_close>
   85f3c:	1c43      	adds	r3, r0, #1
   85f3e:	d000      	beq.n	85f42 <_close_r+0x16>
   85f40:	bd38      	pop	{r3, r4, r5, pc}
   85f42:	6823      	ldr	r3, [r4, #0]
   85f44:	2b00      	cmp	r3, #0
   85f46:	d0fb      	beq.n	85f40 <_close_r+0x14>
   85f48:	602b      	str	r3, [r5, #0]
   85f4a:	bd38      	pop	{r3, r4, r5, pc}
   85f4c:	2007c5c8 	.word	0x2007c5c8

00085f50 <_fclose_r>:
   85f50:	b570      	push	{r4, r5, r6, lr}
   85f52:	b139      	cbz	r1, 85f64 <_fclose_r+0x14>
   85f54:	4605      	mov	r5, r0
   85f56:	460c      	mov	r4, r1
   85f58:	b108      	cbz	r0, 85f5e <_fclose_r+0xe>
   85f5a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85f5c:	b383      	cbz	r3, 85fc0 <_fclose_r+0x70>
   85f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85f62:	b913      	cbnz	r3, 85f6a <_fclose_r+0x1a>
   85f64:	2600      	movs	r6, #0
   85f66:	4630      	mov	r0, r6
   85f68:	bd70      	pop	{r4, r5, r6, pc}
   85f6a:	4621      	mov	r1, r4
   85f6c:	4628      	mov	r0, r5
   85f6e:	f7fe fc5f 	bl	84830 <__sflush_r>
   85f72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   85f74:	4606      	mov	r6, r0
   85f76:	b133      	cbz	r3, 85f86 <_fclose_r+0x36>
   85f78:	69e1      	ldr	r1, [r4, #28]
   85f7a:	4628      	mov	r0, r5
   85f7c:	4798      	blx	r3
   85f7e:	2800      	cmp	r0, #0
   85f80:	bfb8      	it	lt
   85f82:	f04f 36ff 	movlt.w	r6, #4294967295
   85f86:	89a3      	ldrh	r3, [r4, #12]
   85f88:	061b      	lsls	r3, r3, #24
   85f8a:	d41c      	bmi.n	85fc6 <_fclose_r+0x76>
   85f8c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85f8e:	b141      	cbz	r1, 85fa2 <_fclose_r+0x52>
   85f90:	f104 0340 	add.w	r3, r4, #64	; 0x40
   85f94:	4299      	cmp	r1, r3
   85f96:	d002      	beq.n	85f9e <_fclose_r+0x4e>
   85f98:	4628      	mov	r0, r5
   85f9a:	f7fe fe4b 	bl	84c34 <_free_r>
   85f9e:	2300      	movs	r3, #0
   85fa0:	6323      	str	r3, [r4, #48]	; 0x30
   85fa2:	6c61      	ldr	r1, [r4, #68]	; 0x44
   85fa4:	b121      	cbz	r1, 85fb0 <_fclose_r+0x60>
   85fa6:	4628      	mov	r0, r5
   85fa8:	f7fe fe44 	bl	84c34 <_free_r>
   85fac:	2300      	movs	r3, #0
   85fae:	6463      	str	r3, [r4, #68]	; 0x44
   85fb0:	f7fe fd74 	bl	84a9c <__sfp_lock_acquire>
   85fb4:	2300      	movs	r3, #0
   85fb6:	81a3      	strh	r3, [r4, #12]
   85fb8:	f7fe fd72 	bl	84aa0 <__sfp_lock_release>
   85fbc:	4630      	mov	r0, r6
   85fbe:	bd70      	pop	{r4, r5, r6, pc}
   85fc0:	f7fe fd66 	bl	84a90 <__sinit>
   85fc4:	e7cb      	b.n	85f5e <_fclose_r+0xe>
   85fc6:	6921      	ldr	r1, [r4, #16]
   85fc8:	4628      	mov	r0, r5
   85fca:	f7fe fe33 	bl	84c34 <_free_r>
   85fce:	e7dd      	b.n	85f8c <_fclose_r+0x3c>

00085fd0 <_fstat_r>:
   85fd0:	b570      	push	{r4, r5, r6, lr}
   85fd2:	460d      	mov	r5, r1
   85fd4:	2300      	movs	r3, #0
   85fd6:	4c07      	ldr	r4, [pc, #28]	; (85ff4 <_fstat_r+0x24>)
   85fd8:	4606      	mov	r6, r0
   85fda:	4611      	mov	r1, r2
   85fdc:	4628      	mov	r0, r5
   85fde:	6023      	str	r3, [r4, #0]
   85fe0:	f7fc f9fb 	bl	823da <_fstat>
   85fe4:	1c43      	adds	r3, r0, #1
   85fe6:	d000      	beq.n	85fea <_fstat_r+0x1a>
   85fe8:	bd70      	pop	{r4, r5, r6, pc}
   85fea:	6823      	ldr	r3, [r4, #0]
   85fec:	2b00      	cmp	r3, #0
   85fee:	d0fb      	beq.n	85fe8 <_fstat_r+0x18>
   85ff0:	6033      	str	r3, [r6, #0]
   85ff2:	bd70      	pop	{r4, r5, r6, pc}
   85ff4:	2007c5c8 	.word	0x2007c5c8

00085ff8 <_isatty_r>:
   85ff8:	b538      	push	{r3, r4, r5, lr}
   85ffa:	2300      	movs	r3, #0
   85ffc:	4c06      	ldr	r4, [pc, #24]	; (86018 <_isatty_r+0x20>)
   85ffe:	4605      	mov	r5, r0
   86000:	4608      	mov	r0, r1
   86002:	6023      	str	r3, [r4, #0]
   86004:	f7fc f9ee 	bl	823e4 <_isatty>
   86008:	1c43      	adds	r3, r0, #1
   8600a:	d000      	beq.n	8600e <_isatty_r+0x16>
   8600c:	bd38      	pop	{r3, r4, r5, pc}
   8600e:	6823      	ldr	r3, [r4, #0]
   86010:	2b00      	cmp	r3, #0
   86012:	d0fb      	beq.n	8600c <_isatty_r+0x14>
   86014:	602b      	str	r3, [r5, #0]
   86016:	bd38      	pop	{r3, r4, r5, pc}
   86018:	2007c5c8 	.word	0x2007c5c8

0008601c <_lseek_r>:
   8601c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8601e:	460e      	mov	r6, r1
   86020:	2500      	movs	r5, #0
   86022:	4c08      	ldr	r4, [pc, #32]	; (86044 <_lseek_r+0x28>)
   86024:	4611      	mov	r1, r2
   86026:	4607      	mov	r7, r0
   86028:	461a      	mov	r2, r3
   8602a:	4630      	mov	r0, r6
   8602c:	6025      	str	r5, [r4, #0]
   8602e:	f7fc f9db 	bl	823e8 <_lseek>
   86032:	1c43      	adds	r3, r0, #1
   86034:	d000      	beq.n	86038 <_lseek_r+0x1c>
   86036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86038:	6823      	ldr	r3, [r4, #0]
   8603a:	2b00      	cmp	r3, #0
   8603c:	d0fb      	beq.n	86036 <_lseek_r+0x1a>
   8603e:	603b      	str	r3, [r7, #0]
   86040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86042:	bf00      	nop
   86044:	2007c5c8 	.word	0x2007c5c8

00086048 <_read_r>:
   86048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8604a:	460e      	mov	r6, r1
   8604c:	2500      	movs	r5, #0
   8604e:	4c08      	ldr	r4, [pc, #32]	; (86070 <_read_r+0x28>)
   86050:	4611      	mov	r1, r2
   86052:	4607      	mov	r7, r0
   86054:	461a      	mov	r2, r3
   86056:	4630      	mov	r0, r6
   86058:	6025      	str	r5, [r4, #0]
   8605a:	f7fa f881 	bl	80160 <_read>
   8605e:	1c43      	adds	r3, r0, #1
   86060:	d000      	beq.n	86064 <_read_r+0x1c>
   86062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86064:	6823      	ldr	r3, [r4, #0]
   86066:	2b00      	cmp	r3, #0
   86068:	d0fb      	beq.n	86062 <_read_r+0x1a>
   8606a:	603b      	str	r3, [r7, #0]
   8606c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8606e:	bf00      	nop
   86070:	2007c5c8 	.word	0x2007c5c8

00086074 <__aeabi_uldivmod>:
   86074:	b953      	cbnz	r3, 8608c <__aeabi_uldivmod+0x18>
   86076:	b94a      	cbnz	r2, 8608c <__aeabi_uldivmod+0x18>
   86078:	2900      	cmp	r1, #0
   8607a:	bf08      	it	eq
   8607c:	2800      	cmpeq	r0, #0
   8607e:	bf1c      	itt	ne
   86080:	f04f 31ff 	movne.w	r1, #4294967295
   86084:	f04f 30ff 	movne.w	r0, #4294967295
   86088:	f000 b97a 	b.w	86380 <__aeabi_idiv0>
   8608c:	f1ad 0c08 	sub.w	ip, sp, #8
   86090:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   86094:	f000 f806 	bl	860a4 <__udivmoddi4>
   86098:	f8dd e004 	ldr.w	lr, [sp, #4]
   8609c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   860a0:	b004      	add	sp, #16
   860a2:	4770      	bx	lr

000860a4 <__udivmoddi4>:
   860a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   860a8:	468c      	mov	ip, r1
   860aa:	460e      	mov	r6, r1
   860ac:	4604      	mov	r4, r0
   860ae:	9d08      	ldr	r5, [sp, #32]
   860b0:	2b00      	cmp	r3, #0
   860b2:	d150      	bne.n	86156 <__udivmoddi4+0xb2>
   860b4:	428a      	cmp	r2, r1
   860b6:	4617      	mov	r7, r2
   860b8:	d96c      	bls.n	86194 <__udivmoddi4+0xf0>
   860ba:	fab2 fe82 	clz	lr, r2
   860be:	f1be 0f00 	cmp.w	lr, #0
   860c2:	d00b      	beq.n	860dc <__udivmoddi4+0x38>
   860c4:	f1ce 0c20 	rsb	ip, lr, #32
   860c8:	fa01 f60e 	lsl.w	r6, r1, lr
   860cc:	fa20 fc0c 	lsr.w	ip, r0, ip
   860d0:	fa02 f70e 	lsl.w	r7, r2, lr
   860d4:	ea4c 0c06 	orr.w	ip, ip, r6
   860d8:	fa00 f40e 	lsl.w	r4, r0, lr
   860dc:	0c3a      	lsrs	r2, r7, #16
   860de:	fbbc f9f2 	udiv	r9, ip, r2
   860e2:	b2bb      	uxth	r3, r7
   860e4:	fb02 cc19 	mls	ip, r2, r9, ip
   860e8:	fb09 fa03 	mul.w	sl, r9, r3
   860ec:	ea4f 4814 	mov.w	r8, r4, lsr #16
   860f0:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   860f4:	45b2      	cmp	sl, r6
   860f6:	d90a      	bls.n	8610e <__udivmoddi4+0x6a>
   860f8:	19f6      	adds	r6, r6, r7
   860fa:	f109 31ff 	add.w	r1, r9, #4294967295
   860fe:	f080 8125 	bcs.w	8634c <__udivmoddi4+0x2a8>
   86102:	45b2      	cmp	sl, r6
   86104:	f240 8122 	bls.w	8634c <__udivmoddi4+0x2a8>
   86108:	f1a9 0902 	sub.w	r9, r9, #2
   8610c:	443e      	add	r6, r7
   8610e:	eba6 060a 	sub.w	r6, r6, sl
   86112:	fbb6 f0f2 	udiv	r0, r6, r2
   86116:	fb02 6610 	mls	r6, r2, r0, r6
   8611a:	fb00 f303 	mul.w	r3, r0, r3
   8611e:	b2a4      	uxth	r4, r4
   86120:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   86124:	42a3      	cmp	r3, r4
   86126:	d909      	bls.n	8613c <__udivmoddi4+0x98>
   86128:	19e4      	adds	r4, r4, r7
   8612a:	f100 32ff 	add.w	r2, r0, #4294967295
   8612e:	f080 810b 	bcs.w	86348 <__udivmoddi4+0x2a4>
   86132:	42a3      	cmp	r3, r4
   86134:	f240 8108 	bls.w	86348 <__udivmoddi4+0x2a4>
   86138:	3802      	subs	r0, #2
   8613a:	443c      	add	r4, r7
   8613c:	2100      	movs	r1, #0
   8613e:	1ae4      	subs	r4, r4, r3
   86140:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   86144:	2d00      	cmp	r5, #0
   86146:	d062      	beq.n	8620e <__udivmoddi4+0x16a>
   86148:	2300      	movs	r3, #0
   8614a:	fa24 f40e 	lsr.w	r4, r4, lr
   8614e:	602c      	str	r4, [r5, #0]
   86150:	606b      	str	r3, [r5, #4]
   86152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86156:	428b      	cmp	r3, r1
   86158:	d907      	bls.n	8616a <__udivmoddi4+0xc6>
   8615a:	2d00      	cmp	r5, #0
   8615c:	d055      	beq.n	8620a <__udivmoddi4+0x166>
   8615e:	2100      	movs	r1, #0
   86160:	e885 0041 	stmia.w	r5, {r0, r6}
   86164:	4608      	mov	r0, r1
   86166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8616a:	fab3 f183 	clz	r1, r3
   8616e:	2900      	cmp	r1, #0
   86170:	f040 808f 	bne.w	86292 <__udivmoddi4+0x1ee>
   86174:	42b3      	cmp	r3, r6
   86176:	d302      	bcc.n	8617e <__udivmoddi4+0xda>
   86178:	4282      	cmp	r2, r0
   8617a:	f200 80fc 	bhi.w	86376 <__udivmoddi4+0x2d2>
   8617e:	1a84      	subs	r4, r0, r2
   86180:	eb66 0603 	sbc.w	r6, r6, r3
   86184:	2001      	movs	r0, #1
   86186:	46b4      	mov	ip, r6
   86188:	2d00      	cmp	r5, #0
   8618a:	d040      	beq.n	8620e <__udivmoddi4+0x16a>
   8618c:	e885 1010 	stmia.w	r5, {r4, ip}
   86190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86194:	b912      	cbnz	r2, 8619c <__udivmoddi4+0xf8>
   86196:	2701      	movs	r7, #1
   86198:	fbb7 f7f2 	udiv	r7, r7, r2
   8619c:	fab7 fe87 	clz	lr, r7
   861a0:	f1be 0f00 	cmp.w	lr, #0
   861a4:	d135      	bne.n	86212 <__udivmoddi4+0x16e>
   861a6:	2101      	movs	r1, #1
   861a8:	1bf6      	subs	r6, r6, r7
   861aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   861ae:	fa1f f887 	uxth.w	r8, r7
   861b2:	fbb6 f2fc 	udiv	r2, r6, ip
   861b6:	fb0c 6612 	mls	r6, ip, r2, r6
   861ba:	fb08 f002 	mul.w	r0, r8, r2
   861be:	0c23      	lsrs	r3, r4, #16
   861c0:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   861c4:	42b0      	cmp	r0, r6
   861c6:	d907      	bls.n	861d8 <__udivmoddi4+0x134>
   861c8:	19f6      	adds	r6, r6, r7
   861ca:	f102 33ff 	add.w	r3, r2, #4294967295
   861ce:	d202      	bcs.n	861d6 <__udivmoddi4+0x132>
   861d0:	42b0      	cmp	r0, r6
   861d2:	f200 80d2 	bhi.w	8637a <__udivmoddi4+0x2d6>
   861d6:	461a      	mov	r2, r3
   861d8:	1a36      	subs	r6, r6, r0
   861da:	fbb6 f0fc 	udiv	r0, r6, ip
   861de:	fb0c 6610 	mls	r6, ip, r0, r6
   861e2:	fb08 f800 	mul.w	r8, r8, r0
   861e6:	b2a3      	uxth	r3, r4
   861e8:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   861ec:	45a0      	cmp	r8, r4
   861ee:	d907      	bls.n	86200 <__udivmoddi4+0x15c>
   861f0:	19e4      	adds	r4, r4, r7
   861f2:	f100 33ff 	add.w	r3, r0, #4294967295
   861f6:	d202      	bcs.n	861fe <__udivmoddi4+0x15a>
   861f8:	45a0      	cmp	r8, r4
   861fa:	f200 80b9 	bhi.w	86370 <__udivmoddi4+0x2cc>
   861fe:	4618      	mov	r0, r3
   86200:	eba4 0408 	sub.w	r4, r4, r8
   86204:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   86208:	e79c      	b.n	86144 <__udivmoddi4+0xa0>
   8620a:	4629      	mov	r1, r5
   8620c:	4628      	mov	r0, r5
   8620e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86212:	fa07 f70e 	lsl.w	r7, r7, lr
   86216:	f1ce 0320 	rsb	r3, lr, #32
   8621a:	fa26 f203 	lsr.w	r2, r6, r3
   8621e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   86222:	fbb2 f1fc 	udiv	r1, r2, ip
   86226:	fa1f f887 	uxth.w	r8, r7
   8622a:	fb0c 2211 	mls	r2, ip, r1, r2
   8622e:	fa06 f60e 	lsl.w	r6, r6, lr
   86232:	fa20 f303 	lsr.w	r3, r0, r3
   86236:	fb01 f908 	mul.w	r9, r1, r8
   8623a:	4333      	orrs	r3, r6
   8623c:	0c1e      	lsrs	r6, r3, #16
   8623e:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   86242:	45b1      	cmp	r9, r6
   86244:	fa00 f40e 	lsl.w	r4, r0, lr
   86248:	d909      	bls.n	8625e <__udivmoddi4+0x1ba>
   8624a:	19f6      	adds	r6, r6, r7
   8624c:	f101 32ff 	add.w	r2, r1, #4294967295
   86250:	f080 808c 	bcs.w	8636c <__udivmoddi4+0x2c8>
   86254:	45b1      	cmp	r9, r6
   86256:	f240 8089 	bls.w	8636c <__udivmoddi4+0x2c8>
   8625a:	3902      	subs	r1, #2
   8625c:	443e      	add	r6, r7
   8625e:	eba6 0609 	sub.w	r6, r6, r9
   86262:	fbb6 f0fc 	udiv	r0, r6, ip
   86266:	fb0c 6210 	mls	r2, ip, r0, r6
   8626a:	fb00 f908 	mul.w	r9, r0, r8
   8626e:	b29e      	uxth	r6, r3
   86270:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   86274:	45b1      	cmp	r9, r6
   86276:	d907      	bls.n	86288 <__udivmoddi4+0x1e4>
   86278:	19f6      	adds	r6, r6, r7
   8627a:	f100 33ff 	add.w	r3, r0, #4294967295
   8627e:	d271      	bcs.n	86364 <__udivmoddi4+0x2c0>
   86280:	45b1      	cmp	r9, r6
   86282:	d96f      	bls.n	86364 <__udivmoddi4+0x2c0>
   86284:	3802      	subs	r0, #2
   86286:	443e      	add	r6, r7
   86288:	eba6 0609 	sub.w	r6, r6, r9
   8628c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   86290:	e78f      	b.n	861b2 <__udivmoddi4+0x10e>
   86292:	f1c1 0720 	rsb	r7, r1, #32
   86296:	fa22 f807 	lsr.w	r8, r2, r7
   8629a:	408b      	lsls	r3, r1
   8629c:	ea48 0303 	orr.w	r3, r8, r3
   862a0:	fa26 f407 	lsr.w	r4, r6, r7
   862a4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   862a8:	fbb4 f9fe 	udiv	r9, r4, lr
   862ac:	fa1f fc83 	uxth.w	ip, r3
   862b0:	fb0e 4419 	mls	r4, lr, r9, r4
   862b4:	408e      	lsls	r6, r1
   862b6:	fa20 f807 	lsr.w	r8, r0, r7
   862ba:	fb09 fa0c 	mul.w	sl, r9, ip
   862be:	ea48 0806 	orr.w	r8, r8, r6
   862c2:	ea4f 4618 	mov.w	r6, r8, lsr #16
   862c6:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   862ca:	45a2      	cmp	sl, r4
   862cc:	fa02 f201 	lsl.w	r2, r2, r1
   862d0:	fa00 f601 	lsl.w	r6, r0, r1
   862d4:	d908      	bls.n	862e8 <__udivmoddi4+0x244>
   862d6:	18e4      	adds	r4, r4, r3
   862d8:	f109 30ff 	add.w	r0, r9, #4294967295
   862dc:	d244      	bcs.n	86368 <__udivmoddi4+0x2c4>
   862de:	45a2      	cmp	sl, r4
   862e0:	d942      	bls.n	86368 <__udivmoddi4+0x2c4>
   862e2:	f1a9 0902 	sub.w	r9, r9, #2
   862e6:	441c      	add	r4, r3
   862e8:	eba4 040a 	sub.w	r4, r4, sl
   862ec:	fbb4 f0fe 	udiv	r0, r4, lr
   862f0:	fb0e 4410 	mls	r4, lr, r0, r4
   862f4:	fb00 fc0c 	mul.w	ip, r0, ip
   862f8:	fa1f f888 	uxth.w	r8, r8
   862fc:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   86300:	45a4      	cmp	ip, r4
   86302:	d907      	bls.n	86314 <__udivmoddi4+0x270>
   86304:	18e4      	adds	r4, r4, r3
   86306:	f100 3eff 	add.w	lr, r0, #4294967295
   8630a:	d229      	bcs.n	86360 <__udivmoddi4+0x2bc>
   8630c:	45a4      	cmp	ip, r4
   8630e:	d927      	bls.n	86360 <__udivmoddi4+0x2bc>
   86310:	3802      	subs	r0, #2
   86312:	441c      	add	r4, r3
   86314:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   86318:	fba0 8902 	umull	r8, r9, r0, r2
   8631c:	eba4 0c0c 	sub.w	ip, r4, ip
   86320:	45cc      	cmp	ip, r9
   86322:	46c2      	mov	sl, r8
   86324:	46ce      	mov	lr, r9
   86326:	d315      	bcc.n	86354 <__udivmoddi4+0x2b0>
   86328:	d012      	beq.n	86350 <__udivmoddi4+0x2ac>
   8632a:	b155      	cbz	r5, 86342 <__udivmoddi4+0x29e>
   8632c:	ebb6 030a 	subs.w	r3, r6, sl
   86330:	eb6c 060e 	sbc.w	r6, ip, lr
   86334:	fa06 f707 	lsl.w	r7, r6, r7
   86338:	40cb      	lsrs	r3, r1
   8633a:	431f      	orrs	r7, r3
   8633c:	40ce      	lsrs	r6, r1
   8633e:	602f      	str	r7, [r5, #0]
   86340:	606e      	str	r6, [r5, #4]
   86342:	2100      	movs	r1, #0
   86344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86348:	4610      	mov	r0, r2
   8634a:	e6f7      	b.n	8613c <__udivmoddi4+0x98>
   8634c:	4689      	mov	r9, r1
   8634e:	e6de      	b.n	8610e <__udivmoddi4+0x6a>
   86350:	4546      	cmp	r6, r8
   86352:	d2ea      	bcs.n	8632a <__udivmoddi4+0x286>
   86354:	ebb8 0a02 	subs.w	sl, r8, r2
   86358:	eb69 0e03 	sbc.w	lr, r9, r3
   8635c:	3801      	subs	r0, #1
   8635e:	e7e4      	b.n	8632a <__udivmoddi4+0x286>
   86360:	4670      	mov	r0, lr
   86362:	e7d7      	b.n	86314 <__udivmoddi4+0x270>
   86364:	4618      	mov	r0, r3
   86366:	e78f      	b.n	86288 <__udivmoddi4+0x1e4>
   86368:	4681      	mov	r9, r0
   8636a:	e7bd      	b.n	862e8 <__udivmoddi4+0x244>
   8636c:	4611      	mov	r1, r2
   8636e:	e776      	b.n	8625e <__udivmoddi4+0x1ba>
   86370:	3802      	subs	r0, #2
   86372:	443c      	add	r4, r7
   86374:	e744      	b.n	86200 <__udivmoddi4+0x15c>
   86376:	4608      	mov	r0, r1
   86378:	e706      	b.n	86188 <__udivmoddi4+0xe4>
   8637a:	3a02      	subs	r2, #2
   8637c:	443e      	add	r6, r7
   8637e:	e72b      	b.n	861d8 <__udivmoddi4+0x134>

00086380 <__aeabi_idiv0>:
   86380:	4770      	bx	lr
   86382:	bf00      	nop
   86384:	454c4449 	.word	0x454c4449
   86388:	00000000 	.word	0x00000000
   8638c:	20726d54 	.word	0x20726d54
   86390:	00637653 	.word	0x00637653
   86394:	43415254 	.word	0x43415254
   86398:	53415f45 	.word	0x53415f45
   8639c:	54524553 	.word	0x54524553
   863a0:	7270203a 	.word	0x7270203a
   863a4:	65684376 	.word	0x65684376
   863a8:	61446b63 	.word	0x61446b63
   863ac:	6f546174 	.word	0x6f546174
   863b0:	764f6542 	.word	0x764f6542
   863b4:	72777265 	.word	0x72777265
   863b8:	65747469 	.word	0x65747469
   863bc:	726f466e 	.word	0x726f466e
   863c0:	746c754d 	.word	0x746c754d
   863c4:	746e4569 	.word	0x746e4569
   863c8:	76457972 	.word	0x76457972
   863cc:	73746e65 	.word	0x73746e65
   863d0:	6f6e203a 	.word	0x6f6e203a
   863d4:	746e4566 	.word	0x746e4566
   863d8:	73656972 	.word	0x73656972
   863dc:	68436f54 	.word	0x68436f54
   863e0:	206b6365 	.word	0x206b6365
   863e4:	30203d3d 	.word	0x30203d3d
   863e8:	00000000 	.word	0x00000000
   863ec:	43415254 	.word	0x43415254
   863f0:	53415f45 	.word	0x53415f45
   863f4:	54524553 	.word	0x54524553
   863f8:	7270203a 	.word	0x7270203a
   863fc:	61725476 	.word	0x61725476
   86400:	65476563 	.word	0x65476563
   86404:	53544474 	.word	0x53544474
   86408:	6e49203a 	.word	0x6e49203a
   8640c:	696c6176 	.word	0x696c6176
   86410:	61762064 	.word	0x61762064
   86414:	2065756c 	.word	0x2065756c
   86418:	20726f66 	.word	0x20726f66
   8641c:	61726170 	.word	0x61726170
   86420:	616d5f6d 	.word	0x616d5f6d
   86424:	53544478 	.word	0x53544478
   86428:	00000000 	.word	0x00000000
   8642c:	20646142 	.word	0x20646142
   86430:	61726170 	.word	0x61726170
   86434:	616d5f6d 	.word	0x616d5f6d
   86438:	53544478 	.word	0x53544478
   8643c:	206e6920 	.word	0x206e6920
   86440:	54767270 	.word	0x54767270
   86444:	65636172 	.word	0x65636172
   86448:	44746547 	.word	0x44746547
   8644c:	00005354 	.word	0x00005354
   86450:	63617254 	.word	0x63617254
   86454:	65522065 	.word	0x65522065
   86458:	64726f63 	.word	0x64726f63
   8645c:	44207265 	.word	0x44207265
   86460:	006f6d65 	.word	0x006f6d65
   86464:	63617254 	.word	0x63617254
   86468:	74732065 	.word	0x74732065
   8646c:	20747261 	.word	0x20747261
   86470:	6b72616d 	.word	0x6b72616d
   86474:	20737265 	.word	0x20737265
   86478:	65726c61 	.word	0x65726c61
   8647c:	20796461 	.word	0x20796461
   86480:	74696e69 	.word	0x74696e69
   86484:	696c6169 	.word	0x696c6169
   86488:	2164657a 	.word	0x2164657a
   8648c:	00000000 	.word	0x00000000
   86490:	43415254 	.word	0x43415254
   86494:	53415f45 	.word	0x53415f45
   86498:	54524553 	.word	0x54524553
   8649c:	6975203a 	.word	0x6975203a
   864a0:	65646e49 	.word	0x65646e49
   864a4:	4f664f78 	.word	0x4f664f78
   864a8:	63656a62 	.word	0x63656a62
   864ac:	49203a74 	.word	0x49203a74
   864b0:	6c61766e 	.word	0x6c61766e
   864b4:	76206469 	.word	0x76206469
   864b8:	65756c61 	.word	0x65756c61
   864bc:	726f6620 	.word	0x726f6620
   864c0:	6a626f20 	.word	0x6a626f20
   864c4:	63746365 	.word	0x63746365
   864c8:	7373616c 	.word	0x7373616c
   864cc:	00000000 	.word	0x00000000
   864d0:	43415254 	.word	0x43415254
   864d4:	53415f45 	.word	0x53415f45
   864d8:	54524553 	.word	0x54524553
   864dc:	6975203a 	.word	0x6975203a
   864e0:	65646e49 	.word	0x65646e49
   864e4:	4f664f78 	.word	0x4f664f78
   864e8:	63656a62 	.word	0x63656a62
   864ec:	49203a74 	.word	0x49203a74
   864f0:	6c61766e 	.word	0x6c61766e
   864f4:	76206469 	.word	0x76206469
   864f8:	65756c61 	.word	0x65756c61
   864fc:	726f6620 	.word	0x726f6620
   86500:	6a626f20 	.word	0x6a626f20
   86504:	68746365 	.word	0x68746365
   86508:	6c646e61 	.word	0x6c646e61
   8650c:	00000065 	.word	0x00000065
   86510:	43415254 	.word	0x43415254
   86514:	53415f45 	.word	0x53415f45
   86518:	54524553 	.word	0x54524553
   8651c:	5476203a 	.word	0x5476203a
   86520:	65636172 	.word	0x65636172
   86524:	6f727245 	.word	0x6f727245
   86528:	6d203a72 	.word	0x6d203a72
   8652c:	3d206773 	.word	0x3d206773
   86530:	554e203d 	.word	0x554e203d
   86534:	00004c4c 	.word	0x00004c4c
   86538:	43415254 	.word	0x43415254
   8653c:	53415f45 	.word	0x53415f45
   86540:	54524553 	.word	0x54524553
   86544:	5476203a 	.word	0x5476203a
   86548:	65636172 	.word	0x65636172
   8654c:	6f727245 	.word	0x6f727245
   86550:	52203a72 	.word	0x52203a72
   86554:	726f6365 	.word	0x726f6365
   86558:	44726564 	.word	0x44726564
   8655c:	50617461 	.word	0x50617461
   86560:	3d207274 	.word	0x3d207274
   86564:	554e203d 	.word	0x554e203d
   86568:	00004c4c 	.word	0x00004c4c
   8656c:	43415254 	.word	0x43415254
   86570:	53415f45 	.word	0x53415f45
   86574:	54524553 	.word	0x54524553
   86578:	5476203a 	.word	0x5476203a
   8657c:	65636172 	.word	0x65636172
   86580:	4f746553 	.word	0x4f746553
   86584:	63656a62 	.word	0x63656a62
   86588:	6d614e74 	.word	0x6d614e74
   8658c:	6e203a65 	.word	0x6e203a65
   86590:	20656d61 	.word	0x20656d61
   86594:	4e203d3d 	.word	0x4e203d3d
   86598:	004c4c55 	.word	0x004c4c55
   8659c:	656c6c49 	.word	0x656c6c49
   865a0:	206c6167 	.word	0x206c6167
   865a4:	656a626f 	.word	0x656a626f
   865a8:	63207463 	.word	0x63207463
   865ac:	7373616c 	.word	0x7373616c
   865b0:	206e6920 	.word	0x206e6920
   865b4:	61725476 	.word	0x61725476
   865b8:	65536563 	.word	0x65536563
   865bc:	6a624f74 	.word	0x6a624f74
   865c0:	4e746365 	.word	0x4e746365
   865c4:	00656d61 	.word	0x00656d61
   865c8:	656c6c49 	.word	0x656c6c49
   865cc:	206c6167 	.word	0x206c6167
   865d0:	646e6168 	.word	0x646e6168
   865d4:	2820656c 	.word	0x2820656c
   865d8:	69202930 	.word	0x69202930
   865dc:	5476206e 	.word	0x5476206e
   865e0:	65636172 	.word	0x65636172
   865e4:	4f746553 	.word	0x4f746553
   865e8:	63656a62 	.word	0x63656a62
   865ec:	6d614e74 	.word	0x6d614e74
   865f0:	00002e65 	.word	0x00002e65
   865f4:	43415254 	.word	0x43415254
   865f8:	53415f45 	.word	0x53415f45
   865fc:	54524553 	.word	0x54524553
   86600:	5478203a 	.word	0x5478203a
   86604:	65636172 	.word	0x65636172
   86608:	4f746547 	.word	0x4f746547
   8660c:	63656a62 	.word	0x63656a62
   86610:	6e614874 	.word	0x6e614874
   86614:	3a656c64 	.word	0x3a656c64
   86618:	766e4920 	.word	0x766e4920
   8661c:	64696c61 	.word	0x64696c61
   86620:	6c617620 	.word	0x6c617620
   86624:	66206575 	.word	0x66206575
   86628:	6f20726f 	.word	0x6f20726f
   8662c:	63656a62 	.word	0x63656a62
   86630:	616c6374 	.word	0x616c6374
   86634:	00007373 	.word	0x00007373
   86638:	65747441 	.word	0x65747441
   8663c:	2074706d 	.word	0x2074706d
   86640:	69206f74 	.word	0x69206f74
   86644:	7865646e 	.word	0x7865646e
   86648:	74756f20 	.word	0x74756f20
   8664c:	65646973 	.word	0x65646973
   86650:	65766520 	.word	0x65766520
   86654:	6220746e 	.word	0x6220746e
   86658:	65666675 	.word	0x65666675
   8665c:	00002172 	.word	0x00002172
   86660:	20545744 	.word	0x20545744
   86664:	20746f6e 	.word	0x20746f6e
   86668:	70707573 	.word	0x70707573
   8666c:	6574726f 	.word	0x6574726f
   86670:	79622064 	.word	0x79622064
   86674:	69687420 	.word	0x69687420
   86678:	68632073 	.word	0x68632073
   8667c:	00217069 	.word	0x00217069
   86680:	5f545744 	.word	0x5f545744
   86684:	43435943 	.word	0x43435943
   86688:	6e20544e 	.word	0x6e20544e
   8668c:	7320746f 	.word	0x7320746f
   86690:	6f707075 	.word	0x6f707075
   86694:	64657472 	.word	0x64657472
   86698:	20796220 	.word	0x20796220
   8669c:	73696874 	.word	0x73696874
   866a0:	69686320 	.word	0x69686320
   866a4:	00002170 	.word	0x00002170
   866a8:	43415254 	.word	0x43415254
   866ac:	53415f45 	.word	0x53415f45
   866b0:	54524553 	.word	0x54524553
   866b4:	7270203a 	.word	0x7270203a
   866b8:	61725476 	.word	0x61725476
   866bc:	65476563 	.word	0x65476563
   866c0:	72615074 	.word	0x72615074
   866c4:	203a6d61 	.word	0x203a6d61
   866c8:	61766e49 	.word	0x61766e49
   866cc:	2064696c 	.word	0x2064696c
   866d0:	756c6176 	.word	0x756c6176
   866d4:	6f662065 	.word	0x6f662065
   866d8:	61702072 	.word	0x61702072
   866dc:	5f6d6172 	.word	0x5f6d6172
   866e0:	0078616d 	.word	0x0078616d
   866e4:	43415254 	.word	0x43415254
   866e8:	53415f45 	.word	0x53415f45
   866ec:	54524553 	.word	0x54524553
   866f0:	6975203a 	.word	0x6975203a
   866f4:	63617254 	.word	0x63617254
   866f8:	74654765 	.word	0x74654765
   866fc:	656a624f 	.word	0x656a624f
   86700:	74537463 	.word	0x74537463
   86704:	3a657461 	.word	0x3a657461
   86708:	6a626f20 	.word	0x6a626f20
   8670c:	63746365 	.word	0x63746365
   86710:	7373616c 	.word	0x7373616c
   86714:	203d3e20 	.word	0x203d3e20
   86718:	43415254 	.word	0x43415254
   8671c:	434e5f45 	.word	0x434e5f45
   86720:	5353414c 	.word	0x5353414c
   86724:	00005345 	.word	0x00005345
   86728:	43415254 	.word	0x43415254
   8672c:	53415f45 	.word	0x53415f45
   86730:	54524553 	.word	0x54524553
   86734:	6975203a 	.word	0x6975203a
   86738:	63617254 	.word	0x63617254
   8673c:	74654765 	.word	0x74654765
   86740:	656a624f 	.word	0x656a624f
   86744:	74537463 	.word	0x74537463
   86748:	3a657461 	.word	0x3a657461
   8674c:	766e4920 	.word	0x766e4920
   86750:	64696c61 	.word	0x64696c61
   86754:	6c617620 	.word	0x6c617620
   86758:	66206575 	.word	0x66206575
   8675c:	6920726f 	.word	0x6920726f
   86760:	00000064 	.word	0x00000064
   86764:	43415254 	.word	0x43415254
   86768:	53415f45 	.word	0x53415f45
   8676c:	54524553 	.word	0x54524553
   86770:	6975203a 	.word	0x6975203a
   86774:	63617254 	.word	0x63617254
   86778:	74654765 	.word	0x74654765
   8677c:	6f697250 	.word	0x6f697250
   86780:	79746972 	.word	0x79746972
   86784:	706f7250 	.word	0x706f7250
   86788:	79747265 	.word	0x79747265
   8678c:	626f203a 	.word	0x626f203a
   86790:	7463656a 	.word	0x7463656a
   86794:	73616c63 	.word	0x73616c63
   86798:	3d3e2073 	.word	0x3d3e2073
   8679c:	41525420 	.word	0x41525420
   867a0:	4e5f4543 	.word	0x4e5f4543
   867a4:	53414c43 	.word	0x53414c43
   867a8:	00534553 	.word	0x00534553
   867ac:	43415254 	.word	0x43415254
   867b0:	53415f45 	.word	0x53415f45
   867b4:	54524553 	.word	0x54524553
   867b8:	6975203a 	.word	0x6975203a
   867bc:	63617254 	.word	0x63617254
   867c0:	74654765 	.word	0x74654765
   867c4:	6f697250 	.word	0x6f697250
   867c8:	79746972 	.word	0x79746972
   867cc:	706f7250 	.word	0x706f7250
   867d0:	79747265 	.word	0x79747265
   867d4:	6e49203a 	.word	0x6e49203a
   867d8:	696c6176 	.word	0x696c6176
   867dc:	61762064 	.word	0x61762064
   867e0:	2065756c 	.word	0x2065756c
   867e4:	20726f66 	.word	0x20726f66
   867e8:	00006469 	.word	0x00006469
   867ec:	43415254 	.word	0x43415254
   867f0:	53415f45 	.word	0x53415f45
   867f4:	54524553 	.word	0x54524553
   867f8:	5476203a 	.word	0x5476203a
   867fc:	65636172 	.word	0x65636172
   86800:	4f746553 	.word	0x4f746553
   86804:	63656a62 	.word	0x63656a62
   86808:	61745374 	.word	0x61745374
   8680c:	203a6574 	.word	0x203a6574
   86810:	656a626f 	.word	0x656a626f
   86814:	6c637463 	.word	0x6c637463
   86818:	20737361 	.word	0x20737361
   8681c:	54203d3e 	.word	0x54203d3e
   86820:	45434152 	.word	0x45434152
   86824:	4c434e5f 	.word	0x4c434e5f
   86828:	45535341 	.word	0x45535341
   8682c:	00000053 	.word	0x00000053
   86830:	43415254 	.word	0x43415254
   86834:	53415f45 	.word	0x53415f45
   86838:	54524553 	.word	0x54524553
   8683c:	5476203a 	.word	0x5476203a
   86840:	65636172 	.word	0x65636172
   86844:	4f746553 	.word	0x4f746553
   86848:	63656a62 	.word	0x63656a62
   8684c:	61745374 	.word	0x61745374
   86850:	203a6574 	.word	0x203a6574
   86854:	61766e49 	.word	0x61766e49
   86858:	2064696c 	.word	0x2064696c
   8685c:	756c6176 	.word	0x756c6176
   86860:	6f662065 	.word	0x6f662065
   86864:	64692072 	.word	0x64692072
   86868:	00000000 	.word	0x00000000
   8686c:	43415254 	.word	0x43415254
   86870:	53415f45 	.word	0x53415f45
   86874:	54524553 	.word	0x54524553
   86878:	5476203a 	.word	0x5476203a
   8687c:	65636172 	.word	0x65636172
   86880:	50746553 	.word	0x50746553
   86884:	726f6972 	.word	0x726f6972
   86888:	50797469 	.word	0x50797469
   8688c:	65706f72 	.word	0x65706f72
   86890:	3a797472 	.word	0x3a797472
   86894:	6a626f20 	.word	0x6a626f20
   86898:	63746365 	.word	0x63746365
   8689c:	7373616c 	.word	0x7373616c
   868a0:	203d3e20 	.word	0x203d3e20
   868a4:	43415254 	.word	0x43415254
   868a8:	434e5f45 	.word	0x434e5f45
   868ac:	5353414c 	.word	0x5353414c
   868b0:	00005345 	.word	0x00005345
   868b4:	43415254 	.word	0x43415254
   868b8:	53415f45 	.word	0x53415f45
   868bc:	54524553 	.word	0x54524553
   868c0:	5476203a 	.word	0x5476203a
   868c4:	65636172 	.word	0x65636172
   868c8:	50746553 	.word	0x50746553
   868cc:	726f6972 	.word	0x726f6972
   868d0:	50797469 	.word	0x50797469
   868d4:	65706f72 	.word	0x65706f72
   868d8:	3a797472 	.word	0x3a797472
   868dc:	766e4920 	.word	0x766e4920
   868e0:	64696c61 	.word	0x64696c61
   868e4:	6c617620 	.word	0x6c617620
   868e8:	66206575 	.word	0x66206575
   868ec:	6920726f 	.word	0x6920726f
   868f0:	00000064 	.word	0x00000064
   868f4:	43415254 	.word	0x43415254
   868f8:	53415f45 	.word	0x53415f45
   868fc:	54524553 	.word	0x54524553
   86900:	5476203a 	.word	0x5476203a
   86904:	65636172 	.word	0x65636172
   86908:	54746553 	.word	0x54746553
   8690c:	496b7361 	.word	0x496b7361
   86910:	6174736e 	.word	0x6174736e
   86914:	4665636e 	.word	0x4665636e
   86918:	73696e69 	.word	0x73696e69
   8691c:	3a646568 	.word	0x3a646568
   86920:	766e4920 	.word	0x766e4920
   86924:	64696c61 	.word	0x64696c61
   86928:	6c617620 	.word	0x6c617620
   8692c:	66206575 	.word	0x66206575
   86930:	6820726f 	.word	0x6820726f
   86934:	6c646e61 	.word	0x6c646e61
   86938:	00000065 	.word	0x00000065
   8693c:	43415254 	.word	0x43415254
   86940:	53415f45 	.word	0x53415f45
   86944:	54524553 	.word	0x54524553
   86948:	5476203a 	.word	0x5476203a
   8694c:	65636172 	.word	0x65636172
   86950:	726f7453 	.word	0x726f7453
   86954:	72654b65 	.word	0x72654b65
   86958:	436c656e 	.word	0x436c656e
   8695c:	3a6c6c61 	.word	0x3a6c6c61
   86960:	6f636520 	.word	0x6f636520
   86964:	3e206564 	.word	0x3e206564
   86968:	7830203d 	.word	0x7830203d
   8696c:	00004646 	.word	0x00004646
   86970:	43415254 	.word	0x43415254
   86974:	53415f45 	.word	0x53415f45
   86978:	54524553 	.word	0x54524553
   8697c:	5476203a 	.word	0x5476203a
   86980:	65636172 	.word	0x65636172
   86984:	726f7453 	.word	0x726f7453
   86988:	72654b65 	.word	0x72654b65
   8698c:	436c656e 	.word	0x436c656e
   86990:	3a6c6c61 	.word	0x3a6c6c61
   86994:	6a626f20 	.word	0x6a626f20
   86998:	43746365 	.word	0x43746365
   8699c:	7373616c 	.word	0x7373616c
   869a0:	203d3e20 	.word	0x203d3e20
   869a4:	43415254 	.word	0x43415254
   869a8:	434e5f45 	.word	0x434e5f45
   869ac:	5353414c 	.word	0x5353414c
   869b0:	00005345 	.word	0x00005345
   869b4:	43415254 	.word	0x43415254
   869b8:	53415f45 	.word	0x53415f45
   869bc:	54524553 	.word	0x54524553
   869c0:	5476203a 	.word	0x5476203a
   869c4:	65636172 	.word	0x65636172
   869c8:	726f7453 	.word	0x726f7453
   869cc:	72654b65 	.word	0x72654b65
   869d0:	436c656e 	.word	0x436c656e
   869d4:	3a6c6c61 	.word	0x3a6c6c61
   869d8:	766e4920 	.word	0x766e4920
   869dc:	64696c61 	.word	0x64696c61
   869e0:	6c617620 	.word	0x6c617620
   869e4:	66206575 	.word	0x66206575
   869e8:	6f20726f 	.word	0x6f20726f
   869ec:	63656a62 	.word	0x63656a62
   869f0:	6d754e74 	.word	0x6d754e74
   869f4:	00726562 	.word	0x00726562
   869f8:	6f636552 	.word	0x6f636552
   869fc:	72656472 	.word	0x72656472
   86a00:	73756220 	.word	0x73756220
   86a04:	202d2079 	.word	0x202d2079
   86a08:	68676968 	.word	0x68676968
   86a0c:	69727020 	.word	0x69727020
   86a10:	7469726f 	.word	0x7469726f
   86a14:	53492079 	.word	0x53492079
   86a18:	73752052 	.word	0x73752052
   86a1c:	20676e69 	.word	0x20676e69
   86a20:	63737973 	.word	0x63737973
   86a24:	3f6c6c61 	.word	0x3f6c6c61
   86a28:	29322820 	.word	0x29322820
   86a2c:	00000000 	.word	0x00000000
   86a30:	43415254 	.word	0x43415254
   86a34:	53415f45 	.word	0x53415f45
   86a38:	54524553 	.word	0x54524553
   86a3c:	5476203a 	.word	0x5476203a
   86a40:	65636172 	.word	0x65636172
   86a44:	726f7453 	.word	0x726f7453
   86a48:	72654b65 	.word	0x72654b65
   86a4c:	436c656e 	.word	0x436c656e
   86a50:	576c6c61 	.word	0x576c6c61
   86a54:	4e687469 	.word	0x4e687469
   86a58:	72656d75 	.word	0x72656d75
   86a5c:	61506369 	.word	0x61506369
   86a60:	4f6d6172 	.word	0x4f6d6172
   86a64:	3a796c6e 	.word	0x3a796c6e
   86a68:	766e4920 	.word	0x766e4920
   86a6c:	64696c61 	.word	0x64696c61
   86a70:	6c617620 	.word	0x6c617620
   86a74:	66206575 	.word	0x66206575
   86a78:	6520726f 	.word	0x6520726f
   86a7c:	6f637476 	.word	0x6f637476
   86a80:	00006564 	.word	0x00006564
   86a84:	6f636552 	.word	0x6f636552
   86a88:	72656472 	.word	0x72656472
   86a8c:	73756220 	.word	0x73756220
   86a90:	202d2079 	.word	0x202d2079
   86a94:	68676968 	.word	0x68676968
   86a98:	69727020 	.word	0x69727020
   86a9c:	7469726f 	.word	0x7469726f
   86aa0:	53492079 	.word	0x53492079
   86aa4:	73752052 	.word	0x73752052
   86aa8:	20676e69 	.word	0x20676e69
   86aac:	63737973 	.word	0x63737973
   86ab0:	3f6c6c61 	.word	0x3f6c6c61
   86ab4:	29342820 	.word	0x29342820
   86ab8:	00000000 	.word	0x00000000
   86abc:	43415254 	.word	0x43415254
   86ac0:	53415f45 	.word	0x53415f45
   86ac4:	54524553 	.word	0x54524553
   86ac8:	5476203a 	.word	0x5476203a
   86acc:	65636172 	.word	0x65636172
   86ad0:	726f7453 	.word	0x726f7453
   86ad4:	72654b65 	.word	0x72654b65
   86ad8:	436c656e 	.word	0x436c656e
   86adc:	3a6c6c61 	.word	0x3a6c6c61
   86ae0:	74766520 	.word	0x74766520
   86ae4:	65646f63 	.word	0x65646f63
   86ae8:	203d3e20 	.word	0x203d3e20
   86aec:	46467830 	.word	0x46467830
   86af0:	00000000 	.word	0x00000000
   86af4:	43415254 	.word	0x43415254
   86af8:	53415f45 	.word	0x53415f45
   86afc:	54524553 	.word	0x54524553
   86b00:	5476203a 	.word	0x5476203a
   86b04:	65636172 	.word	0x65636172
   86b08:	726f7453 	.word	0x726f7453
   86b0c:	72654b65 	.word	0x72654b65
   86b10:	436c656e 	.word	0x436c656e
   86b14:	576c6c61 	.word	0x576c6c61
   86b18:	50687469 	.word	0x50687469
   86b1c:	6d617261 	.word	0x6d617261
   86b20:	626f203a 	.word	0x626f203a
   86b24:	7463656a 	.word	0x7463656a
   86b28:	73616c43 	.word	0x73616c43
   86b2c:	3d3e2073 	.word	0x3d3e2073
   86b30:	41525420 	.word	0x41525420
   86b34:	4e5f4543 	.word	0x4e5f4543
   86b38:	53414c43 	.word	0x53414c43
   86b3c:	00534553 	.word	0x00534553
   86b40:	43415254 	.word	0x43415254
   86b44:	53415f45 	.word	0x53415f45
   86b48:	54524553 	.word	0x54524553
   86b4c:	5476203a 	.word	0x5476203a
   86b50:	65636172 	.word	0x65636172
   86b54:	726f7453 	.word	0x726f7453
   86b58:	72654b65 	.word	0x72654b65
   86b5c:	436c656e 	.word	0x436c656e
   86b60:	576c6c61 	.word	0x576c6c61
   86b64:	50687469 	.word	0x50687469
   86b68:	6d617261 	.word	0x6d617261
   86b6c:	6e49203a 	.word	0x6e49203a
   86b70:	696c6176 	.word	0x696c6176
   86b74:	61762064 	.word	0x61762064
   86b78:	2065756c 	.word	0x2065756c
   86b7c:	20726f66 	.word	0x20726f66
   86b80:	656a626f 	.word	0x656a626f
   86b84:	754e7463 	.word	0x754e7463
   86b88:	7265626d 	.word	0x7265626d
   86b8c:	00000000 	.word	0x00000000
   86b90:	6f636552 	.word	0x6f636552
   86b94:	72656472 	.word	0x72656472
   86b98:	73756220 	.word	0x73756220
   86b9c:	202d2079 	.word	0x202d2079
   86ba0:	68676968 	.word	0x68676968
   86ba4:	69727020 	.word	0x69727020
   86ba8:	7469726f 	.word	0x7469726f
   86bac:	53492079 	.word	0x53492079
   86bb0:	73752052 	.word	0x73752052
   86bb4:	20676e69 	.word	0x20676e69
   86bb8:	63737973 	.word	0x63737973
   86bbc:	3f6c6c61 	.word	0x3f6c6c61
   86bc0:	29332820 	.word	0x29332820
   86bc4:	00000000 	.word	0x00000000
   86bc8:	43415254 	.word	0x43415254
   86bcc:	53415f45 	.word	0x53415f45
   86bd0:	54524553 	.word	0x54524553
   86bd4:	5476203a 	.word	0x5476203a
   86bd8:	65636172 	.word	0x65636172
   86bdc:	726f7453 	.word	0x726f7453
   86be0:	73615465 	.word	0x73615465
   86be4:	6165526b 	.word	0x6165526b
   86be8:	203a7964 	.word	0x203a7964
   86bec:	61766e49 	.word	0x61766e49
   86bf0:	2064696c 	.word	0x2064696c
   86bf4:	756c6176 	.word	0x756c6176
   86bf8:	6f662065 	.word	0x6f662065
   86bfc:	61682072 	.word	0x61682072
   86c00:	656c646e 	.word	0x656c646e
   86c04:	00000000 	.word	0x00000000
   86c08:	6f636552 	.word	0x6f636552
   86c0c:	72656472 	.word	0x72656472
   86c10:	73756220 	.word	0x73756220
   86c14:	202d2079 	.word	0x202d2079
   86c18:	68676968 	.word	0x68676968
   86c1c:	69727020 	.word	0x69727020
   86c20:	7469726f 	.word	0x7469726f
   86c24:	53492079 	.word	0x53492079
   86c28:	73752052 	.word	0x73752052
   86c2c:	20676e69 	.word	0x20676e69
   86c30:	63737973 	.word	0x63737973
   86c34:	3f6c6c61 	.word	0x3f6c6c61
   86c38:	29312820 	.word	0x29312820
   86c3c:	00000000 	.word	0x00000000
   86c40:	43415254 	.word	0x43415254
   86c44:	53415f45 	.word	0x53415f45
   86c48:	54524553 	.word	0x54524553
   86c4c:	5476203a 	.word	0x5476203a
   86c50:	65636172 	.word	0x65636172
   86c54:	726f7453 	.word	0x726f7453
   86c58:	73615465 	.word	0x73615465
   86c5c:	6977736b 	.word	0x6977736b
   86c60:	3a686374 	.word	0x3a686374
   86c64:	766e4920 	.word	0x766e4920
   86c68:	64696c61 	.word	0x64696c61
   86c6c:	6c617620 	.word	0x6c617620
   86c70:	66206575 	.word	0x66206575
   86c74:	7420726f 	.word	0x7420726f
   86c78:	5f6b7361 	.word	0x5f6b7361
   86c7c:	646e6168 	.word	0x646e6168
   86c80:	0000656c 	.word	0x0000656c
   86c84:	20746f4e 	.word	0x20746f4e
   86c88:	756f6e65 	.word	0x756f6e65
   86c8c:	54206867 	.word	0x54206867
   86c90:	204b5341 	.word	0x204b5341
   86c94:	646e6168 	.word	0x646e6168
   86c98:	2073656c 	.word	0x2073656c
   86c9c:	6e69202d 	.word	0x6e69202d
   86ca0:	61657263 	.word	0x61657263
   86ca4:	4e206573 	.word	0x4e206573
   86ca8:	6b736154 	.word	0x6b736154
   86cac:	206e6920 	.word	0x206e6920
   86cb0:	43637274 	.word	0x43637274
   86cb4:	69666e6f 	.word	0x69666e6f
   86cb8:	00682e67 	.word	0x00682e67
   86cbc:	20746f4e 	.word	0x20746f4e
   86cc0:	756f6e65 	.word	0x756f6e65
   86cc4:	49206867 	.word	0x49206867
   86cc8:	68205253 	.word	0x68205253
   86ccc:	6c646e61 	.word	0x6c646e61
   86cd0:	2d207365 	.word	0x2d207365
   86cd4:	636e6920 	.word	0x636e6920
   86cd8:	73616572 	.word	0x73616572
   86cdc:	494e2065 	.word	0x494e2065
   86ce0:	69205253 	.word	0x69205253
   86ce4:	7274206e 	.word	0x7274206e
   86ce8:	6e6f4363 	.word	0x6e6f4363
   86cec:	2e676966 	.word	0x2e676966
   86cf0:	00000068 	.word	0x00000068
   86cf4:	20746f4e 	.word	0x20746f4e
   86cf8:	756f6e65 	.word	0x756f6e65
   86cfc:	53206867 	.word	0x53206867
   86d00:	50414d45 	.word	0x50414d45
   86d04:	45524f48 	.word	0x45524f48
   86d08:	6e616820 	.word	0x6e616820
   86d0c:	73656c64 	.word	0x73656c64
   86d10:	69202d20 	.word	0x69202d20
   86d14:	6572636e 	.word	0x6572636e
   86d18:	20657361 	.word	0x20657361
   86d1c:	6d65534e 	.word	0x6d65534e
   86d20:	6f687061 	.word	0x6f687061
   86d24:	69206572 	.word	0x69206572
   86d28:	7274206e 	.word	0x7274206e
   86d2c:	6e6f4363 	.word	0x6e6f4363
   86d30:	2e676966 	.word	0x2e676966
   86d34:	00000068 	.word	0x00000068
   86d38:	20746f4e 	.word	0x20746f4e
   86d3c:	756f6e65 	.word	0x756f6e65
   86d40:	4d206867 	.word	0x4d206867
   86d44:	58455455 	.word	0x58455455
   86d48:	6e616820 	.word	0x6e616820
   86d4c:	73656c64 	.word	0x73656c64
   86d50:	69202d20 	.word	0x69202d20
   86d54:	6572636e 	.word	0x6572636e
   86d58:	20657361 	.word	0x20657361
   86d5c:	74754d4e 	.word	0x74754d4e
   86d60:	69207865 	.word	0x69207865
   86d64:	7274206e 	.word	0x7274206e
   86d68:	6e6f4363 	.word	0x6e6f4363
   86d6c:	2e676966 	.word	0x2e676966
   86d70:	00000068 	.word	0x00000068
   86d74:	20746f4e 	.word	0x20746f4e
   86d78:	756f6e65 	.word	0x756f6e65
   86d7c:	51206867 	.word	0x51206867
   86d80:	45554555 	.word	0x45554555
   86d84:	6e616820 	.word	0x6e616820
   86d88:	73656c64 	.word	0x73656c64
   86d8c:	69202d20 	.word	0x69202d20
   86d90:	6572636e 	.word	0x6572636e
   86d94:	20657361 	.word	0x20657361
   86d98:	6575514e 	.word	0x6575514e
   86d9c:	69206575 	.word	0x69206575
   86da0:	7274206e 	.word	0x7274206e
   86da4:	6e6f4363 	.word	0x6e6f4363
   86da8:	2e676966 	.word	0x2e676966
   86dac:	00000068 	.word	0x00000068
   86db0:	20746f4e 	.word	0x20746f4e
   86db4:	756f6e65 	.word	0x756f6e65
   86db8:	54206867 	.word	0x54206867
   86dbc:	52454d49 	.word	0x52454d49
   86dc0:	6e616820 	.word	0x6e616820
   86dc4:	73656c64 	.word	0x73656c64
   86dc8:	69202d20 	.word	0x69202d20
   86dcc:	6572636e 	.word	0x6572636e
   86dd0:	20657361 	.word	0x20657361
   86dd4:	6d69544e 	.word	0x6d69544e
   86dd8:	69207265 	.word	0x69207265
   86ddc:	7274206e 	.word	0x7274206e
   86de0:	6e6f4363 	.word	0x6e6f4363
   86de4:	2e676966 	.word	0x2e676966
   86de8:	00000068 	.word	0x00000068
   86dec:	20746f4e 	.word	0x20746f4e
   86df0:	756f6e65 	.word	0x756f6e65
   86df4:	45206867 	.word	0x45206867
   86df8:	544e4556 	.word	0x544e4556
   86dfc:	554f5247 	.word	0x554f5247
   86e00:	61682050 	.word	0x61682050
   86e04:	656c646e 	.word	0x656c646e
   86e08:	202d2073 	.word	0x202d2073
   86e0c:	72636e69 	.word	0x72636e69
   86e10:	65736165 	.word	0x65736165
   86e14:	76454e20 	.word	0x76454e20
   86e18:	47746e65 	.word	0x47746e65
   86e1c:	70756f72 	.word	0x70756f72
   86e20:	206e6920 	.word	0x206e6920
   86e24:	43637274 	.word	0x43637274
   86e28:	69666e6f 	.word	0x69666e6f
   86e2c:	00682e67 	.word	0x00682e67
   86e30:	547a7370 	.word	0x547a7370
   86e34:	65636172 	.word	0x65636172
   86e38:	45746547 	.word	0x45746547
   86e3c:	726f7272 	.word	0x726f7272
   86e40:	646e6148 	.word	0x646e6148
   86e44:	3a73656c 	.word	0x3a73656c
   86e48:	766e4920 	.word	0x766e4920
   86e4c:	64696c61 	.word	0x64696c61
   86e50:	6a626f20 	.word	0x6a626f20
   86e54:	63746365 	.word	0x63746365
   86e58:	7373616c 	.word	0x7373616c
   86e5c:	00000021 	.word	0x00000021
   86e60:	43415254 	.word	0x43415254
   86e64:	53415f45 	.word	0x53415f45
   86e68:	54524553 	.word	0x54524553
   86e6c:	7270203a 	.word	0x7270203a
   86e70:	61725476 	.word	0x61725476
   86e74:	73496563 	.word	0x73496563
   86e78:	656a624f 	.word	0x656a624f
   86e7c:	78457463 	.word	0x78457463
   86e80:	64756c63 	.word	0x64756c63
   86e84:	203a6465 	.word	0x203a6465
   86e88:	656a626f 	.word	0x656a626f
   86e8c:	6c637463 	.word	0x6c637463
   86e90:	20737361 	.word	0x20737361
   86e94:	54203d3e 	.word	0x54203d3e
   86e98:	45434152 	.word	0x45434152
   86e9c:	4c434e5f 	.word	0x4c434e5f
   86ea0:	45535341 	.word	0x45535341
   86ea4:	00000053 	.word	0x00000053
   86ea8:	43415254 	.word	0x43415254
   86eac:	53415f45 	.word	0x53415f45
   86eb0:	54524553 	.word	0x54524553
   86eb4:	6975203a 	.word	0x6975203a
   86eb8:	63617254 	.word	0x63617254
   86ebc:	4f734965 	.word	0x4f734965
   86ec0:	63656a62 	.word	0x63656a62
   86ec4:	63784574 	.word	0x63784574
   86ec8:	6564756c 	.word	0x6564756c
   86ecc:	49203a64 	.word	0x49203a64
   86ed0:	6c61766e 	.word	0x6c61766e
   86ed4:	76206469 	.word	0x76206469
   86ed8:	65756c61 	.word	0x65756c61
   86edc:	726f6620 	.word	0x726f6620
   86ee0:	6e616820 	.word	0x6e616820
   86ee4:	00656c64 	.word	0x00656c64
   86ee8:	61766e49 	.word	0x61766e49
   86eec:	2064696c 	.word	0x2064696c
   86ef0:	656a626f 	.word	0x656a626f
   86ef4:	63207463 	.word	0x63207463
   86ef8:	7373616c 	.word	0x7373616c
   86efc:	20444920 	.word	0x20444920
   86f00:	75206e69 	.word	0x75206e69
   86f04:	61725469 	.word	0x61725469
   86f08:	73496563 	.word	0x73496563
   86f0c:	656a624f 	.word	0x656a624f
   86f10:	78457463 	.word	0x78457463
   86f14:	64756c63 	.word	0x64756c63
   86f18:	00216465 	.word	0x00216465
   86f1c:	6f636552 	.word	0x6f636552
   86f20:	72656472 	.word	0x72656472
   86f24:	61746144 	.word	0x61746144
   86f28:	20727450 	.word	0x20727450
   86f2c:	4e207369 	.word	0x4e207369
   86f30:	2e4c4c55 	.word	0x2e4c4c55
   86f34:	6c614320 	.word	0x6c614320
   86f38:	5476206c 	.word	0x5476206c
   86f3c:	65636172 	.word	0x65636172
   86f40:	74696e49 	.word	0x74696e49
   86f44:	63617254 	.word	0x63617254
   86f48:	74614465 	.word	0x74614465
   86f4c:	20292861 	.word	0x20292861
   86f50:	6f666562 	.word	0x6f666562
   86f54:	73206572 	.word	0x73206572
   86f58:	74726174 	.word	0x74726174
   86f5c:	20676e69 	.word	0x20676e69
   86f60:	63617274 	.word	0x63617274
   86f64:	00002e65 	.word	0x00002e65
   86f68:	61747328 	.word	0x61747328
   86f6c:	70757472 	.word	0x70757472
   86f70:	00000029 	.word	0x00000029
   86f74:	6b736154 	.word	0x6b736154
   86f78:	00003120 	.word	0x00003120
   86f7c:	6b736154 	.word	0x6b736154
   86f80:	00003220 	.word	0x00003220
   86f84:	6b736154 	.word	0x6b736154
   86f88:	69203220 	.word	0x69203220
   86f8c:	75722073 	.word	0x75722073
   86f90:	6e696e6e 	.word	0x6e696e6e
   86f94:	00000a67 	.word	0x00000a67
   86f98:	6b736154 	.word	0x6b736154
   86f9c:	69203120 	.word	0x69203120
   86fa0:	75722073 	.word	0x75722073
   86fa4:	6e696e6e 	.word	0x6e696e6e
   86fa8:	00000a67 	.word	0x00000a67
   86fac:	000a7325 	.word	0x000a7325

00086fb0 <_global_impure_ptr>:
   86fb0:	20070158 33323130 37363534 42413938     X.. 0123456789AB
   86fc0:	46454443 00000000 33323130 37363534     CDEF....01234567
   86fd0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   86fe0:	0000296c                                l)..

00086fe4 <blanks.7202>:
   86fe4:	20202020 20202020 20202020 20202020                     

00086ff4 <zeroes.7203>:
   86ff4:	30303030 30303030 30303030 30303030     0000000000000000
   87004:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00087014 <_ctype_>:
   87014:	20202000 20202020 28282020 20282828     .         ((((( 
   87024:	20202020 20202020 20202020 20202020                     
   87034:	10108820 10101010 10101010 10101010      ...............
   87044:	04040410 04040404 10040404 10101010     ................
   87054:	41411010 41414141 01010101 01010101     ..AAAAAA........
   87064:	01010101 01010101 01010101 10101010     ................
   87074:	42421010 42424242 02020202 02020202     ..BBBBBB........
   87084:	02020202 02020202 02020202 10101010     ................
   87094:	00000020 00000000 00000000 00000000      ...............
	...

00087118 <_init>:
   87118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8711a:	bf00      	nop
   8711c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8711e:	bc08      	pop	{r3}
   87120:	469e      	mov	lr, r3
   87122:	4770      	bx	lr

00087124 <__init_array_start>:
   87124:	00084811 	.word	0x00084811

00087128 <__frame_dummy_init_array_entry>:
   87128:	00080119                                ....

0008712c <_fini>:
   8712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8712e:	bf00      	nop
   87130:	bcf8      	pop	{r3, r4, r5, r6, r7}
   87132:	bc08      	pop	{r3}
   87134:	469e      	mov	lr, r3
   87136:	4770      	bx	lr

00087138 <__fini_array_start>:
   87138:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070138 	.word	0x20070138

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <uxCriticalNesting>:
2007012c:	aaaaaaaa                                ....

20070130 <xFreeBytesRemaining>:
20070130:	0000a000                                ....

20070134 <xNextTaskUnblockTime>:
20070134:	ffffffff                                ....

20070138 <SystemCoreClock>:
20070138:	003d0900                                ..=.

2007013c <readyEventsEnabled>:
2007013c:	00000001                                ....

20070140 <TraceObjectClassTable>:
20070140:	01010200 00000002                       ........

20070148 <pcTextForTask1>:
20070148:	00086f98                                .o..

2007014c <pcTextForTask2>:
2007014c:	00086f84                                .o..

20070150 <_impure_ptr>:
20070150:	20070158 00000000                       X.. ....

20070158 <impure_data>:
20070158:	00000000 20070444 200704ac 20070514     ....D.. ... ... 
	...
20070200:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070210:	0005deec 0000000b 00000000 00000000     ................
	...

20070580 <__global_locale>:
20070580:	00000043 00000000 00000000 00000000     C...............
	...
200705a0:	00000043 00000000 00000000 00000000     C...............
	...
200705c0:	00000043 00000000 00000000 00000000     C...............
	...
200705e0:	00000043 00000000 00000000 00000000     C...............
	...
20070600:	00000043 00000000 00000000 00000000     C...............
	...
20070620:	00000043 00000000 00000000 00000000     C...............
	...
20070640:	00000043 00000000 00000000 00000000     C...............
	...
20070660:	00085e3d 00085799 00000000 00087014     =^...W.......p..
20070670:	00087010 0008648c 0008648c 0008648c     .p...d...d...d..
20070680:	0008648c 0008648c 0008648c 0008648c     .d...d...d...d..
20070690:	0008648c 0008648c ffffffff ffffffff     .d...d..........
200706a0:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706c8:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706ec <__malloc_av_>:
	...
200706f4:	200706ec 200706ec 200706f4 200706f4     ... ... ... ... 
20070704:	200706fc 200706fc 20070704 20070704     ... ... ... ... 
20070714:	2007070c 2007070c 20070714 20070714     ... ... ... ... 
20070724:	2007071c 2007071c 20070724 20070724     ... ... $.. $.. 
20070734:	2007072c 2007072c 20070734 20070734     ,.. ,.. 4.. 4.. 
20070744:	2007073c 2007073c 20070744 20070744     <.. <.. D.. D.. 
20070754:	2007074c 2007074c 20070754 20070754     L.. L.. T.. T.. 
20070764:	2007075c 2007075c 20070764 20070764     \.. \.. d.. d.. 
20070774:	2007076c 2007076c 20070774 20070774     l.. l.. t.. t.. 
20070784:	2007077c 2007077c 20070784 20070784     |.. |.. ... ... 
20070794:	2007078c 2007078c 20070794 20070794     ... ... ... ... 
200707a4:	2007079c 2007079c 200707a4 200707a4     ... ... ... ... 
200707b4:	200707ac 200707ac 200707b4 200707b4     ... ... ... ... 
200707c4:	200707bc 200707bc 200707c4 200707c4     ... ... ... ... 
200707d4:	200707cc 200707cc 200707d4 200707d4     ... ... ... ... 
200707e4:	200707dc 200707dc 200707e4 200707e4     ... ... ... ... 
200707f4:	200707ec 200707ec 200707f4 200707f4     ... ... ... ... 
20070804:	200707fc 200707fc 20070804 20070804     ... ... ... ... 
20070814:	2007080c 2007080c 20070814 20070814     ... ... ... ... 
20070824:	2007081c 2007081c 20070824 20070824     ... ... $.. $.. 
20070834:	2007082c 2007082c 20070834 20070834     ,.. ,.. 4.. 4.. 
20070844:	2007083c 2007083c 20070844 20070844     <.. <.. D.. D.. 
20070854:	2007084c 2007084c 20070854 20070854     L.. L.. T.. T.. 
20070864:	2007085c 2007085c 20070864 20070864     \.. \.. d.. d.. 
20070874:	2007086c 2007086c 20070874 20070874     l.. l.. t.. t.. 
20070884:	2007087c 2007087c 20070884 20070884     |.. |.. ... ... 
20070894:	2007088c 2007088c 20070894 20070894     ... ... ... ... 
200708a4:	2007089c 2007089c 200708a4 200708a4     ... ... ... ... 
200708b4:	200708ac 200708ac 200708b4 200708b4     ... ... ... ... 
200708c4:	200708bc 200708bc 200708c4 200708c4     ... ... ... ... 
200708d4:	200708cc 200708cc 200708d4 200708d4     ... ... ... ... 
200708e4:	200708dc 200708dc 200708e4 200708e4     ... ... ... ... 
200708f4:	200708ec 200708ec 200708f4 200708f4     ... ... ... ... 
20070904:	200708fc 200708fc 20070904 20070904     ... ... ... ... 
20070914:	2007090c 2007090c 20070914 20070914     ... ... ... ... 
20070924:	2007091c 2007091c 20070924 20070924     ... ... $.. $.. 
20070934:	2007092c 2007092c 20070934 20070934     ,.. ,.. 4.. 4.. 
20070944:	2007093c 2007093c 20070944 20070944     <.. <.. D.. D.. 
20070954:	2007094c 2007094c 20070954 20070954     L.. L.. T.. T.. 
20070964:	2007095c 2007095c 20070964 20070964     \.. \.. d.. d.. 
20070974:	2007096c 2007096c 20070974 20070974     l.. l.. t.. t.. 
20070984:	2007097c 2007097c 20070984 20070984     |.. |.. ... ... 
20070994:	2007098c 2007098c 20070994 20070994     ... ... ... ... 
200709a4:	2007099c 2007099c 200709a4 200709a4     ... ... ... ... 
200709b4:	200709ac 200709ac 200709b4 200709b4     ... ... ... ... 
200709c4:	200709bc 200709bc 200709c4 200709c4     ... ... ... ... 
200709d4:	200709cc 200709cc 200709d4 200709d4     ... ... ... ... 
200709e4:	200709dc 200709dc 200709e4 200709e4     ... ... ... ... 
200709f4:	200709ec 200709ec 200709f4 200709f4     ... ... ... ... 
20070a04:	200709fc 200709fc 20070a04 20070a04     ... ... ... ... 
20070a14:	20070a0c 20070a0c 20070a14 20070a14     ... ... ... ... 
20070a24:	20070a1c 20070a1c 20070a24 20070a24     ... ... $.. $.. 
20070a34:	20070a2c 20070a2c 20070a34 20070a34     ,.. ,.. 4.. 4.. 
20070a44:	20070a3c 20070a3c 20070a44 20070a44     <.. <.. D.. D.. 
20070a54:	20070a4c 20070a4c 20070a54 20070a54     L.. L.. T.. T.. 
20070a64:	20070a5c 20070a5c 20070a64 20070a64     \.. \.. d.. d.. 
20070a74:	20070a6c 20070a6c 20070a74 20070a74     l.. l.. t.. t.. 
20070a84:	20070a7c 20070a7c 20070a84 20070a84     |.. |.. ... ... 
20070a94:	20070a8c 20070a8c 20070a94 20070a94     ... ... ... ... 
20070aa4:	20070a9c 20070a9c 20070aa4 20070aa4     ... ... ... ... 
20070ab4:	20070aac 20070aac 20070ab4 20070ab4     ... ... ... ... 
20070ac4:	20070abc 20070abc 20070ac4 20070ac4     ... ... ... ... 
20070ad4:	20070acc 20070acc 20070ad4 20070ad4     ... ... ... ... 
20070ae4:	20070adc 20070adc 20070ae4 20070ae4     ... ... ... ... 

20070af4 <__malloc_sbrk_base>:
20070af4:	ffffffff                                ....

20070af8 <__malloc_trim_threshold>:
20070af8:	00020000                                ....
